   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TFC_UART.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SDA_SERIAL_OUTGOING_QUEUE,12,4
  18              		.comm	SDA_SERIAL_INCOMING_QUEUE,12,4
  19              		.comm	SDA_SERIAL_OUTGOING_QUEUE_Storage,2048,4
  20              		.comm	SDA_SERIAL_INCOMING_QUEUE_Storage,128,4
  21              		.section	.text.TFC_InitUARTs,"ax",%progbits
  22              		.align	2
  23              		.global	TFC_InitUARTs
  24              		.code	16
  25              		.thumb_func
  27              	TFC_InitUARTs:
  28              	.LFB0:
  29              		.file 1 "../Sources/TFC/TFC_UART.c"
   1:../Sources/TFC/TFC_UART.c **** #include "TFC\TFC.h"
   2:../Sources/TFC/TFC_UART.c **** 
   3:../Sources/TFC/TFC_UART.c **** void uart0_init (int sysclk, int baud);
   4:../Sources/TFC/TFC_UART.c **** 
   5:../Sources/TFC/TFC_UART.c **** ByteQueue SDA_SERIAL_OUTGOING_QUEUE;
   6:../Sources/TFC/TFC_UART.c **** ByteQueue SDA_SERIAL_INCOMING_QUEUE;
   7:../Sources/TFC/TFC_UART.c **** 
   8:../Sources/TFC/TFC_UART.c **** 
   9:../Sources/TFC/TFC_UART.c **** uint8_t SDA_SERIAL_OUTGOING_QUEUE_Storage[SDA_SERIAL_OUTGOING_QUEUE_SIZE];
  10:../Sources/TFC/TFC_UART.c **** uint8_t SDA_SERIAL_INCOMING_QUEUE_Storage[SDA_SERIAL_INCOMING_QUEUE_SIZE];
  11:../Sources/TFC/TFC_UART.c **** 
  12:../Sources/TFC/TFC_UART.c **** 
  13:../Sources/TFC/TFC_UART.c **** void TFC_InitUARTs()
  14:../Sources/TFC/TFC_UART.c **** {
  30              		.loc 1 14 0
  31              		.cfi_startproc
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
  15:../Sources/TFC/TFC_UART.c **** 	SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
  40              		.loc 1 15 0
  41 0004 274A     		ldr	r2, .L2
  42 0006 2749     		ldr	r1, .L2
  43 0008 274B     		ldr	r3, .L2+4
  44 000a CB58     		ldr	r3, [r1, r3]
  45 000c 8021     		mov	r1, #128
  46 000e 8900     		lsl	r1, r1, #2
  47 0010 1943     		orr	r1, r3
  48 0012 254B     		ldr	r3, .L2+4
  49 0014 D150     		str	r1, [r2, r3]
  16:../Sources/TFC/TFC_UART.c **** 
  17:../Sources/TFC/TFC_UART.c **** 	InitByteQueue(&SDA_SERIAL_OUTGOING_QUEUE,SDA_SERIAL_OUTGOING_QUEUE_SIZE,SDA_SERIAL_OUTGOING_QUEUE_
  50              		.loc 1 17 0
  51 0016 2549     		ldr	r1, .L2+8
  52 0018 8023     		mov	r3, #128
  53 001a 1A01     		lsl	r2, r3, #4
  54 001c 244B     		ldr	r3, .L2+12
  55 001e 081C     		mov	r0, r1
  56 0020 111C     		mov	r1, r2
  57 0022 1A1C     		mov	r2, r3
  58 0024 FFF7FEFF 		bl	InitByteQueue
  18:../Sources/TFC/TFC_UART.c **** 	InitByteQueue(&SDA_SERIAL_INCOMING_QUEUE,SDA_SERIAL_INCOMING_QUEUE_SIZE,SDA_SERIAL_INCOMING_QUEUE_
  59              		.loc 1 18 0
  60 0028 224A     		ldr	r2, .L2+16
  61 002a 234B     		ldr	r3, .L2+20
  62 002c 101C     		mov	r0, r2
  63 002e 8021     		mov	r1, #128
  64 0030 1A1C     		mov	r2, r3
  65 0032 FFF7FEFF 		bl	InitByteQueue
  19:../Sources/TFC/TFC_UART.c **** 	
  20:../Sources/TFC/TFC_UART.c **** 	PORTA_PCR1 = PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;   
  66              		.loc 1 20 0
  67 0036 214B     		ldr	r3, .L2+24
  68 0038 9022     		mov	r2, #144
  69 003a 9200     		lsl	r2, r2, #2
  70 003c 5A60     		str	r2, [r3, #4]
  21:../Sources/TFC/TFC_UART.c **** 	PORTA_PCR2 = PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;  
  71              		.loc 1 21 0
  72 003e 1F4B     		ldr	r3, .L2+24
  73 0040 9022     		mov	r2, #144
  74 0042 9200     		lsl	r2, r2, #2
  75 0044 9A60     		str	r2, [r3, #8]
  22:../Sources/TFC/TFC_UART.c **** 	
  23:../Sources/TFC/TFC_UART.c **** 	//Select PLL/2 Clock
  24:../Sources/TFC/TFC_UART.c **** 	SIM_SOPT2 &= ~(3<<26);
  76              		.loc 1 24 0
  77 0046 174A     		ldr	r2, .L2
  78 0048 1649     		ldr	r1, .L2
  79 004a 1D4B     		ldr	r3, .L2+28
  80 004c C958     		ldr	r1, [r1, r3]
  81 004e 1D4B     		ldr	r3, .L2+32
  82 0050 1940     		and	r1, r3
  83 0052 1B4B     		ldr	r3, .L2+28
  84 0054 D150     		str	r1, [r2, r3]
  25:../Sources/TFC/TFC_UART.c **** 	SIM_SOPT2 |= SIM_SOPT2_UART0SRC(1); 
  85              		.loc 1 25 0
  86 0056 134A     		ldr	r2, .L2
  87 0058 1249     		ldr	r1, .L2
  88 005a 194B     		ldr	r3, .L2+28
  89 005c CB58     		ldr	r3, [r1, r3]
  90 005e 8021     		mov	r1, #128
  91 0060 C904     		lsl	r1, r1, #19
  92 0062 1943     		orr	r1, r3
  93 0064 164B     		ldr	r3, .L2+28
  94 0066 D150     		str	r1, [r2, r3]
  26:../Sources/TFC/TFC_UART.c **** 	SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK;
  95              		.loc 1 26 0
  96 0068 0E4A     		ldr	r2, .L2
  97 006a 0E49     		ldr	r1, .L2
  98 006c 144B     		ldr	r3, .L2+28
  99 006e CB58     		ldr	r3, [r1, r3]
 100 0070 8021     		mov	r1, #128
 101 0072 4902     		lsl	r1, r1, #9
 102 0074 1943     		orr	r1, r3
 103 0076 124B     		ldr	r3, .L2+28
 104 0078 D150     		str	r1, [r2, r3]
  27:../Sources/TFC/TFC_UART.c **** 	
  28:../Sources/TFC/TFC_UART.c **** 	//We have to feed this function the clock in KHz!
  29:../Sources/TFC/TFC_UART.c ****      uart0_init (CORE_CLOCK/2/1000, SDA_SERIAL_BAUD);
 105              		.loc 1 29 0
 106 007a 134A     		ldr	r2, .L2+36
 107 007c E123     		mov	r3, #225
 108 007e 5B02     		lsl	r3, r3, #9
 109 0080 101C     		mov	r0, r2
 110 0082 191C     		mov	r1, r3
 111 0084 FFF7FEFF 		bl	uart0_init
  30:../Sources/TFC/TFC_UART.c **** 	 //Enable recieve interrupts
  31:../Sources/TFC/TFC_UART.c ****      
  32:../Sources/TFC/TFC_UART.c ****      UART0_C2 |= UART_C2_RIE_MASK;
 112              		.loc 1 32 0
 113 0088 104B     		ldr	r3, .L2+40
 114 008a 104A     		ldr	r2, .L2+40
 115 008c D278     		ldrb	r2, [r2, #3]
 116 008e D2B2     		uxtb	r2, r2
 117 0090 2021     		mov	r1, #32
 118 0092 0A43     		orr	r2, r1
 119 0094 D2B2     		uxtb	r2, r2
 120 0096 DA70     		strb	r2, [r3, #3]
  33:../Sources/TFC/TFC_UART.c ****      enable_irq(INT_UART0-16);
 121              		.loc 1 33 0
 122 0098 0C20     		mov	r0, #12
 123 009a FFF7FEFF 		bl	enable_irq
  34:../Sources/TFC/TFC_UART.c **** 	
  35:../Sources/TFC/TFC_UART.c **** }
 124              		.loc 1 35 0
 125 009e BD46     		mov	sp, r7
 126              		@ sp needed for prologue
 127 00a0 80BD     		pop	{r7, pc}
 128              	.L3:
 129 00a2 C046     		.align	2
 130              	.L2:
 131 00a4 00700440 		.word	1074032640
 132 00a8 38100000 		.word	4152
 133 00ac 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 134 00b0 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE_Storage
 135 00b4 00000000 		.word	SDA_SERIAL_INCOMING_QUEUE
 136 00b8 00000000 		.word	SDA_SERIAL_INCOMING_QUEUE_Storage
 137 00bc 00900440 		.word	1074040832
 138 00c0 04100000 		.word	4100
 139 00c4 FFFFFFF3 		.word	-201326593
 140 00c8 C05D0000 		.word	24000
 141 00cc 00A00640 		.word	1074176000
 142              		.cfi_endproc
 143              	.LFE0:
 145              		.section	.text.TFC_UART_Process,"ax",%progbits
 146              		.align	2
 147              		.global	TFC_UART_Process
 148              		.code	16
 149              		.thumb_func
 151              	TFC_UART_Process:
 152              	.LFB1:
  36:../Sources/TFC/TFC_UART.c **** 
  37:../Sources/TFC/TFC_UART.c **** void TFC_UART_Process()
  38:../Sources/TFC/TFC_UART.c **** {
 153              		.loc 1 38 0
 154              		.cfi_startproc
 155 0000 80B5     		push	{r7, lr}
 156              	.LCFI2:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 7, -8
 159              		.cfi_offset 14, -4
 160 0002 00AF     		add	r7, sp, #0
 161              	.LCFI3:
 162              		.cfi_def_cfa_register 7
  39:../Sources/TFC/TFC_UART.c **** 	if(BytesInQueue(&SDA_SERIAL_OUTGOING_QUEUE)>0 && (UART0_S1 & UART_S1_TDRE_MASK))
 163              		.loc 1 39 0
 164 0004 0C4B     		ldr	r3, .L6
 165 0006 181C     		mov	r0, r3
 166 0008 FFF7FEFF 		bl	BytesInQueue
 167 000c 031C     		mov	r3, r0
 168 000e 002B     		cmp	r3, #0
 169 0010 0FD0     		beq	.L4
 170              		.loc 1 39 0 is_stmt 0
 171 0012 0A4B     		ldr	r3, .L6+4
 172 0014 1B79     		ldrb	r3, [r3, #4]
 173 0016 DBB2     		uxtb	r3, r3
 174 0018 DBB2     		uxtb	r3, r3
 175 001a 5BB2     		sxtb	r3, r3
 176 001c 002B     		cmp	r3, #0
 177 001e 08DA     		bge	.L4
  40:../Sources/TFC/TFC_UART.c **** 			UART0_C2 |= UART_C2_TIE_MASK; //Enable Transmitter Interrupts
 178              		.loc 1 40 0 is_stmt 1
 179 0020 064B     		ldr	r3, .L6+4
 180 0022 064A     		ldr	r2, .L6+4
 181 0024 D278     		ldrb	r2, [r2, #3]
 182 0026 D2B2     		uxtb	r2, r2
 183 0028 8021     		mov	r1, #128
 184 002a 4942     		neg	r1, r1
 185 002c 0A43     		orr	r2, r1
 186 002e D2B2     		uxtb	r2, r2
 187 0030 DA70     		strb	r2, [r3, #3]
 188              	.L4:
  41:../Sources/TFC/TFC_UART.c **** }
 189              		.loc 1 41 0
 190 0032 BD46     		mov	sp, r7
 191              		@ sp needed for prologue
 192 0034 80BD     		pop	{r7, pc}
 193              	.L7:
 194 0036 C046     		.align	2
 195              	.L6:
 196 0038 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 197 003c 00A00640 		.word	1074176000
 198              		.cfi_endproc
 199              	.LFE1:
 201              		.section	.text.UART0_IRQHandler,"ax",%progbits
 202              		.align	2
 203              		.global	UART0_IRQHandler
 204              		.code	16
 205              		.thumb_func
 207              	UART0_IRQHandler:
 208              	.LFB2:
  42:../Sources/TFC/TFC_UART.c **** 
  43:../Sources/TFC/TFC_UART.c **** 
  44:../Sources/TFC/TFC_UART.c **** void UART0_IRQHandler()
  45:../Sources/TFC/TFC_UART.c **** {
 209              		.loc 1 45 0
 210              		.cfi_startproc
 211 0000 80B5     		push	{r7, lr}
 212              	.LCFI4:
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 7, -8
 215              		.cfi_offset 14, -4
 216 0002 82B0     		sub	sp, sp, #8
 217              	.LCFI5:
 218              		.cfi_def_cfa_offset 16
 219 0004 00AF     		add	r7, sp, #0
 220              	.LCFI6:
 221              		.cfi_def_cfa_register 7
  46:../Sources/TFC/TFC_UART.c **** 	uint8_t Temp;
  47:../Sources/TFC/TFC_UART.c **** 		
  48:../Sources/TFC/TFC_UART.c **** 	if(UART0_S1 & UART_S1_RDRF_MASK)
 222              		.loc 1 48 0
 223 0006 194B     		ldr	r3, .L12
 224 0008 1B79     		ldrb	r3, [r3, #4]
 225 000a DBB2     		uxtb	r3, r3
 226 000c 1A1C     		mov	r2, r3
 227 000e 2023     		mov	r3, #32
 228 0010 1340     		and	r3, r2
 229 0012 07D0     		beq	.L9
  49:../Sources/TFC/TFC_UART.c **** 	{
  50:../Sources/TFC/TFC_UART.c **** 		ByteEnqueue(&SDA_SERIAL_INCOMING_QUEUE,UART0_D);
 230              		.loc 1 50 0
 231 0014 154B     		ldr	r3, .L12
 232 0016 DB79     		ldrb	r3, [r3, #7]
 233 0018 DBB2     		uxtb	r3, r3
 234 001a 154A     		ldr	r2, .L12+4
 235 001c 101C     		mov	r0, r2
 236 001e 191C     		mov	r1, r3
 237 0020 FFF7FEFF 		bl	ByteEnqueue
 238              	.L9:
  51:../Sources/TFC/TFC_UART.c **** 	}
  52:../Sources/TFC/TFC_UART.c **** 	if(UART0_S1 & UART_S1_TDRE_MASK)
 239              		.loc 1 52 0
 240 0024 114B     		ldr	r3, .L12
 241 0026 1B79     		ldrb	r3, [r3, #4]
 242 0028 DBB2     		uxtb	r3, r3
 243 002a DBB2     		uxtb	r3, r3
 244 002c 5BB2     		sxtb	r3, r3
 245 002e 002B     		cmp	r3, #0
 246 0030 19DA     		bge	.L8
  53:../Sources/TFC/TFC_UART.c **** 	{
  54:../Sources/TFC/TFC_UART.c **** 		if(BytesInQueue(&SDA_SERIAL_OUTGOING_QUEUE)>0)
 247              		.loc 1 54 0
 248 0032 104B     		ldr	r3, .L12+8
 249 0034 181C     		mov	r0, r3
 250 0036 FFF7FEFF 		bl	BytesInQueue
 251 003a 031C     		mov	r3, r0
 252 003c 002B     		cmp	r3, #0
 253 003e 0AD0     		beq	.L11
  55:../Sources/TFC/TFC_UART.c **** 		{
  56:../Sources/TFC/TFC_UART.c **** 			ByteDequeue(&SDA_SERIAL_OUTGOING_QUEUE,&Temp);
 254              		.loc 1 56 0
 255 0040 0C4A     		ldr	r2, .L12+8
 256 0042 FB1D     		add	r3, r7, #7
 257 0044 101C     		mov	r0, r2
 258 0046 191C     		mov	r1, r3
 259 0048 FFF7FEFF 		bl	ByteDequeue
  57:../Sources/TFC/TFC_UART.c **** 			UART0_D = Temp;
 260              		.loc 1 57 0
 261 004c 074B     		ldr	r3, .L12
 262 004e FA1D     		add	r2, r7, #7
 263 0050 1278     		ldrb	r2, [r2]
 264 0052 DA71     		strb	r2, [r3, #7]
 265 0054 07E0     		b	.L8
 266              	.L11:
  58:../Sources/TFC/TFC_UART.c **** 		}
  59:../Sources/TFC/TFC_UART.c **** 		else
  60:../Sources/TFC/TFC_UART.c **** 		{
  61:../Sources/TFC/TFC_UART.c **** 			//if there is nothing left in the queue then disable interrupts
  62:../Sources/TFC/TFC_UART.c **** 			UART0_C2 &= ~UART_C2_TIE_MASK; //Disable the  Interrupts
 267              		.loc 1 62 0
 268 0056 054B     		ldr	r3, .L12
 269 0058 044A     		ldr	r2, .L12
 270 005a D278     		ldrb	r2, [r2, #3]
 271 005c D1B2     		uxtb	r1, r2
 272 005e 7F22     		mov	r2, #127
 273 0060 0A40     		and	r2, r1
 274 0062 D2B2     		uxtb	r2, r2
 275 0064 DA70     		strb	r2, [r3, #3]
 276              	.L8:
  63:../Sources/TFC/TFC_UART.c **** 		}
  64:../Sources/TFC/TFC_UART.c **** 	}
  65:../Sources/TFC/TFC_UART.c **** }
 277              		.loc 1 65 0
 278 0066 BD46     		mov	sp, r7
 279 0068 02B0     		add	sp, sp, #8
 280              		@ sp needed for prologue
 281 006a 80BD     		pop	{r7, pc}
 282              	.L13:
 283              		.align	2
 284              	.L12:
 285 006c 00A00640 		.word	1074176000
 286 0070 00000000 		.word	SDA_SERIAL_INCOMING_QUEUE
 287 0074 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 288              		.cfi_endproc
 289              	.LFE2:
 291              		.global	__aeabi_uidiv
 292              		.section	.text.uart0_init,"ax",%progbits
 293              		.align	2
 294              		.global	uart0_init
 295              		.code	16
 296              		.thumb_func
 298              	uart0_init:
 299              	.LFB3:
  66:../Sources/TFC/TFC_UART.c **** 
  67:../Sources/TFC/TFC_UART.c **** 
  68:../Sources/TFC/TFC_UART.c **** 
  69:../Sources/TFC/TFC_UART.c **** void uart0_init (int sysclk, int baud)
  70:../Sources/TFC/TFC_UART.c **** {
 300              		.loc 1 70 0
 301              		.cfi_startproc
 302 0000 80B5     		push	{r7, lr}
 303              	.LCFI7:
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 7, -8
 306              		.cfi_offset 14, -4
 307 0002 8CB0     		sub	sp, sp, #48
 308              	.LCFI8:
 309              		.cfi_def_cfa_offset 56
 310 0004 00AF     		add	r7, sp, #0
 311              	.LCFI9:
 312              		.cfi_def_cfa_register 7
 313 0006 7860     		str	r0, [r7, #4]
 314 0008 3960     		str	r1, [r7]
  71:../Sources/TFC/TFC_UART.c ****     uint8 i;
  72:../Sources/TFC/TFC_UART.c ****     uint32 calculated_baud = 0;
 315              		.loc 1 72 0
 316 000a 0023     		mov	r3, #0
 317 000c FB61     		str	r3, [r7, #28]
  73:../Sources/TFC/TFC_UART.c ****     uint32 baud_diff = 0;
 318              		.loc 1 73 0
 319 000e 0023     		mov	r3, #0
 320 0010 BB62     		str	r3, [r7, #40]
  74:../Sources/TFC/TFC_UART.c ****     uint32 osr_val = 0;
 321              		.loc 1 74 0
 322 0012 0023     		mov	r3, #0
 323 0014 7B62     		str	r3, [r7, #36]
  75:../Sources/TFC/TFC_UART.c ****     uint32 sbr_val, uart0clk;
  76:../Sources/TFC/TFC_UART.c ****     uint32 baud_rate;
  77:../Sources/TFC/TFC_UART.c ****     uint32 reg_temp = 0;
 324              		.loc 1 77 0
 325 0016 0023     		mov	r3, #0
 326 0018 BB61     		str	r3, [r7, #24]
  78:../Sources/TFC/TFC_UART.c ****     uint32 temp = 0;
 327              		.loc 1 78 0
 328 001a 0023     		mov	r3, #0
 329 001c 3B62     		str	r3, [r7, #32]
  79:../Sources/TFC/TFC_UART.c ****     
  80:../Sources/TFC/TFC_UART.c ****     SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
 330              		.loc 1 80 0
 331 001e 7D4A     		ldr	r2, .L27
 332 0020 7C49     		ldr	r1, .L27
 333 0022 7D4B     		ldr	r3, .L27+4
 334 0024 CB58     		ldr	r3, [r1, r3]
 335 0026 8021     		mov	r1, #128
 336 0028 C900     		lsl	r1, r1, #3
 337 002a 1943     		orr	r1, r3
 338 002c 7A4B     		ldr	r3, .L27+4
 339 002e D150     		str	r1, [r2, r3]
  81:../Sources/TFC/TFC_UART.c ****     
  82:../Sources/TFC/TFC_UART.c ****     // Disable UART0 before changing registers
  83:../Sources/TFC/TFC_UART.c ****     UART0_C2 &= ~(UART0_C2_TE_MASK | UART0_C2_RE_MASK);
 340              		.loc 1 83 0
 341 0030 7A4B     		ldr	r3, .L27+8
 342 0032 7A4A     		ldr	r2, .L27+8
 343 0034 D278     		ldrb	r2, [r2, #3]
 344 0036 D2B2     		uxtb	r2, r2
 345 0038 0C21     		mov	r1, #12
 346 003a 8A43     		bic	r2, r1
 347 003c D2B2     		uxtb	r2, r2
 348 003e DA70     		strb	r2, [r3, #3]
  84:../Sources/TFC/TFC_UART.c ****   
  85:../Sources/TFC/TFC_UART.c ****     // Verify that a valid clock value has been passed to the function 
  86:../Sources/TFC/TFC_UART.c ****     if ((sysclk > 50000) || (sysclk < 32))
 349              		.loc 1 86 0
 350 0040 7A68     		ldr	r2, [r7, #4]
 351 0042 774B     		ldr	r3, .L27+12
 352 0044 9A42     		cmp	r2, r3
 353 0046 02DC     		bgt	.L15
 354              		.loc 1 86 0 is_stmt 0
 355 0048 7B68     		ldr	r3, [r7, #4]
 356 004a 1F2B     		cmp	r3, #31
 357 004c 0EDC     		bgt	.L16
 358              	.L15:
  87:../Sources/TFC/TFC_UART.c ****     {
  88:../Sources/TFC/TFC_UART.c ****         sysclk = 0;
 359              		.loc 1 88 0 is_stmt 1
 360 004e 0023     		mov	r3, #0
 361 0050 7B60     		str	r3, [r7, #4]
  89:../Sources/TFC/TFC_UART.c ****         reg_temp = SIM_SOPT2;
 362              		.loc 1 89 0
 363 0052 704A     		ldr	r2, .L27
 364 0054 734B     		ldr	r3, .L27+16
 365 0056 D358     		ldr	r3, [r2, r3]
 366 0058 BB61     		str	r3, [r7, #24]
  90:../Sources/TFC/TFC_UART.c ****         reg_temp &= ~SIM_SOPT2_UART0SRC_MASK;
 367              		.loc 1 90 0
 368 005a BA69     		ldr	r2, [r7, #24]
 369 005c 724B     		ldr	r3, .L27+20
 370 005e 1340     		and	r3, r2
 371 0060 BB61     		str	r3, [r7, #24]
  91:../Sources/TFC/TFC_UART.c ****         reg_temp |= SIM_SOPT2_UART0SRC(0);
  92:../Sources/TFC/TFC_UART.c ****         SIM_SOPT2 = reg_temp;
 372              		.loc 1 92 0
 373 0062 6C4A     		ldr	r2, .L27
 374 0064 6F4B     		ldr	r3, .L27+16
 375 0066 B969     		ldr	r1, [r7, #24]
 376 0068 D150     		str	r1, [r2, r3]
 377              	.L17:
  93:../Sources/TFC/TFC_UART.c **** 			
  94:../Sources/TFC/TFC_UART.c **** 			  // Enter inifinite loop because the 
  95:../Sources/TFC/TFC_UART.c **** 			  // the desired system clock value is 
  96:../Sources/TFC/TFC_UART.c **** 			  // invalid!!
  97:../Sources/TFC/TFC_UART.c **** 			  while(1)
  98:../Sources/TFC/TFC_UART.c **** 				{}
 378              		.loc 1 98 0
 379 006a FEE7     		b	.L17
 380              	.L16:
  99:../Sources/TFC/TFC_UART.c ****     }
 100:../Sources/TFC/TFC_UART.c ****    
 101:../Sources/TFC/TFC_UART.c ****     
 102:../Sources/TFC/TFC_UART.c ****     // Initialize baud rate
 103:../Sources/TFC/TFC_UART.c ****     baud_rate = baud;
 381              		.loc 1 103 0
 382 006c 3B68     		ldr	r3, [r7]
 383 006e 7B61     		str	r3, [r7, #20]
 104:../Sources/TFC/TFC_UART.c ****     
 105:../Sources/TFC/TFC_UART.c ****     // Change units to Hz
 106:../Sources/TFC/TFC_UART.c ****     uart0clk = sysclk * 1000;
 384              		.loc 1 106 0
 385 0070 7B68     		ldr	r3, [r7, #4]
 386 0072 FA22     		mov	r2, #250
 387 0074 9200     		lsl	r2, r2, #2
 388 0076 5343     		mul	r3, r2
 389 0078 3B61     		str	r3, [r7, #16]
 107:../Sources/TFC/TFC_UART.c ****     // Calculate the first baud rate using the lowest OSR value possible.  
 108:../Sources/TFC/TFC_UART.c ****     i = 4;
 390              		.loc 1 108 0
 391 007a 3B1C     		mov	r3, r7
 392 007c 2F33     		add	r3, r3, #47
 393 007e 0422     		mov	r2, #4
 394 0080 1A70     		strb	r2, [r3]
 109:../Sources/TFC/TFC_UART.c ****     sbr_val = (uint32)(uart0clk/(baud_rate * i));
 395              		.loc 1 109 0
 396 0082 3B1C     		mov	r3, r7
 397 0084 2F33     		add	r3, r3, #47
 398 0086 1B78     		ldrb	r3, [r3]
 399 0088 7A69     		ldr	r2, [r7, #20]
 400 008a 5343     		mul	r3, r2
 401 008c 3869     		ldr	r0, [r7, #16]
 402 008e 191C     		mov	r1, r3
 403 0090 FFF7FEFF 		bl	__aeabi_uidiv
 404 0094 031C     		mov	r3, r0
 405 0096 FB60     		str	r3, [r7, #12]
 110:../Sources/TFC/TFC_UART.c ****     calculated_baud = (uart0clk / (i * sbr_val));
 406              		.loc 1 110 0
 407 0098 3B1C     		mov	r3, r7
 408 009a 2F33     		add	r3, r3, #47
 409 009c 1B78     		ldrb	r3, [r3]
 410 009e FA68     		ldr	r2, [r7, #12]
 411 00a0 5343     		mul	r3, r2
 412 00a2 3869     		ldr	r0, [r7, #16]
 413 00a4 191C     		mov	r1, r3
 414 00a6 FFF7FEFF 		bl	__aeabi_uidiv
 415 00aa 031C     		mov	r3, r0
 416 00ac FB61     		str	r3, [r7, #28]
 111:../Sources/TFC/TFC_UART.c ****         
 112:../Sources/TFC/TFC_UART.c ****     if (calculated_baud > baud_rate)
 417              		.loc 1 112 0
 418 00ae FA69     		ldr	r2, [r7, #28]
 419 00b0 7B69     		ldr	r3, [r7, #20]
 420 00b2 9A42     		cmp	r2, r3
 421 00b4 04D9     		bls	.L18
 113:../Sources/TFC/TFC_UART.c ****         baud_diff = calculated_baud - baud_rate;
 422              		.loc 1 113 0
 423 00b6 FA69     		ldr	r2, [r7, #28]
 424 00b8 7B69     		ldr	r3, [r7, #20]
 425 00ba D31A     		sub	r3, r2, r3
 426 00bc BB62     		str	r3, [r7, #40]
 427 00be 03E0     		b	.L19
 428              	.L18:
 114:../Sources/TFC/TFC_UART.c ****     else
 115:../Sources/TFC/TFC_UART.c ****         baud_diff = baud_rate - calculated_baud;
 429              		.loc 1 115 0
 430 00c0 7A69     		ldr	r2, [r7, #20]
 431 00c2 FB69     		ldr	r3, [r7, #28]
 432 00c4 D31A     		sub	r3, r2, r3
 433 00c6 BB62     		str	r3, [r7, #40]
 434              	.L19:
 116:../Sources/TFC/TFC_UART.c ****     
 117:../Sources/TFC/TFC_UART.c ****     osr_val = i;
 435              		.loc 1 117 0
 436 00c8 3B1C     		mov	r3, r7
 437 00ca 2F33     		add	r3, r3, #47
 438 00cc 1B78     		ldrb	r3, [r3]
 439 00ce 7B62     		str	r3, [r7, #36]
 118:../Sources/TFC/TFC_UART.c ****         
 119:../Sources/TFC/TFC_UART.c ****     // Select the best OSR value
 120:../Sources/TFC/TFC_UART.c ****     for (i = 5; i <= 32; i++)
 440              		.loc 1 120 0
 441 00d0 3B1C     		mov	r3, r7
 442 00d2 2F33     		add	r3, r3, #47
 443 00d4 0522     		mov	r2, #5
 444 00d6 1A70     		strb	r2, [r3]
 445 00d8 33E0     		b	.L20
 446              	.L24:
 121:../Sources/TFC/TFC_UART.c ****     {
 122:../Sources/TFC/TFC_UART.c ****         sbr_val = (uint32)(uart0clk/(baud_rate * i));
 447              		.loc 1 122 0
 448 00da 3B1C     		mov	r3, r7
 449 00dc 2F33     		add	r3, r3, #47
 450 00de 1B78     		ldrb	r3, [r3]
 451 00e0 7A69     		ldr	r2, [r7, #20]
 452 00e2 5343     		mul	r3, r2
 453 00e4 3869     		ldr	r0, [r7, #16]
 454 00e6 191C     		mov	r1, r3
 455 00e8 FFF7FEFF 		bl	__aeabi_uidiv
 456 00ec 031C     		mov	r3, r0
 457 00ee FB60     		str	r3, [r7, #12]
 123:../Sources/TFC/TFC_UART.c ****         calculated_baud = (uart0clk / (i * sbr_val));
 458              		.loc 1 123 0
 459 00f0 3B1C     		mov	r3, r7
 460 00f2 2F33     		add	r3, r3, #47
 461 00f4 1B78     		ldrb	r3, [r3]
 462 00f6 FA68     		ldr	r2, [r7, #12]
 463 00f8 5343     		mul	r3, r2
 464 00fa 3869     		ldr	r0, [r7, #16]
 465 00fc 191C     		mov	r1, r3
 466 00fe FFF7FEFF 		bl	__aeabi_uidiv
 467 0102 031C     		mov	r3, r0
 468 0104 FB61     		str	r3, [r7, #28]
 124:../Sources/TFC/TFC_UART.c ****         
 125:../Sources/TFC/TFC_UART.c ****         if (calculated_baud > baud_rate)
 469              		.loc 1 125 0
 470 0106 FA69     		ldr	r2, [r7, #28]
 471 0108 7B69     		ldr	r3, [r7, #20]
 472 010a 9A42     		cmp	r2, r3
 473 010c 04D9     		bls	.L21
 126:../Sources/TFC/TFC_UART.c ****             temp = calculated_baud - baud_rate;
 474              		.loc 1 126 0
 475 010e FA69     		ldr	r2, [r7, #28]
 476 0110 7B69     		ldr	r3, [r7, #20]
 477 0112 D31A     		sub	r3, r2, r3
 478 0114 3B62     		str	r3, [r7, #32]
 479 0116 03E0     		b	.L22
 480              	.L21:
 127:../Sources/TFC/TFC_UART.c ****         else
 128:../Sources/TFC/TFC_UART.c ****             temp = baud_rate - calculated_baud;
 481              		.loc 1 128 0
 482 0118 7A69     		ldr	r2, [r7, #20]
 483 011a FB69     		ldr	r3, [r7, #28]
 484 011c D31A     		sub	r3, r2, r3
 485 011e 3B62     		str	r3, [r7, #32]
 486              	.L22:
 129:../Sources/TFC/TFC_UART.c ****         
 130:../Sources/TFC/TFC_UART.c ****         if (temp <= baud_diff)
 487              		.loc 1 130 0
 488 0120 3A6A     		ldr	r2, [r7, #32]
 489 0122 BB6A     		ldr	r3, [r7, #40]
 490 0124 9A42     		cmp	r2, r3
 491 0126 05D8     		bhi	.L23
 131:../Sources/TFC/TFC_UART.c ****         {
 132:../Sources/TFC/TFC_UART.c ****             baud_diff = temp;
 492              		.loc 1 132 0
 493 0128 3B6A     		ldr	r3, [r7, #32]
 494 012a BB62     		str	r3, [r7, #40]
 133:../Sources/TFC/TFC_UART.c ****             osr_val = i; 
 495              		.loc 1 133 0
 496 012c 3B1C     		mov	r3, r7
 497 012e 2F33     		add	r3, r3, #47
 498 0130 1B78     		ldrb	r3, [r3]
 499 0132 7B62     		str	r3, [r7, #36]
 500              	.L23:
 120:../Sources/TFC/TFC_UART.c ****     for (i = 5; i <= 32; i++)
 501              		.loc 1 120 0
 502 0134 3B1C     		mov	r3, r7
 503 0136 2F33     		add	r3, r3, #47
 504 0138 3A1C     		mov	r2, r7
 505 013a 2F32     		add	r2, r2, #47
 506 013c 1278     		ldrb	r2, [r2]
 507 013e 0132     		add	r2, r2, #1
 508 0140 1A70     		strb	r2, [r3]
 509              	.L20:
 120:../Sources/TFC/TFC_UART.c ****     for (i = 5; i <= 32; i++)
 510              		.loc 1 120 0 is_stmt 0
 511 0142 3B1C     		mov	r3, r7
 512 0144 2F33     		add	r3, r3, #47
 513 0146 1B78     		ldrb	r3, [r3]
 514 0148 202B     		cmp	r3, #32
 515 014a C6D9     		bls	.L24
 134:../Sources/TFC/TFC_UART.c ****         }
 135:../Sources/TFC/TFC_UART.c ****     }
 136:../Sources/TFC/TFC_UART.c ****     
 137:../Sources/TFC/TFC_UART.c ****     if (baud_diff < ((baud_rate / 100) * 3))
 516              		.loc 1 137 0 is_stmt 1
 517 014c 7B69     		ldr	r3, [r7, #20]
 518 014e 181C     		mov	r0, r3
 519 0150 6421     		mov	r1, #100
 520 0152 FFF7FEFF 		bl	__aeabi_uidiv
 521 0156 031C     		mov	r3, r0
 522 0158 1A1C     		mov	r2, r3
 523 015a 131C     		mov	r3, r2
 524 015c 5B00     		lsl	r3, r3, #1
 525 015e 9A18     		add	r2, r3, r2
 526 0160 BB6A     		ldr	r3, [r7, #40]
 527 0162 9A42     		cmp	r2, r3
 528 0164 52D9     		bls	.L14
 138:../Sources/TFC/TFC_UART.c ****     {
 139:../Sources/TFC/TFC_UART.c ****         // If the OSR is between 4x and 8x then both
 140:../Sources/TFC/TFC_UART.c ****         // edge sampling MUST be turned on.  
 141:../Sources/TFC/TFC_UART.c ****         if ((osr_val >3) && (osr_val < 9))
 529              		.loc 1 141 0
 530 0166 7B6A     		ldr	r3, [r7, #36]
 531 0168 032B     		cmp	r3, #3
 532 016a 0AD9     		bls	.L26
 533              		.loc 1 141 0 is_stmt 0
 534 016c 7B6A     		ldr	r3, [r7, #36]
 535 016e 082B     		cmp	r3, #8
 536 0170 07D8     		bhi	.L26
 142:../Sources/TFC/TFC_UART.c ****             UART0_C5|= UART0_C5_BOTHEDGE_MASK;
 537              		.loc 1 142 0 is_stmt 1
 538 0172 2A4B     		ldr	r3, .L27+8
 539 0174 294A     		ldr	r2, .L27+8
 540 0176 D27A     		ldrb	r2, [r2, #11]
 541 0178 D2B2     		uxtb	r2, r2
 542 017a 0221     		mov	r1, #2
 543 017c 0A43     		orr	r2, r1
 544 017e D2B2     		uxtb	r2, r2
 545 0180 DA72     		strb	r2, [r3, #11]
 546              	.L26:
 143:../Sources/TFC/TFC_UART.c ****         
 144:../Sources/TFC/TFC_UART.c ****         // Setup OSR value 
 145:../Sources/TFC/TFC_UART.c ****         reg_temp = UART0_C4;
 547              		.loc 1 145 0
 548 0182 264B     		ldr	r3, .L27+8
 549 0184 9B7A     		ldrb	r3, [r3, #10]
 550 0186 DBB2     		uxtb	r3, r3
 551 0188 BB61     		str	r3, [r7, #24]
 146:../Sources/TFC/TFC_UART.c ****         reg_temp &= ~UART0_C4_OSR_MASK;
 552              		.loc 1 146 0
 553 018a BB69     		ldr	r3, [r7, #24]
 554 018c 1F22     		mov	r2, #31
 555 018e 9343     		bic	r3, r2
 556 0190 BB61     		str	r3, [r7, #24]
 147:../Sources/TFC/TFC_UART.c ****         reg_temp |= UART0_C4_OSR(osr_val-1);
 557              		.loc 1 147 0
 558 0192 7B6A     		ldr	r3, [r7, #36]
 559 0194 DBB2     		uxtb	r3, r3
 560 0196 013B     		sub	r3, r3, #1
 561 0198 DBB2     		uxtb	r3, r3
 562 019a 1A1C     		mov	r2, r3
 563 019c 1F23     		mov	r3, #31
 564 019e 1340     		and	r3, r2
 565 01a0 BA69     		ldr	r2, [r7, #24]
 566 01a2 1343     		orr	r3, r2
 567 01a4 BB61     		str	r3, [r7, #24]
 148:../Sources/TFC/TFC_UART.c ****     
 149:../Sources/TFC/TFC_UART.c ****         // Write reg_temp to C4 register
 150:../Sources/TFC/TFC_UART.c ****         UART0_C4 = reg_temp;
 568              		.loc 1 150 0
 569 01a6 1D4B     		ldr	r3, .L27+8
 570 01a8 BA69     		ldr	r2, [r7, #24]
 571 01aa D2B2     		uxtb	r2, r2
 572 01ac 9A72     		strb	r2, [r3, #10]
 151:../Sources/TFC/TFC_UART.c ****         
 152:../Sources/TFC/TFC_UART.c ****         reg_temp = (reg_temp & UART0_C4_OSR_MASK) + 1;
 573              		.loc 1 152 0
 574 01ae BA69     		ldr	r2, [r7, #24]
 575 01b0 1F23     		mov	r3, #31
 576 01b2 1340     		and	r3, r2
 577 01b4 0133     		add	r3, r3, #1
 578 01b6 BB61     		str	r3, [r7, #24]
 153:../Sources/TFC/TFC_UART.c ****         sbr_val = (uint32)((uart0clk)/(baud_rate * (reg_temp)));
 579              		.loc 1 153 0
 580 01b8 7B69     		ldr	r3, [r7, #20]
 581 01ba BA69     		ldr	r2, [r7, #24]
 582 01bc 5343     		mul	r3, r2
 583 01be 3869     		ldr	r0, [r7, #16]
 584 01c0 191C     		mov	r1, r3
 585 01c2 FFF7FEFF 		bl	__aeabi_uidiv
 586 01c6 031C     		mov	r3, r0
 587 01c8 FB60     		str	r3, [r7, #12]
 154:../Sources/TFC/TFC_UART.c ****         
 155:../Sources/TFC/TFC_UART.c ****          /* Save off the current value of the uartx_BDH except for the SBR field */
 156:../Sources/TFC/TFC_UART.c ****         reg_temp = UART0_BDH & ~(UART0_BDH_SBR(0x1F));
 588              		.loc 1 156 0
 589 01ca 144B     		ldr	r3, .L27+8
 590 01cc 1B78     		ldrb	r3, [r3]
 591 01ce DBB2     		uxtb	r3, r3
 592 01d0 1F22     		mov	r2, #31
 593 01d2 9343     		bic	r3, r2
 594 01d4 BB61     		str	r3, [r7, #24]
 157:../Sources/TFC/TFC_UART.c ****    
 158:../Sources/TFC/TFC_UART.c ****         UART0_BDH = reg_temp |  UART0_BDH_SBR(((sbr_val & 0x1F00) >> 8));
 595              		.loc 1 158 0
 596 01d6 114B     		ldr	r3, .L27+8
 597 01d8 F968     		ldr	r1, [r7, #12]
 598 01da F822     		mov	r2, #248
 599 01dc 5201     		lsl	r2, r2, #5
 600 01de 0A40     		and	r2, r1
 601 01e0 120A     		lsr	r2, r2, #8
 602 01e2 D1B2     		uxtb	r1, r2
 603 01e4 1F22     		mov	r2, #31
 604 01e6 0A40     		and	r2, r1
 605 01e8 D1B2     		uxtb	r1, r2
 606 01ea BA69     		ldr	r2, [r7, #24]
 607 01ec D2B2     		uxtb	r2, r2
 608 01ee 0A43     		orr	r2, r1
 609 01f0 D2B2     		uxtb	r2, r2
 610 01f2 1A70     		strb	r2, [r3]
 159:../Sources/TFC/TFC_UART.c ****         UART0_BDL = (uint8)(sbr_val & UART0_BDL_SBR_MASK);
 611              		.loc 1 159 0
 612 01f4 094B     		ldr	r3, .L27+8
 613 01f6 FA68     		ldr	r2, [r7, #12]
 614 01f8 D2B2     		uxtb	r2, r2
 615 01fa 5A70     		strb	r2, [r3, #1]
 160:../Sources/TFC/TFC_UART.c ****         
 161:../Sources/TFC/TFC_UART.c ****         /* Enable receiver and transmitter */
 162:../Sources/TFC/TFC_UART.c ****         UART0_C2 |= (UART0_C2_TE_MASK
 616              		.loc 1 162 0
 617 01fc 074B     		ldr	r3, .L27+8
 618 01fe 074A     		ldr	r2, .L27+8
 619 0200 D278     		ldrb	r2, [r2, #3]
 620 0202 D2B2     		uxtb	r2, r2
 621 0204 0C21     		mov	r1, #12
 622 0206 0A43     		orr	r2, r1
 623 0208 D2B2     		uxtb	r2, r2
 624 020a DA70     		strb	r2, [r3, #3]
 625              	.L14:
 163:../Sources/TFC/TFC_UART.c ****                     | UART0_C2_RE_MASK );
 164:../Sources/TFC/TFC_UART.c ****     }
 165:../Sources/TFC/TFC_UART.c ****     else
 166:../Sources/TFC/TFC_UART.c **** 		{
 167:../Sources/TFC/TFC_UART.c ****         // Unacceptable baud rate difference
 168:../Sources/TFC/TFC_UART.c ****         // More than 3% difference!!
 169:../Sources/TFC/TFC_UART.c ****         // Enter infinite loop!
 170:../Sources/TFC/TFC_UART.c ****         //while(1)
 171:../Sources/TFC/TFC_UART.c **** 			//	{}
 172:../Sources/TFC/TFC_UART.c **** 		}					
 173:../Sources/TFC/TFC_UART.c ****     
 174:../Sources/TFC/TFC_UART.c **** }
 626              		.loc 1 174 0
 627 020c BD46     		mov	sp, r7
 628 020e 0CB0     		add	sp, sp, #48
 629              		@ sp needed for prologue
 630 0210 80BD     		pop	{r7, pc}
 631              	.L28:
 632 0212 C046     		.align	2
 633              	.L27:
 634 0214 00700440 		.word	1074032640
 635 0218 34100000 		.word	4148
 636 021c 00A00640 		.word	1074176000
 637 0220 50C30000 		.word	50000
 638 0224 04100000 		.word	4100
 639 0228 FFFFFFF3 		.word	-201326593
 640              		.cfi_endproc
 641              	.LFE3:
 643              		.section	.text.uart_getchar,"ax",%progbits
 644              		.align	2
 645              		.global	uart_getchar
 646              		.code	16
 647              		.thumb_func
 649              	uart_getchar:
 650              	.LFB4:
 175:../Sources/TFC/TFC_UART.c **** 
 176:../Sources/TFC/TFC_UART.c **** /********************************************************************/
 177:../Sources/TFC/TFC_UART.c **** /*
 178:../Sources/TFC/TFC_UART.c ****  * Wait for a character to be received on the specified uart
 179:../Sources/TFC/TFC_UART.c ****  *
 180:../Sources/TFC/TFC_UART.c ****  * Parameters:
 181:../Sources/TFC/TFC_UART.c ****  *  channel      uart channel to read from
 182:../Sources/TFC/TFC_UART.c ****  *
 183:../Sources/TFC/TFC_UART.c ****  * Return Values:
 184:../Sources/TFC/TFC_UART.c ****  *  the received character
 185:../Sources/TFC/TFC_UART.c ****  */
 186:../Sources/TFC/TFC_UART.c **** char uart_getchar (UART_MemMapPtr channel)
 187:../Sources/TFC/TFC_UART.c **** {
 651              		.loc 1 187 0
 652              		.cfi_startproc
 653 0000 80B5     		push	{r7, lr}
 654              	.LCFI10:
 655              		.cfi_def_cfa_offset 8
 656              		.cfi_offset 7, -8
 657              		.cfi_offset 14, -4
 658 0002 82B0     		sub	sp, sp, #8
 659              	.LCFI11:
 660              		.cfi_def_cfa_offset 16
 661 0004 00AF     		add	r7, sp, #0
 662              	.LCFI12:
 663              		.cfi_def_cfa_register 7
 664 0006 7860     		str	r0, [r7, #4]
 188:../Sources/TFC/TFC_UART.c ****       /* Wait until character has been received */
 189:../Sources/TFC/TFC_UART.c ****       while (!(UART_S1_REG(channel) & UART_S1_RDRF_MASK));
 665              		.loc 1 189 0
 666 0008 C046     		mov	r8, r8
 667              	.L30:
 668              		.loc 1 189 0 is_stmt 0
 669 000a 7B68     		ldr	r3, [r7, #4]
 670 000c 1B79     		ldrb	r3, [r3, #4]
 671 000e DBB2     		uxtb	r3, r3
 672 0010 1A1C     		mov	r2, r3
 673 0012 2023     		mov	r3, #32
 674 0014 1340     		and	r3, r2
 675 0016 F8D0     		beq	.L30
 190:../Sources/TFC/TFC_UART.c ****     
 191:../Sources/TFC/TFC_UART.c ****       /* Return the 8-bit data from the receiver */
 192:../Sources/TFC/TFC_UART.c ****       return UART_D_REG(channel);
 676              		.loc 1 192 0 is_stmt 1
 677 0018 7B68     		ldr	r3, [r7, #4]
 678 001a DB79     		ldrb	r3, [r3, #7]
 679 001c DBB2     		uxtb	r3, r3
 193:../Sources/TFC/TFC_UART.c **** }
 680              		.loc 1 193 0
 681 001e 181C     		mov	r0, r3
 682 0020 BD46     		mov	sp, r7
 683 0022 02B0     		add	sp, sp, #8
 684              		@ sp needed for prologue
 685 0024 80BD     		pop	{r7, pc}
 686              		.cfi_endproc
 687              	.LFE4:
 689 0026 C046     		.section	.text.uart_putchar,"ax",%progbits
 690              		.align	2
 691              		.global	uart_putchar
 692              		.code	16
 693              		.thumb_func
 695              	uart_putchar:
 696              	.LFB5:
 194:../Sources/TFC/TFC_UART.c **** /********************************************************************/
 195:../Sources/TFC/TFC_UART.c **** /*
 196:../Sources/TFC/TFC_UART.c ****  * Wait for space in the uart Tx FIFO and then send a character
 197:../Sources/TFC/TFC_UART.c ****  *
 198:../Sources/TFC/TFC_UART.c ****  * Parameters:
 199:../Sources/TFC/TFC_UART.c ****  *  channel      uart channel to send to
 200:../Sources/TFC/TFC_UART.c ****  *  ch			 character to send
 201:../Sources/TFC/TFC_UART.c ****  */ 
 202:../Sources/TFC/TFC_UART.c **** void uart_putchar (UART_MemMapPtr channel, char ch)
 203:../Sources/TFC/TFC_UART.c **** {
 697              		.loc 1 203 0
 698              		.cfi_startproc
 699 0000 80B5     		push	{r7, lr}
 700              	.LCFI13:
 701              		.cfi_def_cfa_offset 8
 702              		.cfi_offset 7, -8
 703              		.cfi_offset 14, -4
 704 0002 82B0     		sub	sp, sp, #8
 705              	.LCFI14:
 706              		.cfi_def_cfa_offset 16
 707 0004 00AF     		add	r7, sp, #0
 708              	.LCFI15:
 709              		.cfi_def_cfa_register 7
 710 0006 7860     		str	r0, [r7, #4]
 711 0008 0A1C     		mov	r2, r1
 712 000a FB1C     		add	r3, r7, #3
 713 000c 1A70     		strb	r2, [r3]
 204:../Sources/TFC/TFC_UART.c ****       /* Wait until space is available in the FIFO */
 205:../Sources/TFC/TFC_UART.c ****       while(!(UART_S1_REG(channel) & UART_S1_TDRE_MASK));
 714              		.loc 1 205 0
 715 000e C046     		mov	r8, r8
 716              	.L33:
 717              		.loc 1 205 0 is_stmt 0
 718 0010 7B68     		ldr	r3, [r7, #4]
 719 0012 1B79     		ldrb	r3, [r3, #4]
 720 0014 DBB2     		uxtb	r3, r3
 721 0016 DBB2     		uxtb	r3, r3
 722 0018 5BB2     		sxtb	r3, r3
 723 001a 002B     		cmp	r3, #0
 724 001c F8DA     		bge	.L33
 206:../Sources/TFC/TFC_UART.c ****     
 207:../Sources/TFC/TFC_UART.c ****       /* Send the character */
 208:../Sources/TFC/TFC_UART.c ****       UART_D_REG(channel) = (uint8)ch;
 725              		.loc 1 208 0 is_stmt 1
 726 001e 7B68     		ldr	r3, [r7, #4]
 727 0020 FA1C     		add	r2, r7, #3
 728 0022 1278     		ldrb	r2, [r2]
 729 0024 DA71     		strb	r2, [r3, #7]
 209:../Sources/TFC/TFC_UART.c ****     
 210:../Sources/TFC/TFC_UART.c ****  }
 730              		.loc 1 210 0
 731 0026 BD46     		mov	sp, r7
 732 0028 02B0     		add	sp, sp, #8
 733              		@ sp needed for prologue
 734 002a 80BD     		pop	{r7, pc}
 735              		.cfi_endproc
 736              	.LFE5:
 738              		.section	.text.uart_getchar_present,"ax",%progbits
 739              		.align	2
 740              		.global	uart_getchar_present
 741              		.code	16
 742              		.thumb_func
 744              	uart_getchar_present:
 745              	.LFB6:
 211:../Sources/TFC/TFC_UART.c **** /********************************************************************/
 212:../Sources/TFC/TFC_UART.c **** /*
 213:../Sources/TFC/TFC_UART.c ****  * Check to see if a character has been received
 214:../Sources/TFC/TFC_UART.c ****  *
 215:../Sources/TFC/TFC_UART.c ****  * Parameters:
 216:../Sources/TFC/TFC_UART.c ****  *  channel      uart channel to check for a character
 217:../Sources/TFC/TFC_UART.c ****  *
 218:../Sources/TFC/TFC_UART.c ****  * Return values:
 219:../Sources/TFC/TFC_UART.c ****  *  0       No character received
 220:../Sources/TFC/TFC_UART.c ****  *  1       Character has been received
 221:../Sources/TFC/TFC_UART.c ****  */
 222:../Sources/TFC/TFC_UART.c **** int uart_getchar_present (UART_MemMapPtr channel)
 223:../Sources/TFC/TFC_UART.c **** {
 746              		.loc 1 223 0
 747              		.cfi_startproc
 748 0000 80B5     		push	{r7, lr}
 749              	.LCFI16:
 750              		.cfi_def_cfa_offset 8
 751              		.cfi_offset 7, -8
 752              		.cfi_offset 14, -4
 753 0002 82B0     		sub	sp, sp, #8
 754              	.LCFI17:
 755              		.cfi_def_cfa_offset 16
 756 0004 00AF     		add	r7, sp, #0
 757              	.LCFI18:
 758              		.cfi_def_cfa_register 7
 759 0006 7860     		str	r0, [r7, #4]
 224:../Sources/TFC/TFC_UART.c ****     return (UART_S1_REG(channel) & UART_S1_RDRF_MASK);
 760              		.loc 1 224 0
 761 0008 7B68     		ldr	r3, [r7, #4]
 762 000a 1B79     		ldrb	r3, [r3, #4]
 763 000c DBB2     		uxtb	r3, r3
 764 000e 1A1C     		mov	r2, r3
 765 0010 2023     		mov	r3, #32
 766 0012 1340     		and	r3, r2
 225:../Sources/TFC/TFC_UART.c **** }
 767              		.loc 1 225 0
 768 0014 181C     		mov	r0, r3
 769 0016 BD46     		mov	sp, r7
 770 0018 02B0     		add	sp, sp, #8
 771              		@ sp needed for prologue
 772 001a 80BD     		pop	{r7, pc}
 773              		.cfi_endproc
 774              	.LFE6:
 776              		.text
 777              	.Letext0:
 778              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 779              		.file 3 "C:/Users/Jared/Desktop/freescalecup/FRDM-TFC/Project_Headers/MKL25Z4.h"
 780              		.file 4 "C:/Users/Jared/Desktop/freescalecup/FRDM-TFC/Project_Headers/TFC\\TFC_arm_cm0.h"
 781              		.file 5 "C:/Users/Jared/Desktop/freescalecup/FRDM-TFC/Project_Headers/TFC\\TFC_Queue.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TFC_UART.c
                            *COM*:0000000c SDA_SERIAL_OUTGOING_QUEUE
                            *COM*:0000000c SDA_SERIAL_INCOMING_QUEUE
                            *COM*:00000800 SDA_SERIAL_OUTGOING_QUEUE_Storage
                            *COM*:00000080 SDA_SERIAL_INCOMING_QUEUE_Storage
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:22     .text.TFC_InitUARTs:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:27     .text.TFC_InitUARTs:00000000 TFC_InitUARTs
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:298    .text.uart0_init:00000000 uart0_init
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:131    .text.TFC_InitUARTs:000000a4 $d
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:146    .text.TFC_UART_Process:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:151    .text.TFC_UART_Process:00000000 TFC_UART_Process
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:196    .text.TFC_UART_Process:00000038 $d
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:202    .text.UART0_IRQHandler:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:207    .text.UART0_IRQHandler:00000000 UART0_IRQHandler
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:285    .text.UART0_IRQHandler:0000006c $d
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:293    .text.uart0_init:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:634    .text.uart0_init:00000214 $d
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:644    .text.uart_getchar:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:649    .text.uart_getchar:00000000 uart_getchar
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:690    .text.uart_putchar:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:695    .text.uart_putchar:00000000 uart_putchar
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:739    .text.uart_getchar_present:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cc8EHaeb.s:744    .text.uart_getchar_present:00000000 uart_getchar_present
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
InitByteQueue
enable_irq
BytesInQueue
ByteEnqueue
ByteDequeue
__aeabi_uidiv
