   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TFC_arm_cm0.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.stop,"ax",%progbits
  18              		.align	2
  19              		.global	stop
  20              		.code	16
  21              		.thumb_func
  23              	stop:
  24              	.LFB0:
  25              		.file 1 "../Sources/TFC/TFC_arm_cm0.c"
   1:../Sources/TFC/TFC_arm_cm0.c **** #include "derivative.h"
   2:../Sources/TFC/TFC_arm_cm0.c **** #include "TFC\TFC_arm_cm0.h"
   3:../Sources/TFC/TFC_arm_cm0.c **** 
   4:../Sources/TFC/TFC_arm_cm0.c **** void stop (void)
   5:../Sources/TFC/TFC_arm_cm0.c **** {
  26              		.loc 1 5 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 00AF     		add	r7, sp, #0
  34              	.LCFI1:
  35              		.cfi_def_cfa_register 7
   6:../Sources/TFC/TFC_arm_cm0.c **** 	/* Set the SLEEPDEEP bit to enable deep sleep mode (STOP) */
   7:../Sources/TFC/TFC_arm_cm0.c **** 	SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;	
  36              		.loc 1 7 0
  37 0004 064A     		ldr	r2, .L2
  38 0006 0649     		ldr	r1, .L2
  39 0008 D123     		mov	r3, #209
  40 000a 1B01     		lsl	r3, r3, #4
  41 000c CB58     		ldr	r3, [r1, r3]
  42 000e 0421     		mov	r1, #4
  43 0010 1943     		orr	r1, r3
  44 0012 D123     		mov	r3, #209
  45 0014 1B01     		lsl	r3, r3, #4
  46 0016 D150     		str	r1, [r2, r3]
   8:../Sources/TFC/TFC_arm_cm0.c **** 
   9:../Sources/TFC/TFC_arm_cm0.c **** 	/* WFI instruction will start entry into STOP mode */
  10:../Sources/TFC/TFC_arm_cm0.c **** #ifndef KEIL
  11:../Sources/TFC/TFC_arm_cm0.c ****         // If not using KEIL's uVision use the standard assembly command
  12:../Sources/TFC/TFC_arm_cm0.c **** 	asm("WFI");
  47              		.loc 1 12 0
  48              	@ 12 "../Sources/TFC/TFC_arm_cm0.c" 1
  49 0018 30BF     		WFI
  50              	@ 0 "" 2
  13:../Sources/TFC/TFC_arm_cm0.c **** #else
  14:../Sources/TFC/TFC_arm_cm0.c ****         // If using KEIL's uVision, use the CMSIS intrinsic
  15:../Sources/TFC/TFC_arm_cm0.c **** 	__wfi();
  16:../Sources/TFC/TFC_arm_cm0.c **** #endif
  17:../Sources/TFC/TFC_arm_cm0.c **** }
  51              		.loc 1 17 0
  52              		.code	16
  53 001a BD46     		mov	sp, r7
  54              		@ sp needed for prologue
  55 001c 80BD     		pop	{r7, pc}
  56              	.L3:
  57 001e C046     		.align	2
  58              	.L2:
  59 0020 00E000E0 		.word	-536813568
  60              		.cfi_endproc
  61              	.LFE0:
  63              		.section	.text.wait,"ax",%progbits
  64              		.align	2
  65              		.global	wait
  66              		.code	16
  67              		.thumb_func
  69              	wait:
  70              	.LFB1:
  18:../Sources/TFC/TFC_arm_cm0.c **** /***********************************************************************/
  19:../Sources/TFC/TFC_arm_cm0.c **** /*
  20:../Sources/TFC/TFC_arm_cm0.c ****  * Configures the ARM system control register for WAIT (sleep) mode
  21:../Sources/TFC/TFC_arm_cm0.c ****  * and then executes the WFI instruction to enter the mode.
  22:../Sources/TFC/TFC_arm_cm0.c ****  *
  23:../Sources/TFC/TFC_arm_cm0.c ****  * Parameters:
  24:../Sources/TFC/TFC_arm_cm0.c ****  * none
  25:../Sources/TFC/TFC_arm_cm0.c ****  *
  26:../Sources/TFC/TFC_arm_cm0.c ****  * Note: Might want to change this later to allow for passing in a parameter
  27:../Sources/TFC/TFC_arm_cm0.c ****  *       to optionally set the sleep on exit bit.
  28:../Sources/TFC/TFC_arm_cm0.c ****  */
  29:../Sources/TFC/TFC_arm_cm0.c **** 
  30:../Sources/TFC/TFC_arm_cm0.c **** void wait (void)
  31:../Sources/TFC/TFC_arm_cm0.c **** {
  71              		.loc 1 31 0
  72              		.cfi_startproc
  73 0000 80B5     		push	{r7, lr}
  74              	.LCFI2:
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 7, -8
  77              		.cfi_offset 14, -4
  78 0002 00AF     		add	r7, sp, #0
  79              	.LCFI3:
  80              		.cfi_def_cfa_register 7
  32:../Sources/TFC/TFC_arm_cm0.c **** 	/* Clear the SLEEPDEEP bit to make sure we go into WAIT (sleep) mode instead
  33:../Sources/TFC/TFC_arm_cm0.c **** 	 * of deep sleep.
  34:../Sources/TFC/TFC_arm_cm0.c **** 	 */
  35:../Sources/TFC/TFC_arm_cm0.c **** 	SCB_SCR &= ~SCB_SCR_SLEEPDEEP_MASK;	
  81              		.loc 1 35 0
  82 0004 074A     		ldr	r2, .L5
  83 0006 0749     		ldr	r1, .L5
  84 0008 D123     		mov	r3, #209
  85 000a 1B01     		lsl	r3, r3, #4
  86 000c CB58     		ldr	r3, [r1, r3]
  87 000e 0421     		mov	r1, #4
  88 0010 181C     		mov	r0, r3
  89 0012 8843     		bic	r0, r1
  90 0014 011C     		mov	r1, r0
  91 0016 D123     		mov	r3, #209
  92 0018 1B01     		lsl	r3, r3, #4
  93 001a D150     		str	r1, [r2, r3]
  36:../Sources/TFC/TFC_arm_cm0.c **** 
  37:../Sources/TFC/TFC_arm_cm0.c **** 	/* WFI instruction will start entry into WAIT mode */
  38:../Sources/TFC/TFC_arm_cm0.c **** #ifndef KEIL
  39:../Sources/TFC/TFC_arm_cm0.c ****         // If not using KEIL's uVision use the standard assembly command
  40:../Sources/TFC/TFC_arm_cm0.c **** 	asm("WFI");
  94              		.loc 1 40 0
  95              	@ 40 "../Sources/TFC/TFC_arm_cm0.c" 1
  96 001c 30BF     		WFI
  97              	@ 0 "" 2
  41:../Sources/TFC/TFC_arm_cm0.c **** #else
  42:../Sources/TFC/TFC_arm_cm0.c ****         // If using KEIL's uVision, use the CMSIS intrinsic
  43:../Sources/TFC/TFC_arm_cm0.c ****     __wfi();
  44:../Sources/TFC/TFC_arm_cm0.c **** #endif
  45:../Sources/TFC/TFC_arm_cm0.c **** }
  98              		.loc 1 45 0
  99              		.code	16
 100 001e BD46     		mov	sp, r7
 101              		@ sp needed for prologue
 102 0020 80BD     		pop	{r7, pc}
 103              	.L6:
 104 0022 C046     		.align	2
 105              	.L5:
 106 0024 00E000E0 		.word	-536813568
 107              		.cfi_endproc
 108              	.LFE1:
 110              		.section	.text.write_vtor,"ax",%progbits
 111              		.align	2
 112              		.global	write_vtor
 113              		.code	16
 114              		.thumb_func
 116              	write_vtor:
 117              	.LFB2:
  46:../Sources/TFC/TFC_arm_cm0.c **** /***********************************************************************/
  47:../Sources/TFC/TFC_arm_cm0.c **** /*
  48:../Sources/TFC/TFC_arm_cm0.c ****  * Change the value of the vector table offset register to the specified value.
  49:../Sources/TFC/TFC_arm_cm0.c ****  *
  50:../Sources/TFC/TFC_arm_cm0.c ****  * Parameters:
  51:../Sources/TFC/TFC_arm_cm0.c ****  * vtor     new value to write to the VTOR
  52:../Sources/TFC/TFC_arm_cm0.c ****  */
  53:../Sources/TFC/TFC_arm_cm0.c **** 
  54:../Sources/TFC/TFC_arm_cm0.c **** void write_vtor (int vtor)
  55:../Sources/TFC/TFC_arm_cm0.c **** {
 118              		.loc 1 55 0
 119              		.cfi_startproc
 120 0000 80B5     		push	{r7, lr}
 121              	.LCFI4:
 122              		.cfi_def_cfa_offset 8
 123              		.cfi_offset 7, -8
 124              		.cfi_offset 14, -4
 125 0002 82B0     		sub	sp, sp, #8
 126              	.LCFI5:
 127              		.cfi_def_cfa_offset 16
 128 0004 00AF     		add	r7, sp, #0
 129              	.LCFI6:
 130              		.cfi_def_cfa_register 7
 131 0006 7860     		str	r0, [r7, #4]
  56:../Sources/TFC/TFC_arm_cm0.c ****         /* Write the VTOR with the new value */
  57:../Sources/TFC/TFC_arm_cm0.c ****         SCB_VTOR = vtor;	
 132              		.loc 1 57 0
 133 0008 034A     		ldr	r2, .L8
 134 000a 7968     		ldr	r1, [r7, #4]
 135 000c 034B     		ldr	r3, .L8+4
 136 000e D150     		str	r1, [r2, r3]
  58:../Sources/TFC/TFC_arm_cm0.c **** }
 137              		.loc 1 58 0
 138 0010 BD46     		mov	sp, r7
 139 0012 02B0     		add	sp, sp, #8
 140              		@ sp needed for prologue
 141 0014 80BD     		pop	{r7, pc}
 142              	.L9:
 143 0016 C046     		.align	2
 144              	.L8:
 145 0018 00E000E0 		.word	-536813568
 146 001c 080D0000 		.word	3336
 147              		.cfi_endproc
 148              	.LFE2:
 150              		.section	.text.enable_irq,"ax",%progbits
 151              		.align	2
 152              		.global	enable_irq
 153              		.code	16
 154              		.thumb_func
 156              	enable_irq:
 157              	.LFB3:
  59:../Sources/TFC/TFC_arm_cm0.c **** /***********************************************************************/
  60:../Sources/TFC/TFC_arm_cm0.c **** /*
  61:../Sources/TFC/TFC_arm_cm0.c ****  * Initialize the NVIC to enable the specified IRQ.
  62:../Sources/TFC/TFC_arm_cm0.c ****  * 
  63:../Sources/TFC/TFC_arm_cm0.c ****  * NOTE: The function only initializes the NVIC to enable a single IRQ. 
  64:../Sources/TFC/TFC_arm_cm0.c ****  * Interrupts will also need to be enabled in the ARM core. This can be 
  65:../Sources/TFC/TFC_arm_cm0.c ****  * done using the EnableInterrupts macro.
  66:../Sources/TFC/TFC_arm_cm0.c ****  *
  67:../Sources/TFC/TFC_arm_cm0.c ****  * Parameters:
  68:../Sources/TFC/TFC_arm_cm0.c ****  * irq    irq number to be enabled (the irq number NOT the vector number)
  69:../Sources/TFC/TFC_arm_cm0.c ****  */
  70:../Sources/TFC/TFC_arm_cm0.c **** 
  71:../Sources/TFC/TFC_arm_cm0.c **** #ifndef CMSIS
  72:../Sources/TFC/TFC_arm_cm0.c **** void enable_irq (int irq)
  73:../Sources/TFC/TFC_arm_cm0.c **** {   
 158              		.loc 1 73 0
 159              		.cfi_startproc
 160 0000 90B5     		push	{r4, r7, lr}
 161              	.LCFI7:
 162              		.cfi_def_cfa_offset 12
 163              		.cfi_offset 4, -12
 164              		.cfi_offset 7, -8
 165              		.cfi_offset 14, -4
 166 0002 83B0     		sub	sp, sp, #12
 167              	.LCFI8:
 168              		.cfi_def_cfa_offset 24
 169 0004 00AF     		add	r7, sp, #0
 170              	.LCFI9:
 171              		.cfi_def_cfa_register 7
 172 0006 7860     		str	r0, [r7, #4]
  74:../Sources/TFC/TFC_arm_cm0.c ****     /* Make sure that the IRQ is an allowable number. Up to 32 is 
  75:../Sources/TFC/TFC_arm_cm0.c ****      * used.
  76:../Sources/TFC/TFC_arm_cm0.c ****      *
  77:../Sources/TFC/TFC_arm_cm0.c ****      * NOTE: If you are using the interrupt definitions from the header
  78:../Sources/TFC/TFC_arm_cm0.c ****      * file, you MUST SUBTRACT 16!!!
  79:../Sources/TFC/TFC_arm_cm0.c ****      */
  80:../Sources/TFC/TFC_arm_cm0.c ****     if (irq > 32)
 173              		.loc 1 80 0
 174 0008 7B68     		ldr	r3, [r7, #4]
 175 000a 202B     		cmp	r3, #32
 176 000c 27DC     		bgt	.L10
  81:../Sources/TFC/TFC_arm_cm0.c ****     {
  82:../Sources/TFC/TFC_arm_cm0.c ****         // printf("\nERR! Invalid IRQ value passed to enable irq function!\n");	
  83:../Sources/TFC/TFC_arm_cm0.c ****     }
  84:../Sources/TFC/TFC_arm_cm0.c ****     else
  85:../Sources/TFC/TFC_arm_cm0.c ****     {
  86:../Sources/TFC/TFC_arm_cm0.c ****       /* Set the ICPR and ISER registers accordingly */
  87:../Sources/TFC/TFC_arm_cm0.c ****       NVIC_ICPR |= 1 << (irq%32);
 177              		.loc 1 87 0
 178 000e 154A     		ldr	r2, .L14
 179 0010 1449     		ldr	r1, .L14
 180 0012 C023     		mov	r3, #192
 181 0014 5B00     		lsl	r3, r3, #1
 182 0016 C958     		ldr	r1, [r1, r3]
 183 0018 7868     		ldr	r0, [r7, #4]
 184 001a 134B     		ldr	r3, .L14+4
 185 001c 0340     		and	r3, r0
 186 001e 04D5     		bpl	.L12
 187 0020 013B     		sub	r3, r3, #1
 188 0022 2020     		mov	r0, #32
 189 0024 4042     		neg	r0, r0
 190 0026 0343     		orr	r3, r0
 191 0028 0133     		add	r3, r3, #1
 192              	.L12:
 193 002a 0120     		mov	r0, #1
 194 002c 041C     		mov	r4, r0
 195 002e 9C40     		lsl	r4, r4, r3
 196 0030 231C     		mov	r3, r4
 197 0032 1943     		orr	r1, r3
 198 0034 C023     		mov	r3, #192
 199 0036 5B00     		lsl	r3, r3, #1
 200 0038 D150     		str	r1, [r2, r3]
  88:../Sources/TFC/TFC_arm_cm0.c ****       NVIC_ISER |= 1 << (irq%32);
 201              		.loc 1 88 0
 202 003a 0A4A     		ldr	r2, .L14
 203 003c 094B     		ldr	r3, .L14
 204 003e 1968     		ldr	r1, [r3]
 205 0040 7868     		ldr	r0, [r7, #4]
 206 0042 094B     		ldr	r3, .L14+4
 207 0044 0340     		and	r3, r0
 208 0046 04D5     		bpl	.L13
 209 0048 013B     		sub	r3, r3, #1
 210 004a 2020     		mov	r0, #32
 211 004c 4042     		neg	r0, r0
 212 004e 0343     		orr	r3, r0
 213 0050 0133     		add	r3, r3, #1
 214              	.L13:
 215 0052 0120     		mov	r0, #1
 216 0054 041C     		mov	r4, r0
 217 0056 9C40     		lsl	r4, r4, r3
 218 0058 231C     		mov	r3, r4
 219 005a 0B43     		orr	r3, r1
 220 005c 1360     		str	r3, [r2]
 221              	.L10:
  89:../Sources/TFC/TFC_arm_cm0.c ****     }
  90:../Sources/TFC/TFC_arm_cm0.c **** }
 222              		.loc 1 90 0
 223 005e BD46     		mov	sp, r7
 224 0060 03B0     		add	sp, sp, #12
 225              		@ sp needed for prologue
 226 0062 90BD     		pop	{r4, r7, pc}
 227              	.L15:
 228              		.align	2
 229              	.L14:
 230 0064 00E100E0 		.word	-536813312
 231 0068 1F000080 		.word	-2147483617
 232              		.cfi_endproc
 233              	.LFE3:
 235              		.section	.text.disable_irq,"ax",%progbits
 236              		.align	2
 237              		.global	disable_irq
 238              		.code	16
 239              		.thumb_func
 241              	disable_irq:
 242              	.LFB4:
  91:../Sources/TFC/TFC_arm_cm0.c **** /***********************************************************************/
  92:../Sources/TFC/TFC_arm_cm0.c **** /*
  93:../Sources/TFC/TFC_arm_cm0.c ****  * Initialize the NVIC to disable the specified IRQ.
  94:../Sources/TFC/TFC_arm_cm0.c ****  * 
  95:../Sources/TFC/TFC_arm_cm0.c ****  * NOTE: The function only initializes the NVIC to disable a single IRQ. 
  96:../Sources/TFC/TFC_arm_cm0.c ****  * If you want to disable all interrupts, then use the DisableInterrupts
  97:../Sources/TFC/TFC_arm_cm0.c ****  * macro instead. 
  98:../Sources/TFC/TFC_arm_cm0.c ****  *
  99:../Sources/TFC/TFC_arm_cm0.c ****  * Parameters:
 100:../Sources/TFC/TFC_arm_cm0.c ****  * irq    irq number to be disabled (the irq number NOT the vector number)
 101:../Sources/TFC/TFC_arm_cm0.c ****  */
 102:../Sources/TFC/TFC_arm_cm0.c **** 
 103:../Sources/TFC/TFC_arm_cm0.c **** void disable_irq (int irq)
 104:../Sources/TFC/TFC_arm_cm0.c **** {
 243              		.loc 1 104 0
 244              		.cfi_startproc
 245 0000 80B5     		push	{r7, lr}
 246              	.LCFI10:
 247              		.cfi_def_cfa_offset 8
 248              		.cfi_offset 7, -8
 249              		.cfi_offset 14, -4
 250 0002 82B0     		sub	sp, sp, #8
 251              	.LCFI11:
 252              		.cfi_def_cfa_offset 16
 253 0004 00AF     		add	r7, sp, #0
 254              	.LCFI12:
 255              		.cfi_def_cfa_register 7
 256 0006 7860     		str	r0, [r7, #4]
 105:../Sources/TFC/TFC_arm_cm0.c ****     
 106:../Sources/TFC/TFC_arm_cm0.c ****     /* Make sure that the IRQ is an allowable number. Right now up to 32 is 
 107:../Sources/TFC/TFC_arm_cm0.c ****      * used.
 108:../Sources/TFC/TFC_arm_cm0.c ****      *
 109:../Sources/TFC/TFC_arm_cm0.c ****      * NOTE: If you are using the interrupt definitions from the header
 110:../Sources/TFC/TFC_arm_cm0.c ****      * file, you MUST SUBTRACT 16!!!
 111:../Sources/TFC/TFC_arm_cm0.c ****      */
 112:../Sources/TFC/TFC_arm_cm0.c ****     if (irq > 32)
 257              		.loc 1 112 0
 258 0008 7B68     		ldr	r3, [r7, #4]
 259 000a 202B     		cmp	r3, #32
 260 000c 10DC     		bgt	.L16
 113:../Sources/TFC/TFC_arm_cm0.c ****     {
 114:../Sources/TFC/TFC_arm_cm0.c ****     	   // printf("\nERR! Invalid IRQ value passed to disable irq function!\n");
 115:../Sources/TFC/TFC_arm_cm0.c ****     }
 116:../Sources/TFC/TFC_arm_cm0.c ****     else
 117:../Sources/TFC/TFC_arm_cm0.c ****       /* Set the ICER register accordingly */
 118:../Sources/TFC/TFC_arm_cm0.c ****       NVIC_ICER = 1 << (irq%32);
 261              		.loc 1 118 0
 262 000e 0A4A     		ldr	r2, .L19
 263 0010 7968     		ldr	r1, [r7, #4]
 264 0012 0A4B     		ldr	r3, .L19+4
 265 0014 0B40     		and	r3, r1
 266 0016 04D5     		bpl	.L18
 267 0018 013B     		sub	r3, r3, #1
 268 001a 2021     		mov	r1, #32
 269 001c 4942     		neg	r1, r1
 270 001e 0B43     		orr	r3, r1
 271 0020 0133     		add	r3, r3, #1
 272              	.L18:
 273 0022 0121     		mov	r1, #1
 274 0024 081C     		mov	r0, r1
 275 0026 9840     		lsl	r0, r0, r3
 276 0028 031C     		mov	r3, r0
 277 002a 191C     		mov	r1, r3
 278 002c 8023     		mov	r3, #128
 279 002e D150     		str	r1, [r2, r3]
 280              	.L16:
 119:../Sources/TFC/TFC_arm_cm0.c **** }
 281              		.loc 1 119 0
 282 0030 BD46     		mov	sp, r7
 283 0032 02B0     		add	sp, sp, #8
 284              		@ sp needed for prologue
 285 0034 80BD     		pop	{r7, pc}
 286              	.L20:
 287 0036 C046     		.align	2
 288              	.L19:
 289 0038 00E100E0 		.word	-536813312
 290 003c 1F000080 		.word	-2147483617
 291              		.cfi_endproc
 292              	.LFE4:
 294              		.section	.text.set_irq_priority,"ax",%progbits
 295              		.align	2
 296              		.global	set_irq_priority
 297              		.code	16
 298              		.thumb_func
 300              	set_irq_priority:
 301              	.LFB5:
 120:../Sources/TFC/TFC_arm_cm0.c **** /***********************************************************************/
 121:../Sources/TFC/TFC_arm_cm0.c **** /*
 122:../Sources/TFC/TFC_arm_cm0.c ****  * Initialize the NVIC to set specified IRQ priority.
 123:../Sources/TFC/TFC_arm_cm0.c ****  * 
 124:../Sources/TFC/TFC_arm_cm0.c ****  * NOTE: The function only initializes the NVIC to set a single IRQ priority. 
 125:../Sources/TFC/TFC_arm_cm0.c ****  * Interrupts will also need to be enabled in the ARM core. This can be 
 126:../Sources/TFC/TFC_arm_cm0.c ****  * done using the EnableInterrupts macro.
 127:../Sources/TFC/TFC_arm_cm0.c ****  *
 128:../Sources/TFC/TFC_arm_cm0.c ****  * Parameters:
 129:../Sources/TFC/TFC_arm_cm0.c ****  * irq    irq number to be enabled (the irq number NOT the vector number)
 130:../Sources/TFC/TFC_arm_cm0.c ****  * prio   irq priority. 0-3 levels. 0 max priority
 131:../Sources/TFC/TFC_arm_cm0.c ****  */
 132:../Sources/TFC/TFC_arm_cm0.c **** 
 133:../Sources/TFC/TFC_arm_cm0.c **** void set_irq_priority (int irq, int prio)
 134:../Sources/TFC/TFC_arm_cm0.c **** {   
 302              		.loc 1 134 0
 303              		.cfi_startproc
 304 0000 80B5     		push	{r7, lr}
 305              	.LCFI13:
 306              		.cfi_def_cfa_offset 8
 307              		.cfi_offset 7, -8
 308              		.cfi_offset 14, -4
 309 0002 84B0     		sub	sp, sp, #16
 310              	.LCFI14:
 311              		.cfi_def_cfa_offset 24
 312 0004 00AF     		add	r7, sp, #0
 313              	.LCFI15:
 314              		.cfi_def_cfa_register 7
 315 0006 7860     		str	r0, [r7, #4]
 316 0008 3960     		str	r1, [r7]
 135:../Sources/TFC/TFC_arm_cm0.c ****     /*irq priority pointer*/
 136:../Sources/TFC/TFC_arm_cm0.c ****     uint8 *prio_reg;
 137:../Sources/TFC/TFC_arm_cm0.c ****     uint8 err = 0;
 317              		.loc 1 137 0
 318 000a 3B1C     		mov	r3, r7
 319 000c 0F33     		add	r3, r3, #15
 320 000e 0022     		mov	r2, #0
 321 0010 1A70     		strb	r2, [r3]
 138:../Sources/TFC/TFC_arm_cm0.c ****     uint8 div = 0;
 322              		.loc 1 138 0
 323 0012 3B1C     		mov	r3, r7
 324 0014 0E33     		add	r3, r3, #14
 325 0016 0022     		mov	r2, #0
 326 0018 1A70     		strb	r2, [r3]
 139:../Sources/TFC/TFC_arm_cm0.c ****     
 140:../Sources/TFC/TFC_arm_cm0.c ****     /* Make sure that the IRQ is an allowable number. Right now up to 32 is 
 141:../Sources/TFC/TFC_arm_cm0.c ****      * used.
 142:../Sources/TFC/TFC_arm_cm0.c ****      *
 143:../Sources/TFC/TFC_arm_cm0.c ****      * NOTE: If you are using the interrupt definitions from the header
 144:../Sources/TFC/TFC_arm_cm0.c ****      * file, you MUST SUBTRACT 16!!!
 145:../Sources/TFC/TFC_arm_cm0.c ****      */
 146:../Sources/TFC/TFC_arm_cm0.c ****     if (irq > 32)
 327              		.loc 1 146 0
 328 001a 7B68     		ldr	r3, [r7, #4]
 329 001c 202B     		cmp	r3, #32
 330 001e 03DD     		ble	.L22
 147:../Sources/TFC/TFC_arm_cm0.c ****     {
 148:../Sources/TFC/TFC_arm_cm0.c ****       //  printf("\nERR! Invalid IRQ value passed to priority irq function!\n");
 149:../Sources/TFC/TFC_arm_cm0.c ****         err = 1;
 331              		.loc 1 149 0
 332 0020 3B1C     		mov	r3, r7
 333 0022 0F33     		add	r3, r3, #15
 334 0024 0122     		mov	r2, #1
 335 0026 1A70     		strb	r2, [r3]
 336              	.L22:
 150:../Sources/TFC/TFC_arm_cm0.c ****     }
 151:../Sources/TFC/TFC_arm_cm0.c **** 
 152:../Sources/TFC/TFC_arm_cm0.c ****     if (prio > 3)
 337              		.loc 1 152 0
 338 0028 3B68     		ldr	r3, [r7]
 339 002a 032B     		cmp	r3, #3
 340 002c 03DD     		ble	.L23
 153:../Sources/TFC/TFC_arm_cm0.c ****     {
 154:../Sources/TFC/TFC_arm_cm0.c ****        // printf("\nERR! Invalid priority value passed to priority irq function!\n");
 155:../Sources/TFC/TFC_arm_cm0.c ****         err = 1;
 341              		.loc 1 155 0
 342 002e 3B1C     		mov	r3, r7
 343 0030 0F33     		add	r3, r3, #15
 344 0032 0122     		mov	r2, #1
 345 0034 1A70     		strb	r2, [r3]
 346              	.L23:
 156:../Sources/TFC/TFC_arm_cm0.c ****     }
 157:../Sources/TFC/TFC_arm_cm0.c ****     
 158:../Sources/TFC/TFC_arm_cm0.c ****     if (err != 1)
 347              		.loc 1 158 0
 348 0036 3B1C     		mov	r3, r7
 349 0038 0F33     		add	r3, r3, #15
 350 003a 1B78     		ldrb	r3, [r3]
 351 003c 012B     		cmp	r3, #1
 352 003e 14D0     		beq	.L21
 159:../Sources/TFC/TFC_arm_cm0.c ****     {
 160:../Sources/TFC/TFC_arm_cm0.c ****         /* Determine which of the NVICIPx corresponds to the irq */
 161:../Sources/TFC/TFC_arm_cm0.c ****         div = irq / 4;
 353              		.loc 1 161 0
 354 0040 7B68     		ldr	r3, [r7, #4]
 355 0042 002B     		cmp	r3, #0
 356 0044 00DA     		bge	.L25
 357 0046 0333     		add	r3, r3, #3
 358              	.L25:
 359 0048 9B10     		asr	r3, r3, #2
 360 004a 1A1C     		mov	r2, r3
 361 004c 3B1C     		mov	r3, r7
 362 004e 0E33     		add	r3, r3, #14
 363 0050 1A70     		strb	r2, [r3]
 162:../Sources/TFC/TFC_arm_cm0.c ****         prio_reg = (uint8 *)((uint32)&NVIC_IP(div));
 364              		.loc 1 162 0
 365 0052 3B1C     		mov	r3, r7
 366 0054 0E33     		add	r3, r3, #14
 367 0056 1B78     		ldrb	r3, [r3]
 368 0058 9B00     		lsl	r3, r3, #2
 369 005a 054A     		ldr	r2, .L26
 370 005c 9B18     		add	r3, r3, r2
 371 005e BB60     		str	r3, [r7, #8]
 163:../Sources/TFC/TFC_arm_cm0.c ****         /* Assign priority to IRQ */
 164:../Sources/TFC/TFC_arm_cm0.c ****         *prio_reg = ( (prio&0x3) << (8 - ARM_INTERRUPT_LEVEL_BITS) );             
 372              		.loc 1 164 0
 373 0060 3B68     		ldr	r3, [r7]
 374 0062 9B01     		lsl	r3, r3, #6
 375 0064 DAB2     		uxtb	r2, r3
 376 0066 BB68     		ldr	r3, [r7, #8]
 377 0068 1A70     		strb	r2, [r3]
 378              	.L21:
 165:../Sources/TFC/TFC_arm_cm0.c ****     }
 166:../Sources/TFC/TFC_arm_cm0.c **** }
 379              		.loc 1 166 0
 380 006a BD46     		mov	sp, r7
 381 006c 04B0     		add	sp, sp, #16
 382              		@ sp needed for prologue
 383 006e 80BD     		pop	{r7, pc}
 384              	.L27:
 385              		.align	2
 386              	.L26:
 387 0070 00E400E0 		.word	-536812544
 388              		.cfi_endproc
 389              	.LFE5:
 391              		.text
 392              	.Letext0:
 393              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 394              		.file 3 "C:/Users/Jared/Desktop/Freescale/source-archive/frdm-tfc/trunk/RELEASES/R1.0/FRDM-TFC/Pro
 395              		.file 4 "C:/Users/Jared/Desktop/Freescale/source-archive/frdm-tfc/trunk/RELEASES/R1.0/FRDM-TFC/Pro
DEFINED SYMBOLS
                            *ABS*:00000000 TFC_arm_cm0.c
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:18     .text.stop:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:23     .text.stop:00000000 stop
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:59     .text.stop:00000020 $d
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:64     .text.wait:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:69     .text.wait:00000000 wait
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:106    .text.wait:00000024 $d
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:111    .text.write_vtor:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:116    .text.write_vtor:00000000 write_vtor
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:145    .text.write_vtor:00000018 $d
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:151    .text.enable_irq:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:156    .text.enable_irq:00000000 enable_irq
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:230    .text.enable_irq:00000064 $d
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:236    .text.disable_irq:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:241    .text.disable_irq:00000000 disable_irq
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:289    .text.disable_irq:00000038 $d
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:295    .text.set_irq_priority:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:300    .text.set_irq_priority:00000000 set_irq_priority
C:\Users\Jared\AppData\Local\Temp\cc4AtgPT.s:387    .text.set_irq_priority:00000070 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
