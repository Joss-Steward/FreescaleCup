   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TFC_CrystalClock.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	drs_val,1,1
  18              		.comm	dmx32_val,1,1
  19              		.section	.text.TFC_InitClock,"ax",%progbits
  20              		.align	2
  21              		.global	TFC_InitClock
  22              		.code	16
  23              		.thumb_func
  25              	TFC_InitClock:
  26              	.LFB0:
  27              		.file 1 "../Sources/TFC/TFC_CrystalClock.c"
   1:../Sources/TFC/TFC_CrystalClock.c **** 
   2:../Sources/TFC/TFC_CrystalClock.c **** 
   3:../Sources/TFC/TFC_CrystalClock.c **** #include "TFC\TFC.h"
   4:../Sources/TFC/TFC_CrystalClock.c **** 
   5:../Sources/TFC/TFC_CrystalClock.c **** /* For some reason CW needs to have cw.h explicitly included here for
   6:../Sources/TFC/TFC_CrystalClock.c ****  * the code relocation of set_sys_dividers() to work correctly even
   7:../Sources/TFC/TFC_CrystalClock.c ****  * though common.h should pull in cw.h.
   8:../Sources/TFC/TFC_CrystalClock.c ****  */
   9:../Sources/TFC/TFC_CrystalClock.c **** #if (defined(CW))
  10:../Sources/TFC/TFC_CrystalClock.c **** 	#include "cw.h"
  11:../Sources/TFC/TFC_CrystalClock.c **** #endif
  12:../Sources/TFC/TFC_CrystalClock.c **** 
  13:../Sources/TFC/TFC_CrystalClock.c **** // Constants for use in pll_init
  14:../Sources/TFC/TFC_CrystalClock.c **** #define NO_OSCINIT 0
  15:../Sources/TFC/TFC_CrystalClock.c **** #define OSCINIT 1
  16:../Sources/TFC/TFC_CrystalClock.c **** 
  17:../Sources/TFC/TFC_CrystalClock.c **** #define OSC_0 0
  18:../Sources/TFC/TFC_CrystalClock.c **** #define OSC_1 1
  19:../Sources/TFC/TFC_CrystalClock.c **** 
  20:../Sources/TFC/TFC_CrystalClock.c **** #define LOW_POWER 0
  21:../Sources/TFC/TFC_CrystalClock.c **** #define HIGH_GAIN 1
  22:../Sources/TFC/TFC_CrystalClock.c **** 
  23:../Sources/TFC/TFC_CrystalClock.c **** #define CANNED_OSC  0
  24:../Sources/TFC/TFC_CrystalClock.c **** #define CRYSTAL 1
  25:../Sources/TFC/TFC_CrystalClock.c **** 
  26:../Sources/TFC/TFC_CrystalClock.c **** #define PLL_0 0
  27:../Sources/TFC/TFC_CrystalClock.c **** #define PLL_1 1
  28:../Sources/TFC/TFC_CrystalClock.c **** 
  29:../Sources/TFC/TFC_CrystalClock.c **** #define PLL_ONLY 0
  30:../Sources/TFC/TFC_CrystalClock.c **** #define MCGOUT 1
  31:../Sources/TFC/TFC_CrystalClock.c **** 
  32:../Sources/TFC/TFC_CrystalClock.c **** // MCG Mode defines
  33:../Sources/TFC/TFC_CrystalClock.c **** 
  34:../Sources/TFC/TFC_CrystalClock.c **** #define BLPI 1
  35:../Sources/TFC/TFC_CrystalClock.c **** #define FBI  2
  36:../Sources/TFC/TFC_CrystalClock.c **** #define FEI  3
  37:../Sources/TFC/TFC_CrystalClock.c **** #define FEE  4
  38:../Sources/TFC/TFC_CrystalClock.c **** #define FBE  5
  39:../Sources/TFC/TFC_CrystalClock.c **** #define BLPE 6
  40:../Sources/TFC/TFC_CrystalClock.c **** #define PBE  7
  41:../Sources/TFC/TFC_CrystalClock.c **** #define PEE  8
  42:../Sources/TFC/TFC_CrystalClock.c **** 
  43:../Sources/TFC/TFC_CrystalClock.c **** // IRC defines
  44:../Sources/TFC/TFC_CrystalClock.c **** #define SLOW_IRC 0
  45:../Sources/TFC/TFC_CrystalClock.c **** #define FAST_IRC 1
  46:../Sources/TFC/TFC_CrystalClock.c **** 
  47:../Sources/TFC/TFC_CrystalClock.c **** 
  48:../Sources/TFC/TFC_CrystalClock.c **** unsigned char fll_rtc_init(unsigned char, unsigned char);
  49:../Sources/TFC/TFC_CrystalClock.c **** 
  50:../Sources/TFC/TFC_CrystalClock.c **** 
  51:../Sources/TFC/TFC_CrystalClock.c **** // prototypes
  52:../Sources/TFC/TFC_CrystalClock.c **** void rtc_as_refclk(void);
  53:../Sources/TFC/TFC_CrystalClock.c **** int fee_fei(int slow_irc_freq);
  54:../Sources/TFC/TFC_CrystalClock.c **** int fei_fbe(int crystal_val, unsigned char hgo_val, unsigned char erefs_val);
  55:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fei(int slow_irc_freq);
  56:../Sources/TFC/TFC_CrystalClock.c **** int fei_fbi(int irc_freq, unsigned char irc_select);
  57:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fei(int slow_irc_freq);
  58:../Sources/TFC/TFC_CrystalClock.c **** int fbe_pbe(int crystal_val, signed char prdiv_val, signed char vdiv_val);
  59:../Sources/TFC/TFC_CrystalClock.c **** int pbe_pee(int crystal_val);
  60:../Sources/TFC/TFC_CrystalClock.c **** int pee_pbe(int crystal_val);
  61:../Sources/TFC/TFC_CrystalClock.c **** int pbe_fbe(int crystal_val);
  62:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fbi(int irc_freq, unsigned char irc_select);
  63:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fbe(int crystal_val, unsigned char hgo_val, unsigned char erefs_val);
  64:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fee(int crystal_val, unsigned char hgo_val, unsigned char erefs_val);
  65:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fee(int crystal_val);
  66:../Sources/TFC/TFC_CrystalClock.c **** int fee_fbe(int crystal_val);
  67:../Sources/TFC/TFC_CrystalClock.c **** int pbe_blpe(int crystal_val);
  68:../Sources/TFC/TFC_CrystalClock.c **** int blpe_pbe(int crystal_val, signed char prdiv_val, signed char vdiv_val);
  69:../Sources/TFC/TFC_CrystalClock.c **** int blpe_fbe(int crystal_val);
  70:../Sources/TFC/TFC_CrystalClock.c **** int fbi_blpi(int irc_freq, unsigned char irc_select);
  71:../Sources/TFC/TFC_CrystalClock.c **** int blpi_fbi(int irc_freq, unsigned char irc_select);
  72:../Sources/TFC/TFC_CrystalClock.c **** int fei_fee(int crystal_val, unsigned char hgo_val, unsigned char erefs_val);
  73:../Sources/TFC/TFC_CrystalClock.c **** int fee_fbi(int irc_freq, unsigned char irc_select);
  74:../Sources/TFC/TFC_CrystalClock.c **** int fbe_blpe(int crystal_val);
  75:../Sources/TFC/TFC_CrystalClock.c **** 
  76:../Sources/TFC/TFC_CrystalClock.c **** int pll_init(int crystal_val, unsigned char hgo_val, unsigned char erefs_val, signed char prdiv_val
  77:../Sources/TFC/TFC_CrystalClock.c **** 
  78:../Sources/TFC/TFC_CrystalClock.c **** int fll_freq(int fll_ref);
  79:../Sources/TFC/TFC_CrystalClock.c **** unsigned char what_mcg_mode(void);
  80:../Sources/TFC/TFC_CrystalClock.c **** unsigned char atc(unsigned char irc_select, int irc_freq, int mcg_out_freq);
  81:../Sources/TFC/TFC_CrystalClock.c **** void clk_monitor_0(unsigned char en_dis);
  82:../Sources/TFC/TFC_CrystalClock.c **** 
  83:../Sources/TFC/TFC_CrystalClock.c **** 
  84:../Sources/TFC/TFC_CrystalClock.c **** 
  85:../Sources/TFC/TFC_CrystalClock.c **** 
  86:../Sources/TFC/TFC_CrystalClock.c **** // global variables
  87:../Sources/TFC/TFC_CrystalClock.c **** extern int core_clk_khz;
  88:../Sources/TFC/TFC_CrystalClock.c **** char drs_val, dmx32_val;
  89:../Sources/TFC/TFC_CrystalClock.c **** 
  90:../Sources/TFC/TFC_CrystalClock.c **** 
  91:../Sources/TFC/TFC_CrystalClock.c **** 
  92:../Sources/TFC/TFC_CrystalClock.c **** 
  93:../Sources/TFC/TFC_CrystalClock.c **** /*****************************************************************************
  94:../Sources/TFC/TFC_CrystalClock.c ****  * @name     pll_init
  95:../Sources/TFC/TFC_CrystalClock.c ****  *
  96:../Sources/TFC/TFC_CrystalClock.c ****  * @brief:   Initialization of the MCU.
  97:../Sources/TFC/TFC_CrystalClock.c ****  *
  98:../Sources/TFC/TFC_CrystalClock.c ****  * @param  : None
  99:../Sources/TFC/TFC_CrystalClock.c ****  *
 100:../Sources/TFC/TFC_CrystalClock.c ****  * @return : None
 101:../Sources/TFC/TFC_CrystalClock.c ****  *****************************************************************************
 102:../Sources/TFC/TFC_CrystalClock.c ****  * It will configure the MCU to disable STOP and COP Modules.
 103:../Sources/TFC/TFC_CrystalClock.c ****  * It also set the MCG configuration and bus clock frequency.
 104:../Sources/TFC/TFC_CrystalClock.c ****  ****************************************************************************/
 105:../Sources/TFC/TFC_CrystalClock.c **** void TFC_InitClock()
 106:../Sources/TFC/TFC_CrystalClock.c **** {
  28              		.loc 1 106 0
  29              		.cfi_startproc
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 02AF     		add	r7, sp, #8
  39              	.LCFI2:
  40              		.cfi_def_cfa 7, 8
 107:../Sources/TFC/TFC_CrystalClock.c **** 	pll_init(8000000, LOW_POWER, CRYSTAL, 4, 24, MCGOUT);
  41              		.loc 1 107 0
  42 0006 064B     		ldr	r3, .L2
  43 0008 1822     		mov	r2, #24
  44 000a 0092     		str	r2, [sp]
  45 000c 0122     		mov	r2, #1
  46 000e 0192     		str	r2, [sp, #4]
  47 0010 181C     		mov	r0, r3
  48 0012 0021     		mov	r1, #0
  49 0014 0122     		mov	r2, #1
  50 0016 0423     		mov	r3, #4
  51 0018 FFF7FEFF 		bl	pll_init
 108:../Sources/TFC/TFC_CrystalClock.c ****     	
 109:../Sources/TFC/TFC_CrystalClock.c ****     /************* USB Part **********************/
 110:../Sources/TFC/TFC_CrystalClock.c ****    	/*********************************************/   
 111:../Sources/TFC/TFC_CrystalClock.c ****    //	SIM_CLKDIV2 &= (uint32_t)(~(SIM_CLKDIV2_USBFRAC_MASK | SIM_CLKDIV2_USBDIV_MASK));
 112:../Sources/TFC/TFC_CrystalClock.c **** 
 113:../Sources/TFC/TFC_CrystalClock.c ****     /* Configure USBFRAC = 0, USBDIV = 0 => frq(USBout) = 1 / 1 * frq(PLLin) */
 114:../Sources/TFC/TFC_CrystalClock.c ****    	//SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
 115:../Sources/TFC/TFC_CrystalClock.c ****    			    
 116:../Sources/TFC/TFC_CrystalClock.c ****    	/* Configure USB to be clocked from PLL */
 117:../Sources/TFC/TFC_CrystalClock.c ****    	//SIM_SOPT2  |= (SIM_SOPT2_USBSRC_MASK | SIM_SOPT2_PLLFLLSEL_MASK);
 118:../Sources/TFC/TFC_CrystalClock.c **** 
 119:../Sources/TFC/TFC_CrystalClock.c ****    	/* Enable USB-OTG IP clocking */
 120:../Sources/TFC/TFC_CrystalClock.c ****    	//SIM_SCGC4 |= (SIM_SCGC4_USBOTG_MASK); 
 121:../Sources/TFC/TFC_CrystalClock.c ****     			    
 122:../Sources/TFC/TFC_CrystalClock.c ****     			/* Configure enable USB regulator for device */
 123:../Sources/TFC/TFC_CrystalClock.c ****    //SIM_SOPT1 |= SIM_SOPT1_USBREGEN_MASK;
 124:../Sources/TFC/TFC_CrystalClock.c ****    			    
 125:../Sources/TFC/TFC_CrystalClock.c ****    //NVICICER2 |= (1<<9);	/* Clear any pending interrupts on USB */
 126:../Sources/TFC/TFC_CrystalClock.c **** //   NVICISER2 |= (1<<9);	/* Enable interrupts from USB module */	 
 127:../Sources/TFC/TFC_CrystalClock.c **** 
 128:../Sources/TFC/TFC_CrystalClock.c ****     	
 129:../Sources/TFC/TFC_CrystalClock.c ****     /* Now running PEE Mode */
 130:../Sources/TFC/TFC_CrystalClock.c **** 
 131:../Sources/TFC/TFC_CrystalClock.c **** 
 132:../Sources/TFC/TFC_CrystalClock.c **** }
  52              		.loc 1 132 0
  53 001c BD46     		mov	sp, r7
  54              		@ sp needed for prologue
  55 001e 80BD     		pop	{r7, pc}
  56              	.L3:
  57              		.align	2
  58              	.L2:
  59 0020 00127A00 		.word	8000000
  60              		.cfi_endproc
  61              	.LFE0:
  63              		.global	__aeabi_idiv
  64              		.section	.text.pll_init,"ax",%progbits
  65              		.align	2
  66              		.global	pll_init
  67              		.code	16
  68              		.thumb_func
  70              	pll_init:
  71              	.LFB1:
 133:../Sources/TFC/TFC_CrystalClock.c **** 
 134:../Sources/TFC/TFC_CrystalClock.c **** 
 135:../Sources/TFC/TFC_CrystalClock.c **** /*
 136:../Sources/TFC/TFC_CrystalClock.c ****  * File:    mcg.c
 137:../Sources/TFC/TFC_CrystalClock.c ****  *
 138:../Sources/TFC/TFC_CrystalClock.c ****  * MCG drivers for Freescale Kinetis L - series devices
 139:../Sources/TFC/TFC_CrystalClock.c ****  * Notes:
 140:../Sources/TFC/TFC_CrystalClock.c ****  * Assumes the MCG mode is in the default FEI mode out of reset
 141:../Sources/TFC/TFC_CrystalClock.c ****  */
 142:../Sources/TFC/TFC_CrystalClock.c **** 
 143:../Sources/TFC/TFC_CrystalClock.c **** #include "derivative.h"
 144:../Sources/TFC/TFC_CrystalClock.c **** #include "TFC\TFC_CrystalClock.h"
 145:../Sources/TFC/TFC_CrystalClock.c **** 
 146:../Sources/TFC/TFC_CrystalClock.c **** 
 147:../Sources/TFC/TFC_CrystalClock.c **** 
 148:../Sources/TFC/TFC_CrystalClock.c **** 
 149:../Sources/TFC/TFC_CrystalClock.c **** /*********************************************************************************************/
 150:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : pll_init
 151:../Sources/TFC/TFC_CrystalClock.c ****  *
 152:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: Option to move from FEI to PEE mode or to just initialize the PLL
 153:../Sources/TFC/TFC_CrystalClock.c ****  *
 154:../Sources/TFC/TFC_CrystalClock.c ****  * This function initializess PLL0. Either OSC0 is selected for the
 155:../Sources/TFC/TFC_CrystalClock.c ****  * reference clock source. The oscillators can be configured to use a crystal or take in an
 156:../Sources/TFC/TFC_CrystalClock.c ****  * external square wave clock.
 157:../Sources/TFC/TFC_CrystalClock.c ****  * Using the function parameter names the PLL frequency is calculated as follows:
 158:../Sources/TFC/TFC_CrystalClock.c ****  * PLL freq = ((crystal_val / prdiv_val) * vdiv_val)
 159:../Sources/TFC/TFC_CrystalClock.c ****  * Refer to the readme file in the mcg driver directory for examples of pll_init configurations.
 160:../Sources/TFC/TFC_CrystalClock.c ****  * All parameters must be provided, for example crystal_val must be provided even if the
 161:../Sources/TFC/TFC_CrystalClock.c ****  * oscillator associated with that parameter is already initialized.
 162:../Sources/TFC/TFC_CrystalClock.c ****  * The various passed parameters are checked to ensure they are within the allowed range. If any
 163:../Sources/TFC/TFC_CrystalClock.c ****  * of these checks fail the driver will exit and return a fail/error code. An error code will
 164:../Sources/TFC/TFC_CrystalClock.c ****  * also be returned if any error occurs during the PLL initialization sequence. Refer to the
 165:../Sources/TFC/TFC_CrystalClock.c ****  * readme file in the mcg driver directory for a list of all these codes.
 166:../Sources/TFC/TFC_CrystalClock.c ****  *
 167:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: crystal_val - external clock frequency in Hz either from a crystal or square
 168:../Sources/TFC/TFC_CrystalClock.c ****  *                           wave clock source
 169:../Sources/TFC/TFC_CrystalClock.c ****  *             hgo_val     - selects whether low power or high gain mode is selected
 170:../Sources/TFC/TFC_CrystalClock.c ****  *                           for the crystal oscillator. This has no meaning if an
 171:../Sources/TFC/TFC_CrystalClock.c ****  *                           external clock is used.
 172:../Sources/TFC/TFC_CrystalClock.c ****  *             erefs_val   - selects external clock (=0) or crystal osc (=1)
 173:../Sources/TFC/TFC_CrystalClock.c ****  *             prdiv_val   - value to divide the external clock source by to create the desired
 174:../Sources/TFC/TFC_CrystalClock.c ****  *                           PLL reference clock frequency
 175:../Sources/TFC/TFC_CrystalClock.c ****  *             vdiv_val    - value to multiply the PLL reference clock frequency by
 176:../Sources/TFC/TFC_CrystalClock.c ****  *             mcgout_select  - 0 if the PLL is just to be enabled, non-zero if the PLL is used
 177:../Sources/TFC/TFC_CrystalClock.c ****  *                              to provide the MCGOUT clock for the system.
 178:../Sources/TFC/TFC_CrystalClock.c ****  *
 179:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : PLL frequency (Hz) or error code
 180:../Sources/TFC/TFC_CrystalClock.c ****  */
 181:../Sources/TFC/TFC_CrystalClock.c **** 
 182:../Sources/TFC/TFC_CrystalClock.c **** int pll_init(int crystal_val, unsigned char hgo_val, unsigned char erefs_val, signed char prdiv_val
 183:../Sources/TFC/TFC_CrystalClock.c **** {
  72              		.loc 1 183 0
  73              		.cfi_startproc
  74 0000 80B5     		push	{r7, lr}
  75              	.LCFI3:
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 7, -8
  78              		.cfi_offset 14, -4
  79 0002 86B0     		sub	sp, sp, #24
  80              	.LCFI4:
  81              		.cfi_def_cfa_offset 32
  82 0004 00AF     		add	r7, sp, #0
  83              	.LCFI5:
  84              		.cfi_def_cfa_register 7
  85 0006 7860     		str	r0, [r7, #4]
  86 0008 081C     		mov	r0, r1
  87 000a 111C     		mov	r1, r2
  88 000c 1A1C     		mov	r2, r3
  89 000e FB1C     		add	r3, r7, #3
  90 0010 1870     		strb	r0, [r3]
  91 0012 BB1C     		add	r3, r7, #2
  92 0014 1970     		strb	r1, [r3]
  93 0016 7B1C     		add	r3, r7, #1
  94 0018 1A70     		strb	r2, [r3]
 184:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
 185:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 186:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char prdiv, vdiv;
 187:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 188:../Sources/TFC/TFC_CrystalClock.c ****   int ref_freq;
 189:../Sources/TFC/TFC_CrystalClock.c ****   int pll_freq;
 190:../Sources/TFC/TFC_CrystalClock.c **** 
 191:../Sources/TFC/TFC_CrystalClock.c ****   // check if in FEI mode
 192:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
  95              		.loc 1 192 0
  96 001a C24B     		ldr	r3, .L64
  97 001c 9B79     		ldrb	r3, [r3, #6]
  98 001e DBB2     		uxtb	r3, r3
  99 0020 1A1C     		mov	r2, r3
 100 0022 0C23     		mov	r3, #12
 101 0024 1340     		and	r3, r2
 102 0026 9B08     		lsr	r3, r3, #2
 103 0028 0DD1     		bne	.L5
 193:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 104              		.loc 1 193 0
 105 002a BE4B     		ldr	r3, .L64
 106 002c 9B79     		ldrb	r3, [r3, #6]
 107 002e DBB2     		uxtb	r3, r3
 108 0030 1A1C     		mov	r2, r3
 109 0032 1023     		mov	r3, #16
 110 0034 1340     		and	r3, r2
 192:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 111              		.loc 1 192 0
 112 0036 06D0     		beq	.L5
 194:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 113              		.loc 1 194 0
 114 0038 BA4B     		ldr	r3, .L64
 115 003a 9B79     		ldrb	r3, [r3, #6]
 116 003c DBB2     		uxtb	r3, r3
 117 003e 1A1C     		mov	r2, r3
 118 0040 2023     		mov	r3, #32
 119 0042 1340     		and	r3, r2
 192:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 120              		.loc 1 192 0
 121 0044 01D0     		beq	.L6
 122              	.L5:
 195:../Sources/TFC/TFC_CrystalClock.c ****   {
 196:../Sources/TFC/TFC_CrystalClock.c ****     return 0x1;                                                     // return error code
 123              		.loc 1 196 0
 124 0046 0123     		mov	r3, #1
 125 0048 73E2     		b	.L7
 126              	.L6:
 197:../Sources/TFC/TFC_CrystalClock.c ****   }
 198:../Sources/TFC/TFC_CrystalClock.c **** 
 199:../Sources/TFC/TFC_CrystalClock.c ****   // check external frequency is less than the maximum frequency
 200:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 127              		.loc 1 200 0
 128 004a 7A68     		ldr	r2, [r7, #4]
 129 004c B64B     		ldr	r3, .L64+4
 130 004e 9A42     		cmp	r2, r3
 131 0050 01DD     		ble	.L8
 132              		.loc 1 200 0 is_stmt 0
 133 0052 2123     		mov	r3, #33
 134 0054 6DE2     		b	.L7
 135              	.L8:
 201:../Sources/TFC/TFC_CrystalClock.c **** 
 202:../Sources/TFC/TFC_CrystalClock.c ****   // check crystal frequency is within spec. if crystal osc is being used as PLL ref
 203:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 136              		.loc 1 203 0 is_stmt 1
 137 0056 BB1C     		add	r3, r7, #2
 138 0058 1B78     		ldrb	r3, [r3]
 139 005a 002B     		cmp	r3, #0
 140 005c 09D0     		beq	.L9
 204:../Sources/TFC/TFC_CrystalClock.c ****   {
 205:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 3000000) || (crystal_val > 32000000)) {return 0x22;} // return 1 if one of t
 141              		.loc 1 205 0
 142 005e 7A68     		ldr	r2, [r7, #4]
 143 0060 B24B     		ldr	r3, .L64+8
 144 0062 9A42     		cmp	r2, r3
 145 0064 03DD     		ble	.L10
 146              		.loc 1 205 0 is_stmt 0
 147 0066 7A68     		ldr	r2, [r7, #4]
 148 0068 B14B     		ldr	r3, .L64+12
 149 006a 9A42     		cmp	r2, r3
 150 006c 01DD     		ble	.L9
 151              	.L10:
 152              		.loc 1 205 0
 153 006e 2223     		mov	r3, #34
 154 0070 5FE2     		b	.L7
 155              	.L9:
 206:../Sources/TFC/TFC_CrystalClock.c ****   }
 207:../Sources/TFC/TFC_CrystalClock.c **** 
 208:../Sources/TFC/TFC_CrystalClock.c ****   // make sure HGO will never be greater than 1. Could return an error instead if desired.
 209:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 156              		.loc 1 209 0 is_stmt 1
 157 0072 FB1C     		add	r3, r7, #3
 158 0074 1B78     		ldrb	r3, [r3]
 159 0076 002B     		cmp	r3, #0
 160 0078 02D0     		beq	.L11
 210:../Sources/TFC/TFC_CrystalClock.c ****   {
 211:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 161              		.loc 1 211 0
 162 007a FB1C     		add	r3, r7, #3
 163 007c 0122     		mov	r2, #1
 164 007e 1A70     		strb	r2, [r3]
 165              	.L11:
 212:../Sources/TFC/TFC_CrystalClock.c ****   }
 213:../Sources/TFC/TFC_CrystalClock.c **** 
 214:../Sources/TFC/TFC_CrystalClock.c ****   // Check PLL divider settings are within spec.
 215:../Sources/TFC/TFC_CrystalClock.c ****   if ((prdiv_val < 1) || (prdiv_val > 25)) {return 0x41;}
 166              		.loc 1 215 0
 167 0080 7B1C     		add	r3, r7, #1
 168 0082 1B78     		ldrb	r3, [r3]
 169 0084 5BB2     		sxtb	r3, r3
 170 0086 002B     		cmp	r3, #0
 171 0088 04DD     		ble	.L12
 172              		.loc 1 215 0 is_stmt 0
 173 008a 7B1C     		add	r3, r7, #1
 174 008c 1B78     		ldrb	r3, [r3]
 175 008e 5BB2     		sxtb	r3, r3
 176 0090 192B     		cmp	r3, #25
 177 0092 01DD     		ble	.L13
 178              	.L12:
 179              		.loc 1 215 0
 180 0094 4123     		mov	r3, #65
 181 0096 4CE2     		b	.L7
 182              	.L13:
 216:../Sources/TFC/TFC_CrystalClock.c ****   if ((vdiv_val < 24) || (vdiv_val > 50)) {return 0x42;}
 183              		.loc 1 216 0 is_stmt 1
 184 0098 3B1C     		mov	r3, r7
 185 009a 2033     		add	r3, r3, #32
 186 009c 1B78     		ldrb	r3, [r3]
 187 009e 5BB2     		sxtb	r3, r3
 188 00a0 172B     		cmp	r3, #23
 189 00a2 05DD     		ble	.L14
 190              		.loc 1 216 0 is_stmt 0
 191 00a4 3B1C     		mov	r3, r7
 192 00a6 2033     		add	r3, r3, #32
 193 00a8 1B78     		ldrb	r3, [r3]
 194 00aa 5BB2     		sxtb	r3, r3
 195 00ac 322B     		cmp	r3, #50
 196 00ae 01DD     		ble	.L15
 197              	.L14:
 198              		.loc 1 216 0
 199 00b0 4223     		mov	r3, #66
 200 00b2 3EE2     		b	.L7
 201              	.L15:
 217:../Sources/TFC/TFC_CrystalClock.c **** 
 218:../Sources/TFC/TFC_CrystalClock.c ****   // Check PLL reference clock frequency is within spec.
 219:../Sources/TFC/TFC_CrystalClock.c ****   ref_freq = crystal_val / prdiv_val;
 202              		.loc 1 219 0 is_stmt 1
 203 00b4 7B1C     		add	r3, r7, #1
 204 00b6 1B78     		ldrb	r3, [r3]
 205 00b8 5BB2     		sxtb	r3, r3
 206 00ba 7868     		ldr	r0, [r7, #4]
 207 00bc 191C     		mov	r1, r3
 208 00be FFF7FEFF 		bl	__aeabi_idiv
 209 00c2 031C     		mov	r3, r0
 210 00c4 3B61     		str	r3, [r7, #16]
 220:../Sources/TFC/TFC_CrystalClock.c ****   if ((ref_freq < 2000000) || (ref_freq > 4000000)) {return 0x43;}
 211              		.loc 1 220 0
 212 00c6 3A69     		ldr	r2, [r7, #16]
 213 00c8 9A4B     		ldr	r3, .L64+16
 214 00ca 9A42     		cmp	r2, r3
 215 00cc 03DD     		ble	.L16
 216              		.loc 1 220 0 is_stmt 0
 217 00ce 3A69     		ldr	r2, [r7, #16]
 218 00d0 994B     		ldr	r3, .L64+20
 219 00d2 9A42     		cmp	r2, r3
 220 00d4 01DD     		ble	.L17
 221              	.L16:
 222              		.loc 1 220 0
 223 00d6 4323     		mov	r3, #67
 224 00d8 2BE2     		b	.L7
 225              	.L17:
 221:../Sources/TFC/TFC_CrystalClock.c **** 
 222:../Sources/TFC/TFC_CrystalClock.c ****   // Check PLL output frequency is within spec.
 223:../Sources/TFC/TFC_CrystalClock.c ****   pll_freq = (crystal_val / prdiv_val) * vdiv_val;
 226              		.loc 1 223 0 is_stmt 1
 227 00da 7B1C     		add	r3, r7, #1
 228 00dc 1B78     		ldrb	r3, [r3]
 229 00de 5BB2     		sxtb	r3, r3
 230 00e0 7868     		ldr	r0, [r7, #4]
 231 00e2 191C     		mov	r1, r3
 232 00e4 FFF7FEFF 		bl	__aeabi_idiv
 233 00e8 031C     		mov	r3, r0
 234 00ea 3A1C     		mov	r2, r7
 235 00ec 2032     		add	r2, r2, #32
 236 00ee 1278     		ldrb	r2, [r2]
 237 00f0 52B2     		sxtb	r2, r2
 238 00f2 5343     		mul	r3, r2
 239 00f4 FB60     		str	r3, [r7, #12]
 224:../Sources/TFC/TFC_CrystalClock.c ****   if ((pll_freq < 48000000) || (pll_freq > 100000000)) {return 0x45;}
 240              		.loc 1 224 0
 241 00f6 FA68     		ldr	r2, [r7, #12]
 242 00f8 904B     		ldr	r3, .L64+24
 243 00fa 9A42     		cmp	r2, r3
 244 00fc 03DD     		ble	.L18
 245              		.loc 1 224 0 is_stmt 0
 246 00fe FA68     		ldr	r2, [r7, #12]
 247 0100 8F4B     		ldr	r3, .L64+28
 248 0102 9A42     		cmp	r2, r3
 249 0104 01DD     		ble	.L19
 250              	.L18:
 251              		.loc 1 224 0
 252 0106 4523     		mov	r3, #69
 253 0108 13E2     		b	.L7
 254              	.L19:
 225:../Sources/TFC/TFC_CrystalClock.c **** 
 226:../Sources/TFC/TFC_CrystalClock.c ****   // configure the MCG_C2 register
 227:../Sources/TFC/TFC_CrystalClock.c ****   // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the
 228:../Sources/TFC/TFC_CrystalClock.c ****   // it still needs to be set correctly even if the oscillator is not being used
 229:../Sources/TFC/TFC_CrystalClock.c ****       
 230:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 255              		.loc 1 230 0 is_stmt 1
 256 010a 864A     		ldr	r2, .L64
 257 010c 3B1C     		mov	r3, r7
 258 010e 1633     		add	r3, r3, #22
 259 0110 5278     		ldrb	r2, [r2, #1]
 260 0112 1A70     		strb	r2, [r3]
 231:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 261              		.loc 1 231 0
 262 0114 3B1C     		mov	r3, r7
 263 0116 1633     		add	r3, r3, #22
 264 0118 3A1C     		mov	r2, r7
 265 011a 1632     		add	r2, r2, #22
 266 011c 1278     		ldrb	r2, [r2]
 267 011e 3C21     		mov	r1, #60
 268 0120 8A43     		bic	r2, r1
 269 0122 1A70     		strb	r2, [r3]
 232:../Sources/TFC/TFC_CrystalClock.c ****     
 233:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 8000000)
 270              		.loc 1 233 0
 271 0124 7A68     		ldr	r2, [r7, #4]
 272 0126 874B     		ldr	r3, .L64+32
 273 0128 9A42     		cmp	r2, r3
 274 012a 14DC     		bgt	.L20
 234:../Sources/TFC/TFC_CrystalClock.c ****   {
 235:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 275              		.loc 1 235 0
 276 012c FB1C     		add	r3, r7, #3
 277 012e 1B78     		ldrb	r3, [r3]
 278 0130 DB00     		lsl	r3, r3, #3
 279 0132 DAB2     		uxtb	r2, r3
 280 0134 BB1C     		add	r3, r7, #2
 281 0136 1B78     		ldrb	r3, [r3]
 282 0138 9B00     		lsl	r3, r3, #2
 283 013a DBB2     		uxtb	r3, r3
 284 013c 1343     		orr	r3, r2
 285 013e DAB2     		uxtb	r2, r3
 286 0140 3B1C     		mov	r3, r7
 287 0142 1633     		add	r3, r3, #22
 288 0144 1B78     		ldrb	r3, [r3]
 289 0146 1343     		orr	r3, r2
 290 0148 DAB2     		uxtb	r2, r3
 291 014a 3B1C     		mov	r3, r7
 292 014c 1633     		add	r3, r3, #22
 293 014e 1021     		mov	r1, #16
 294 0150 0A43     		orr	r2, r1
 295 0152 1A70     		strb	r2, [r3]
 296 0154 13E0     		b	.L21
 297              	.L20:
 236:../Sources/TFC/TFC_CrystalClock.c ****   }
 237:../Sources/TFC/TFC_CrystalClock.c ****   else
 238:../Sources/TFC/TFC_CrystalClock.c ****   {
 239:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 298              		.loc 1 239 0
 299 0156 FB1C     		add	r3, r7, #3
 300 0158 1B78     		ldrb	r3, [r3]
 301 015a DB00     		lsl	r3, r3, #3
 302 015c DAB2     		uxtb	r2, r3
 303 015e BB1C     		add	r3, r7, #2
 304 0160 1B78     		ldrb	r3, [r3]
 305 0162 9B00     		lsl	r3, r3, #2
 306 0164 DBB2     		uxtb	r3, r3
 307 0166 1343     		orr	r3, r2
 308 0168 DAB2     		uxtb	r2, r3
 309 016a 3B1C     		mov	r3, r7
 310 016c 1633     		add	r3, r3, #22
 311 016e 1B78     		ldrb	r3, [r3]
 312 0170 1343     		orr	r3, r2
 313 0172 DAB2     		uxtb	r2, r3
 314 0174 3B1C     		mov	r3, r7
 315 0176 1633     		add	r3, r3, #22
 316 0178 2021     		mov	r1, #32
 317 017a 0A43     		orr	r2, r1
 318 017c 1A70     		strb	r2, [r3]
 319              	.L21:
 240:../Sources/TFC/TFC_CrystalClock.c ****   }
 241:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 320              		.loc 1 241 0
 321 017e 694B     		ldr	r3, .L64
 322 0180 3A1C     		mov	r2, r7
 323 0182 1632     		add	r2, r2, #22
 324 0184 1278     		ldrb	r2, [r2]
 325 0186 5A70     		strb	r2, [r3, #1]
 242:../Sources/TFC/TFC_CrystalClock.c ****   
 243:../Sources/TFC/TFC_CrystalClock.c ****   // determine FRDIV based on reference clock frequency
 244:../Sources/TFC/TFC_CrystalClock.c ****   // since the external frequency has already been checked only the maximum frequency for each FRDI
 245:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 326              		.loc 1 245 0
 327 0188 7A68     		ldr	r2, [r7, #4]
 328 018a 6F4B     		ldr	r3, .L64+36
 329 018c 9A42     		cmp	r2, r3
 330 018e 04DC     		bgt	.L22
 331              		.loc 1 245 0 is_stmt 0
 332 0190 3B1C     		mov	r3, r7
 333 0192 1733     		add	r3, r3, #23
 334 0194 0022     		mov	r2, #0
 335 0196 1A70     		strb	r2, [r3]
 336 0198 27E0     		b	.L23
 337              	.L22:
 246:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 338              		.loc 1 246 0 is_stmt 1
 339 019a 7A68     		ldr	r2, [r7, #4]
 340 019c 6B4B     		ldr	r3, .L64+40
 341 019e 9A42     		cmp	r2, r3
 342 01a0 04DC     		bgt	.L24
 343              		.loc 1 246 0 is_stmt 0
 344 01a2 3B1C     		mov	r3, r7
 345 01a4 1733     		add	r3, r3, #23
 346 01a6 0122     		mov	r2, #1
 347 01a8 1A70     		strb	r2, [r3]
 348 01aa 1EE0     		b	.L23
 349              	.L24:
 247:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 350              		.loc 1 247 0 is_stmt 1
 351 01ac 7A68     		ldr	r2, [r7, #4]
 352 01ae 684B     		ldr	r3, .L64+44
 353 01b0 9A42     		cmp	r2, r3
 354 01b2 04DC     		bgt	.L25
 355              		.loc 1 247 0 is_stmt 0
 356 01b4 3B1C     		mov	r3, r7
 357 01b6 1733     		add	r3, r3, #23
 358 01b8 0222     		mov	r2, #2
 359 01ba 1A70     		strb	r2, [r3]
 360 01bc 15E0     		b	.L23
 361              	.L25:
 248:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 362              		.loc 1 248 0 is_stmt 1
 363 01be 7A68     		ldr	r2, [r7, #4]
 364 01c0 644B     		ldr	r3, .L64+48
 365 01c2 9A42     		cmp	r2, r3
 366 01c4 04DC     		bgt	.L26
 367              		.loc 1 248 0 is_stmt 0
 368 01c6 3B1C     		mov	r3, r7
 369 01c8 1733     		add	r3, r3, #23
 370 01ca 0322     		mov	r2, #3
 371 01cc 1A70     		strb	r2, [r3]
 372 01ce 0CE0     		b	.L23
 373              	.L26:
 249:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 374              		.loc 1 249 0 is_stmt 1
 375 01d0 7A68     		ldr	r2, [r7, #4]
 376 01d2 614B     		ldr	r3, .L64+52
 377 01d4 9A42     		cmp	r2, r3
 378 01d6 04DC     		bgt	.L27
 379              		.loc 1 249 0 is_stmt 0
 380 01d8 3B1C     		mov	r3, r7
 381 01da 1733     		add	r3, r3, #23
 382 01dc 0422     		mov	r2, #4
 383 01de 1A70     		strb	r2, [r3]
 384 01e0 03E0     		b	.L23
 385              	.L27:
 250:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 386              		.loc 1 250 0 is_stmt 1
 387 01e2 3B1C     		mov	r3, r7
 388 01e4 1733     		add	r3, r3, #23
 389 01e6 0522     		mov	r2, #5
 390 01e8 1A70     		strb	r2, [r3]
 391              	.L23:
 251:../Sources/TFC/TFC_CrystalClock.c **** 
 252:../Sources/TFC/TFC_CrystalClock.c ****   // Select external oscillator and Reference Divider and clear IREFS to start ext osc
 253:../Sources/TFC/TFC_CrystalClock.c ****   // If IRCLK is required it must be enabled outside of this driver, existing state will be maintai
 254:../Sources/TFC/TFC_CrystalClock.c ****   // CLKS=2, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
 255:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 392              		.loc 1 255 0
 393 01ea 4E4A     		ldr	r2, .L64
 394 01ec 3B1C     		mov	r3, r7
 395 01ee 1633     		add	r3, r3, #22
 396 01f0 1278     		ldrb	r2, [r2]
 397 01f2 1A70     		strb	r2, [r3]
 256:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these
 398              		.loc 1 256 0
 399 01f4 3B1C     		mov	r3, r7
 400 01f6 1633     		add	r3, r3, #22
 401 01f8 3A1C     		mov	r2, r7
 402 01fa 1632     		add	r2, r2, #22
 403 01fc 1178     		ldrb	r1, [r2]
 404 01fe 0322     		mov	r2, #3
 405 0200 0A40     		and	r2, r1
 406 0202 1A70     		strb	r2, [r3]
 257:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(2) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 407              		.loc 1 257 0
 408 0204 3B1C     		mov	r3, r7
 409 0206 1733     		add	r3, r3, #23
 410 0208 1B78     		ldrb	r3, [r3]
 411 020a DB00     		lsl	r3, r3, #3
 412 020c DAB2     		uxtb	r2, r3
 413 020e 3823     		mov	r3, #56
 414 0210 1340     		and	r3, r2
 415 0212 DAB2     		uxtb	r2, r3
 416 0214 3B1C     		mov	r3, r7
 417 0216 1633     		add	r3, r3, #22
 418 0218 1B78     		ldrb	r3, [r3]
 419 021a 1343     		orr	r3, r2
 420 021c DAB2     		uxtb	r2, r3
 421 021e 3B1C     		mov	r3, r7
 422 0220 1633     		add	r3, r3, #22
 423 0222 8021     		mov	r1, #128
 424 0224 4942     		neg	r1, r1
 425 0226 0A43     		orr	r2, r1
 426 0228 1A70     		strb	r2, [r3]
 258:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 427              		.loc 1 258 0
 428 022a 3E4B     		ldr	r3, .L64
 429 022c 3A1C     		mov	r2, r7
 430 022e 1632     		add	r2, r2, #22
 431 0230 1278     		ldrb	r2, [r2]
 432 0232 1A70     		strb	r2, [r3]
 259:../Sources/TFC/TFC_CrystalClock.c **** 
 260:../Sources/TFC/TFC_CrystalClock.c ****   // if the external oscillator is used need to wait for OSCINIT to set
 261:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 433              		.loc 1 261 0
 434 0234 BB1C     		add	r3, r7, #2
 435 0236 1B78     		ldrb	r3, [r3]
 436 0238 002B     		cmp	r3, #0
 437 023a 24D0     		beq	.L28
 262:../Sources/TFC/TFC_CrystalClock.c ****   {
 263:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000 ; i++)
 438              		.loc 1 263 0
 439 023c 3B1C     		mov	r3, r7
 440 023e 1433     		add	r3, r3, #20
 441 0240 0022     		mov	r2, #0
 442 0242 1A80     		strh	r2, [r3]
 443 0244 0DE0     		b	.L29
 444              	.L32:
 264:../Sources/TFC/TFC_CrystalClock.c ****     {
 265:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 445              		.loc 1 265 0
 446 0246 374B     		ldr	r3, .L64
 447 0248 9B79     		ldrb	r3, [r3, #6]
 448 024a DBB2     		uxtb	r3, r3
 449 024c 1A1C     		mov	r2, r3
 450 024e 0223     		mov	r3, #2
 451 0250 1340     		and	r3, r2
 452 0252 0ED1     		bne	.L58
 453              	.L30:
 263:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000 ; i++)
 454              		.loc 1 263 0
 455 0254 3B1C     		mov	r3, r7
 456 0256 1433     		add	r3, r3, #20
 457 0258 3A1C     		mov	r2, r7
 458 025a 1432     		add	r2, r2, #20
 459 025c 1288     		ldrh	r2, [r2]
 460 025e 0132     		add	r2, r2, #1
 461 0260 1A80     		strh	r2, [r3]
 462              	.L29:
 263:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000 ; i++)
 463              		.loc 1 263 0 is_stmt 0
 464 0262 3B1C     		mov	r3, r7
 465 0264 1433     		add	r3, r3, #20
 466 0266 0021     		mov	r1, #0
 467 0268 5A5E     		ldrsh	r2, [r3, r1]
 468 026a 3C4B     		ldr	r3, .L64+56
 469 026c 9A42     		cmp	r2, r3
 470 026e EADD     		ble	.L32
 471 0270 00E0     		b	.L31
 472              	.L58:
 473              		.loc 1 265 0 is_stmt 1
 474 0272 C046     		mov	r8, r8
 475              	.L31:
 266:../Sources/TFC/TFC_CrystalClock.c ****     }
 267:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with error
 476              		.loc 1 267 0
 477 0274 2B4B     		ldr	r3, .L64
 478 0276 9B79     		ldrb	r3, [r3, #6]
 479 0278 DBB2     		uxtb	r3, r3
 480 027a 1A1C     		mov	r2, r3
 481 027c 0223     		mov	r3, #2
 482 027e 1340     		and	r3, r2
 483 0280 01D1     		bne	.L28
 484              		.loc 1 267 0 is_stmt 0
 485 0282 2323     		mov	r3, #35
 486 0284 55E1     		b	.L7
 487              	.L28:
 268:../Sources/TFC/TFC_CrystalClock.c ****   }
 269:../Sources/TFC/TFC_CrystalClock.c **** 
 270:../Sources/TFC/TFC_CrystalClock.c ****   // wait for Reference clock Status bit to clear
 271:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 488              		.loc 1 271 0 is_stmt 1
 489 0286 3B1C     		mov	r3, r7
 490 0288 1433     		add	r3, r3, #20
 491 028a 0022     		mov	r2, #0
 492 028c 1A80     		strh	r2, [r3]
 493 028e 0DE0     		b	.L33
 494              	.L36:
 272:../Sources/TFC/TFC_CrystalClock.c ****   {
 273:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 495              		.loc 1 273 0
 496 0290 244B     		ldr	r3, .L64
 497 0292 9B79     		ldrb	r3, [r3, #6]
 498 0294 DBB2     		uxtb	r3, r3
 499 0296 1A1C     		mov	r2, r3
 500 0298 1023     		mov	r3, #16
 501 029a 1340     		and	r3, r2
 502 029c 0ED0     		beq	.L59
 503              	.L34:
 271:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 504              		.loc 1 271 0
 505 029e 3B1C     		mov	r3, r7
 506 02a0 1433     		add	r3, r3, #20
 507 02a2 3A1C     		mov	r2, r7
 508 02a4 1432     		add	r2, r2, #20
 509 02a6 1288     		ldrh	r2, [r2]
 510 02a8 0132     		add	r2, r2, #1
 511 02aa 1A80     		strh	r2, [r3]
 512              	.L33:
 271:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 513              		.loc 1 271 0 is_stmt 0
 514 02ac 3B1C     		mov	r3, r7
 515 02ae 1433     		add	r3, r3, #20
 516 02b0 0021     		mov	r1, #0
 517 02b2 5A5E     		ldrsh	r2, [r3, r1]
 518 02b4 2A4B     		ldr	r3, .L64+60
 519 02b6 9A42     		cmp	r2, r3
 520 02b8 EADD     		ble	.L36
 521 02ba 00E0     		b	.L35
 522              	.L59:
 523              		.loc 1 273 0 is_stmt 1
 524 02bc C046     		mov	r8, r8
 525              	.L35:
 274:../Sources/TFC/TFC_CrystalClock.c ****   }
 275:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 526              		.loc 1 275 0
 527 02be 194B     		ldr	r3, .L64
 528 02c0 9B79     		ldrb	r3, [r3, #6]
 529 02c2 DBB2     		uxtb	r3, r3
 530 02c4 1A1C     		mov	r2, r3
 531 02c6 1023     		mov	r3, #16
 532 02c8 1340     		and	r3, r2
 533 02ca 01D0     		beq	.L37
 534              		.loc 1 275 0 is_stmt 0
 535 02cc 1123     		mov	r3, #17
 536 02ce 30E1     		b	.L7
 537              	.L37:
 276:../Sources/TFC/TFC_CrystalClock.c **** 
 277:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for clock status bits to show clock source is ext ref clk
 278:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 538              		.loc 1 278 0 is_stmt 1
 539 02d0 3B1C     		mov	r3, r7
 540 02d2 1433     		add	r3, r3, #20
 541 02d4 0022     		mov	r2, #0
 542 02d6 1A80     		strh	r2, [r3]
 543 02d8 0FE0     		b	.L38
 544              	.L41:
 279:../Sources/TFC/TFC_CrystalClock.c ****   {
 280:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 545              		.loc 1 280 0
 546 02da 124B     		ldr	r3, .L64
 547 02dc 9B79     		ldrb	r3, [r3, #6]
 548 02de DBB2     		uxtb	r3, r3
 549 02e0 1A1C     		mov	r2, r3
 550 02e2 0C23     		mov	r3, #12
 551 02e4 1340     		and	r3, r2
 552 02e6 9B08     		lsr	r3, r3, #2
 553 02e8 022B     		cmp	r3, #2
 554 02ea 0ED0     		beq	.L60
 555              	.L39:
 278:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 556              		.loc 1 278 0
 557 02ec 3B1C     		mov	r3, r7
 558 02ee 1433     		add	r3, r3, #20
 559 02f0 3A1C     		mov	r2, r7
 560 02f2 1432     		add	r2, r2, #20
 561 02f4 1288     		ldrh	r2, [r2]
 562 02f6 0132     		add	r2, r2, #1
 563 02f8 1A80     		strh	r2, [r3]
 564              	.L38:
 278:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 565              		.loc 1 278 0 is_stmt 0
 566 02fa 3B1C     		mov	r3, r7
 567 02fc 1433     		add	r3, r3, #20
 568 02fe 0021     		mov	r1, #0
 569 0300 5A5E     		ldrsh	r2, [r3, r1]
 570 0302 174B     		ldr	r3, .L64+60
 571 0304 9A42     		cmp	r2, r3
 572 0306 E8DD     		ble	.L41
 573 0308 00E0     		b	.L40
 574              	.L60:
 575              		.loc 1 280 0 is_stmt 1
 576 030a C046     		mov	r8, r8
 577              	.L40:
 281:../Sources/TFC/TFC_CrystalClock.c ****   }
 282:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 578              		.loc 1 282 0
 579 030c 054B     		ldr	r3, .L64
 580 030e 9B79     		ldrb	r3, [r3, #6]
 581 0310 DBB2     		uxtb	r3, r3
 582 0312 1A1C     		mov	r2, r3
 583 0314 0C23     		mov	r3, #12
 584 0316 1340     		and	r3, r2
 585 0318 9B08     		lsr	r3, r3, #2
 586 031a 022B     		cmp	r3, #2
 587 031c 22D0     		beq	.L42
 588              		.loc 1 282 0 is_stmt 0
 589 031e 1A23     		mov	r3, #26
 590 0320 07E1     		b	.L7
 591              	.L65:
 592 0322 C046     		.align	2
 593              	.L64:
 594 0324 00400640 		.word	1074151424
 595 0328 80F0FA02 		.word	50000000
 596 032c BFC62D00 		.word	2999999
 597 0330 0048E801 		.word	32000000
 598 0334 7F841E00 		.word	1999999
 599 0338 00093D00 		.word	4000000
 600 033c FF6BDC02 		.word	47999999
 601 0340 00E1F505 		.word	100000000
 602 0344 00127A00 		.word	8000000
 603 0348 D0121300 		.word	1250000
 604 034c A0252600 		.word	2500000
 605 0350 404B4C00 		.word	5000000
 606 0354 80969800 		.word	10000000
 607 0358 002D3101 		.word	20000000
 608 035c 1F4E0000 		.word	19999
 609 0360 CF070000 		.word	1999
 610              	.L42:
 283:../Sources/TFC/TFC_CrystalClock.c **** 
 284:../Sources/TFC/TFC_CrystalClock.c ****   // Now in FBE
 285:../Sources/TFC/TFC_CrystalClock.c ****   // It is recommended that the clock monitor is enabled when using an external clock as the clock 
 286:../Sources/TFC/TFC_CrystalClock.c ****   // It is enabled here but can be removed if this is not required.
 287:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 611              		.loc 1 287 0 is_stmt 1
 612 0364 754B     		ldr	r3, .L66
 613 0366 754A     		ldr	r2, .L66
 614 0368 5279     		ldrb	r2, [r2, #5]
 615 036a D2B2     		uxtb	r2, r2
 616 036c 2021     		mov	r1, #32
 617 036e 0A43     		orr	r2, r1
 618 0370 D2B2     		uxtb	r2, r2
 619 0372 5A71     		strb	r2, [r3, #5]
 288:../Sources/TFC/TFC_CrystalClock.c ****   
 289:../Sources/TFC/TFC_CrystalClock.c ****   // Configure PLL
 290:../Sources/TFC/TFC_CrystalClock.c ****   // Configure MCG_C5
 291:../Sources/TFC/TFC_CrystalClock.c ****   // If the PLL is to run in STOP mode then the PLLSTEN bit needs to be OR'ed in here or in user co
 292:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C5;
 620              		.loc 1 292 0
 621 0374 714A     		ldr	r2, .L66
 622 0376 3B1C     		mov	r3, r7
 623 0378 1633     		add	r3, r3, #22
 624 037a 1279     		ldrb	r2, [r2, #4]
 625 037c 1A70     		strb	r2, [r3]
 293:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C5_PRDIV0_MASK;
 626              		.loc 1 293 0
 627 037e 3B1C     		mov	r3, r7
 628 0380 1633     		add	r3, r3, #22
 629 0382 3A1C     		mov	r2, r7
 630 0384 1632     		add	r2, r2, #22
 631 0386 1278     		ldrb	r2, [r2]
 632 0388 1F21     		mov	r1, #31
 633 038a 8A43     		bic	r2, r1
 634 038c 1A70     		strb	r2, [r3]
 294:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C5_PRDIV0(prdiv_val - 1);    //set PLL ref divider
 635              		.loc 1 294 0
 636 038e 7B1C     		add	r3, r7, #1
 637 0390 1B78     		ldrb	r3, [r3]
 638 0392 013B     		sub	r3, r3, #1
 639 0394 DAB2     		uxtb	r2, r3
 640 0396 1F23     		mov	r3, #31
 641 0398 1340     		and	r3, r2
 642 039a D9B2     		uxtb	r1, r3
 643 039c 3B1C     		mov	r3, r7
 644 039e 1633     		add	r3, r3, #22
 645 03a0 3A1C     		mov	r2, r7
 646 03a2 1632     		add	r2, r2, #22
 647 03a4 1278     		ldrb	r2, [r2]
 648 03a6 0A43     		orr	r2, r1
 649 03a8 1A70     		strb	r2, [r3]
 295:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C5 = temp_reg;
 650              		.loc 1 295 0
 651 03aa 644B     		ldr	r3, .L66
 652 03ac 3A1C     		mov	r2, r7
 653 03ae 1632     		add	r2, r2, #22
 654 03b0 1278     		ldrb	r2, [r2]
 655 03b2 1A71     		strb	r2, [r3, #4]
 296:../Sources/TFC/TFC_CrystalClock.c **** 
 297:../Sources/TFC/TFC_CrystalClock.c ****   // Configure MCG_C6
 298:../Sources/TFC/TFC_CrystalClock.c ****   // The PLLS bit is set to enable the PLL, MCGOUT still sourced from ext ref clk
 299:../Sources/TFC/TFC_CrystalClock.c ****   // The loss of lock interrupt can be enabled by seperately OR'ing in the LOLIE bit in MCG_C6
 300:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C6; // store present C6 value
 656              		.loc 1 300 0
 657 03b4 614A     		ldr	r2, .L66
 658 03b6 3B1C     		mov	r3, r7
 659 03b8 1633     		add	r3, r3, #22
 660 03ba 5279     		ldrb	r2, [r2, #5]
 661 03bc 1A70     		strb	r2, [r3]
 301:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C6_VDIV0_MASK; // clear VDIV settings
 662              		.loc 1 301 0
 663 03be 3B1C     		mov	r3, r7
 664 03c0 1633     		add	r3, r3, #22
 665 03c2 3A1C     		mov	r2, r7
 666 03c4 1632     		add	r2, r2, #22
 667 03c6 1278     		ldrb	r2, [r2]
 668 03c8 1F21     		mov	r1, #31
 669 03ca 8A43     		bic	r2, r1
 670 03cc 1A70     		strb	r2, [r3]
 302:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C6_PLLS_MASK | MCG_C6_VDIV0(vdiv_val - 24); // write new VDIV and enable PLL
 671              		.loc 1 302 0
 672 03ce 3B1C     		mov	r3, r7
 673 03d0 2033     		add	r3, r3, #32
 674 03d2 1B78     		ldrb	r3, [r3]
 675 03d4 183B     		sub	r3, r3, #24
 676 03d6 DAB2     		uxtb	r2, r3
 677 03d8 1F23     		mov	r3, #31
 678 03da 1340     		and	r3, r2
 679 03dc DAB2     		uxtb	r2, r3
 680 03de 3B1C     		mov	r3, r7
 681 03e0 1633     		add	r3, r3, #22
 682 03e2 1B78     		ldrb	r3, [r3]
 683 03e4 1343     		orr	r3, r2
 684 03e6 DAB2     		uxtb	r2, r3
 685 03e8 3B1C     		mov	r3, r7
 686 03ea 1633     		add	r3, r3, #22
 687 03ec 4021     		mov	r1, #64
 688 03ee 0A43     		orr	r2, r1
 689 03f0 1A70     		strb	r2, [r3]
 303:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 = temp_reg; // update MCG_C6
 690              		.loc 1 303 0
 691 03f2 524B     		ldr	r3, .L66
 692 03f4 3A1C     		mov	r2, r7
 693 03f6 1632     		add	r2, r2, #22
 694 03f8 1278     		ldrb	r2, [r2]
 695 03fa 5A71     		strb	r2, [r3, #5]
 304:../Sources/TFC/TFC_CrystalClock.c **** 
 305:../Sources/TFC/TFC_CrystalClock.c ****   // wait for PLLST status bit to set
 306:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 696              		.loc 1 306 0
 697 03fc 3B1C     		mov	r3, r7
 698 03fe 1433     		add	r3, r3, #20
 699 0400 0022     		mov	r2, #0
 700 0402 1A80     		strh	r2, [r3]
 701 0404 0DE0     		b	.L43
 702              	.L46:
 307:../Sources/TFC/TFC_CrystalClock.c ****   {
 308:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_PLLST_MASK) break; // jump out early if PLLST sets before loop finishes
 703              		.loc 1 308 0
 704 0406 4D4B     		ldr	r3, .L66
 705 0408 9B79     		ldrb	r3, [r3, #6]
 706 040a DBB2     		uxtb	r3, r3
 707 040c 1A1C     		mov	r2, r3
 708 040e 2023     		mov	r3, #32
 709 0410 1340     		and	r3, r2
 710 0412 0ED1     		bne	.L61
 711              	.L44:
 306:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 712              		.loc 1 306 0
 713 0414 3B1C     		mov	r3, r7
 714 0416 1433     		add	r3, r3, #20
 715 0418 3A1C     		mov	r2, r7
 716 041a 1432     		add	r2, r2, #20
 717 041c 1288     		ldrh	r2, [r2]
 718 041e 0132     		add	r2, r2, #1
 719 0420 1A80     		strh	r2, [r3]
 720              	.L43:
 306:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 721              		.loc 1 306 0 is_stmt 0
 722 0422 3B1C     		mov	r3, r7
 723 0424 1433     		add	r3, r3, #20
 724 0426 0021     		mov	r1, #0
 725 0428 5A5E     		ldrsh	r2, [r3, r1]
 726 042a 454B     		ldr	r3, .L66+4
 727 042c 9A42     		cmp	r2, r3
 728 042e EADD     		ble	.L46
 729 0430 00E0     		b	.L45
 730              	.L61:
 731              		.loc 1 308 0 is_stmt 1
 732 0432 C046     		mov	r8, r8
 733              	.L45:
 309:../Sources/TFC/TFC_CrystalClock.c ****   }
 310:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_PLLST_MASK)) return 0x16; // check bit is really set and return with error if
 734              		.loc 1 310 0
 735 0434 414B     		ldr	r3, .L66
 736 0436 9B79     		ldrb	r3, [r3, #6]
 737 0438 DBB2     		uxtb	r3, r3
 738 043a 1A1C     		mov	r2, r3
 739 043c 2023     		mov	r3, #32
 740 043e 1340     		and	r3, r2
 741 0440 01D1     		bne	.L47
 742              		.loc 1 310 0 is_stmt 0
 743 0442 1623     		mov	r3, #22
 744 0444 75E0     		b	.L7
 745              	.L47:
 311:../Sources/TFC/TFC_CrystalClock.c **** 
 312:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for LOCK bit to set
 313:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 4000 ; i++)
 746              		.loc 1 313 0 is_stmt 1
 747 0446 3B1C     		mov	r3, r7
 748 0448 1433     		add	r3, r3, #20
 749 044a 0022     		mov	r2, #0
 750 044c 1A80     		strh	r2, [r3]
 751 044e 0DE0     		b	.L48
 752              	.L51:
 314:../Sources/TFC/TFC_CrystalClock.c ****   {
 315:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
 753              		.loc 1 315 0
 754 0450 3A4B     		ldr	r3, .L66
 755 0452 9B79     		ldrb	r3, [r3, #6]
 756 0454 DBB2     		uxtb	r3, r3
 757 0456 1A1C     		mov	r2, r3
 758 0458 4023     		mov	r3, #64
 759 045a 1340     		and	r3, r2
 760 045c 0ED1     		bne	.L62
 761              	.L49:
 313:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 4000 ; i++)
 762              		.loc 1 313 0
 763 045e 3B1C     		mov	r3, r7
 764 0460 1433     		add	r3, r3, #20
 765 0462 3A1C     		mov	r2, r7
 766 0464 1432     		add	r2, r2, #20
 767 0466 1288     		ldrh	r2, [r2]
 768 0468 0132     		add	r2, r2, #1
 769 046a 1A80     		strh	r2, [r3]
 770              	.L48:
 313:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 4000 ; i++)
 771              		.loc 1 313 0 is_stmt 0
 772 046c 3B1C     		mov	r3, r7
 773 046e 1433     		add	r3, r3, #20
 774 0470 0021     		mov	r1, #0
 775 0472 5A5E     		ldrsh	r2, [r3, r1]
 776 0474 334B     		ldr	r3, .L66+8
 777 0476 9A42     		cmp	r2, r3
 778 0478 EADD     		ble	.L51
 779 047a 00E0     		b	.L50
 780              	.L62:
 781              		.loc 1 315 0 is_stmt 1
 782 047c C046     		mov	r8, r8
 783              	.L50:
 316:../Sources/TFC/TFC_CrystalClock.c ****   }
 317:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if
 784              		.loc 1 317 0
 785 047e 2F4B     		ldr	r3, .L66
 786 0480 9B79     		ldrb	r3, [r3, #6]
 787 0482 DBB2     		uxtb	r3, r3
 788 0484 1A1C     		mov	r2, r3
 789 0486 4023     		mov	r3, #64
 790 0488 1340     		and	r3, r2
 791 048a 01D1     		bne	.L52
 792              		.loc 1 317 0 is_stmt 0
 793 048c 4423     		mov	r3, #68
 794 048e 50E0     		b	.L7
 795              	.L52:
 318:../Sources/TFC/TFC_CrystalClock.c **** 
 319:../Sources/TFC/TFC_CrystalClock.c ****   // Use actual PLL settings to calculate PLL frequency
 320:../Sources/TFC/TFC_CrystalClock.c ****   prdiv = ((MCG_C5 & MCG_C5_PRDIV0_MASK) + 1);
 796              		.loc 1 320 0 is_stmt 1
 797 0490 2A4B     		ldr	r3, .L66
 798 0492 1B79     		ldrb	r3, [r3, #4]
 799 0494 DAB2     		uxtb	r2, r3
 800 0496 1F23     		mov	r3, #31
 801 0498 1340     		and	r3, r2
 802 049a DAB2     		uxtb	r2, r3
 803 049c 3B1C     		mov	r3, r7
 804 049e 0B33     		add	r3, r3, #11
 805 04a0 0132     		add	r2, r2, #1
 806 04a2 1A70     		strb	r2, [r3]
 321:../Sources/TFC/TFC_CrystalClock.c ****   vdiv = ((MCG_C6 & MCG_C6_VDIV0_MASK) + 24);
 807              		.loc 1 321 0
 808 04a4 254B     		ldr	r3, .L66
 809 04a6 5B79     		ldrb	r3, [r3, #5]
 810 04a8 DAB2     		uxtb	r2, r3
 811 04aa 1F23     		mov	r3, #31
 812 04ac 1340     		and	r3, r2
 813 04ae DAB2     		uxtb	r2, r3
 814 04b0 3B1C     		mov	r3, r7
 815 04b2 0A33     		add	r3, r3, #10
 816 04b4 1832     		add	r2, r2, #24
 817 04b6 1A70     		strb	r2, [r3]
 322:../Sources/TFC/TFC_CrystalClock.c **** 
 323:../Sources/TFC/TFC_CrystalClock.c ****   // now in PBE
 324:../Sources/TFC/TFC_CrystalClock.c **** 
 325:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 &= ~MCG_C1_CLKS_MASK; // clear CLKS to switch CLKS mux to select PLL as MCG_OUT
 818              		.loc 1 325 0
 819 04b8 204B     		ldr	r3, .L66
 820 04ba 204A     		ldr	r2, .L66
 821 04bc 1278     		ldrb	r2, [r2]
 822 04be D1B2     		uxtb	r1, r2
 823 04c0 3F22     		mov	r2, #63
 824 04c2 0A40     		and	r2, r1
 825 04c4 D2B2     		uxtb	r2, r2
 826 04c6 1A70     		strb	r2, [r3]
 326:../Sources/TFC/TFC_CrystalClock.c **** 
 327:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for clock status bits to update
 328:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 827              		.loc 1 328 0
 828 04c8 3B1C     		mov	r3, r7
 829 04ca 1433     		add	r3, r3, #20
 830 04cc 0022     		mov	r2, #0
 831 04ce 1A80     		strh	r2, [r3]
 832 04d0 0FE0     		b	.L53
 833              	.L56:
 329:../Sources/TFC/TFC_CrystalClock.c ****   {
 330:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) break; // jump out early if CLKST
 834              		.loc 1 330 0
 835 04d2 1A4B     		ldr	r3, .L66
 836 04d4 9B79     		ldrb	r3, [r3, #6]
 837 04d6 DBB2     		uxtb	r3, r3
 838 04d8 1A1C     		mov	r2, r3
 839 04da 0C23     		mov	r3, #12
 840 04dc 1340     		and	r3, r2
 841 04de 9B08     		lsr	r3, r3, #2
 842 04e0 032B     		cmp	r3, #3
 843 04e2 0ED0     		beq	.L63
 844              	.L54:
 328:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 845              		.loc 1 328 0
 846 04e4 3B1C     		mov	r3, r7
 847 04e6 1433     		add	r3, r3, #20
 848 04e8 3A1C     		mov	r2, r7
 849 04ea 1432     		add	r2, r2, #20
 850 04ec 1288     		ldrh	r2, [r2]
 851 04ee 0132     		add	r2, r2, #1
 852 04f0 1A80     		strh	r2, [r3]
 853              	.L53:
 328:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 854              		.loc 1 328 0 is_stmt 0
 855 04f2 3B1C     		mov	r3, r7
 856 04f4 1433     		add	r3, r3, #20
 857 04f6 0021     		mov	r1, #0
 858 04f8 5A5E     		ldrsh	r2, [r3, r1]
 859 04fa 114B     		ldr	r3, .L66+4
 860 04fc 9A42     		cmp	r2, r3
 861 04fe E8DD     		ble	.L56
 862 0500 00E0     		b	.L55
 863              	.L63:
 864              		.loc 1 330 0 is_stmt 1
 865 0502 C046     		mov	r8, r8
 866              	.L55:
 331:../Sources/TFC/TFC_CrystalClock.c ****   }
 332:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3) return 0x1B; // check CLKST is set 
 867              		.loc 1 332 0
 868 0504 0D4B     		ldr	r3, .L66
 869 0506 9B79     		ldrb	r3, [r3, #6]
 870 0508 DBB2     		uxtb	r3, r3
 871 050a 1A1C     		mov	r2, r3
 872 050c 0C23     		mov	r3, #12
 873 050e 1340     		and	r3, r2
 874 0510 9B08     		lsr	r3, r3, #2
 875 0512 032B     		cmp	r3, #3
 876 0514 01D0     		beq	.L57
 877              		.loc 1 332 0 is_stmt 0
 878 0516 1B23     		mov	r3, #27
 879 0518 0BE0     		b	.L7
 880              	.L57:
 333:../Sources/TFC/TFC_CrystalClock.c **** 
 334:../Sources/TFC/TFC_CrystalClock.c ****   // Now in PEE
 335:../Sources/TFC/TFC_CrystalClock.c ****   
 336:../Sources/TFC/TFC_CrystalClock.c ****   return ((crystal_val / prdiv) * vdiv); //MCGOUT equals PLL output frequency
 881              		.loc 1 336 0 is_stmt 1
 882 051a 3B1C     		mov	r3, r7
 883 051c 0B33     		add	r3, r3, #11
 884 051e 1B78     		ldrb	r3, [r3]
 885 0520 7868     		ldr	r0, [r7, #4]
 886 0522 191C     		mov	r1, r3
 887 0524 FFF7FEFF 		bl	__aeabi_idiv
 888 0528 031C     		mov	r3, r0
 889 052a 3A1C     		mov	r2, r7
 890 052c 0A32     		add	r2, r2, #10
 891 052e 1278     		ldrb	r2, [r2]
 892 0530 5343     		mul	r3, r2
 893              	.L7:
 337:../Sources/TFC/TFC_CrystalClock.c **** } // pll_init
 894              		.loc 1 337 0
 895 0532 181C     		mov	r0, r3
 896 0534 BD46     		mov	sp, r7
 897 0536 06B0     		add	sp, sp, #24
 898              		@ sp needed for prologue
 899 0538 80BD     		pop	{r7, pc}
 900              	.L67:
 901 053a C046     		.align	2
 902              	.L66:
 903 053c 00400640 		.word	1074151424
 904 0540 CF070000 		.word	1999
 905 0544 9F0F0000 		.word	3999
 906              		.cfi_endproc
 907              	.LFE1:
 909              		.section	.text.pee_pbe,"ax",%progbits
 910              		.align	2
 911              		.global	pee_pbe
 912              		.code	16
 913              		.thumb_func
 915              	pee_pbe:
 916              	.LFB2:
 338:../Sources/TFC/TFC_CrystalClock.c **** 
 339:../Sources/TFC/TFC_CrystalClock.c **** 
 340:../Sources/TFC/TFC_CrystalClock.c **** 
 341:../Sources/TFC/TFC_CrystalClock.c **** 
 342:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
 343:../Sources/TFC/TFC_CrystalClock.c **** 
 344:../Sources/TFC/TFC_CrystalClock.c **** int pee_pbe(int crystal_val)
 345:../Sources/TFC/TFC_CrystalClock.c **** {
 917              		.loc 1 345 0
 918              		.cfi_startproc
 919 0000 80B5     		push	{r7, lr}
 920              	.LCFI6:
 921              		.cfi_def_cfa_offset 8
 922              		.cfi_offset 7, -8
 923              		.cfi_offset 14, -4
 924 0002 84B0     		sub	sp, sp, #16
 925              	.LCFI7:
 926              		.cfi_def_cfa_offset 24
 927 0004 00AF     		add	r7, sp, #0
 928              	.LCFI8:
 929              		.cfi_def_cfa_register 7
 930 0006 7860     		str	r0, [r7, #4]
 346:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 347:../Sources/TFC/TFC_CrystalClock.c ****   
 348:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in PEE mode
 349:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selcted
 931              		.loc 1 349 0
 932 0008 274B     		ldr	r3, .L78
 933 000a 9B79     		ldrb	r3, [r3, #6]
 934 000c DBB2     		uxtb	r3, r3
 935 000e 1A1C     		mov	r2, r3
 936 0010 0C23     		mov	r3, #12
 937 0012 1340     		and	r3, r2
 938 0014 9B08     		lsr	r3, r3, #2
 939 0016 032B     		cmp	r3, #3
 940 0018 0DD1     		bne	.L69
 350:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 941              		.loc 1 350 0
 942 001a 234B     		ldr	r3, .L78
 943 001c 9B79     		ldrb	r3, [r3, #6]
 944 001e DBB2     		uxtb	r3, r3
 945 0020 1A1C     		mov	r2, r3
 946 0022 1023     		mov	r3, #16
 947 0024 1340     		and	r3, r2
 349:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selcted
 948              		.loc 1 349 0
 949 0026 06D1     		bne	.L69
 351:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_PLLST_MASK)))                                    // check PLLS mux has selecte
 950              		.loc 1 351 0
 951 0028 1F4B     		ldr	r3, .L78
 952 002a 9B79     		ldrb	r3, [r3, #6]
 953 002c DBB2     		uxtb	r3, r3
 954 002e 1A1C     		mov	r2, r3
 955 0030 2023     		mov	r3, #32
 956 0032 1340     		and	r3, r2
 349:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selcted
 957              		.loc 1 349 0
 958 0034 01D1     		bne	.L70
 959              	.L69:
 352:../Sources/TFC/TFC_CrystalClock.c ****   {
 353:../Sources/TFC/TFC_CrystalClock.c ****     return 0x8;                                                       // return error code
 960              		.loc 1 353 0
 961 0036 0823     		mov	r3, #8
 962 0038 32E0     		b	.L71
 963              	.L70:
 354:../Sources/TFC/TFC_CrystalClock.c ****   } 
 355:../Sources/TFC/TFC_CrystalClock.c ****   
 356:../Sources/TFC/TFC_CrystalClock.c **** // As we are running from the PLL by default the PLL and external clock settings are valid
 357:../Sources/TFC/TFC_CrystalClock.c **** // To move to PBE from PEE simply requires the switching of the CLKS mux to select the ext clock 
 358:../Sources/TFC/TFC_CrystalClock.c **** // As CLKS is already 0 the CLKS value can simply be OR'ed into the register 
 359:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 |= MCG_C1_CLKS(2); // switch CLKS mux to select external reference clock as MCG_OUT
 964              		.loc 1 359 0
 965 003a 1B4B     		ldr	r3, .L78
 966 003c 1A4A     		ldr	r2, .L78
 967 003e 1278     		ldrb	r2, [r2]
 968 0040 D2B2     		uxtb	r2, r2
 969 0042 8021     		mov	r1, #128
 970 0044 4942     		neg	r1, r1
 971 0046 0A43     		orr	r2, r1
 972 0048 D2B2     		uxtb	r2, r2
 973 004a 1A70     		strb	r2, [r3]
 360:../Sources/TFC/TFC_CrystalClock.c ****   
 361:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to update 
 362:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 974              		.loc 1 362 0
 975 004c 3B1C     		mov	r3, r7
 976 004e 0E33     		add	r3, r3, #14
 977 0050 0022     		mov	r2, #0
 978 0052 1A80     		strh	r2, [r3]
 979 0054 0FE0     		b	.L72
 980              	.L75:
 363:../Sources/TFC/TFC_CrystalClock.c ****   {
 364:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 981              		.loc 1 364 0
 982 0056 144B     		ldr	r3, .L78
 983 0058 9B79     		ldrb	r3, [r3, #6]
 984 005a DBB2     		uxtb	r3, r3
 985 005c 1A1C     		mov	r2, r3
 986 005e 0C23     		mov	r3, #12
 987 0060 1340     		and	r3, r2
 988 0062 9B08     		lsr	r3, r3, #2
 989 0064 022B     		cmp	r3, #2
 990 0066 0ED0     		beq	.L77
 991              	.L73:
 362:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 992              		.loc 1 362 0
 993 0068 3B1C     		mov	r3, r7
 994 006a 0E33     		add	r3, r3, #14
 995 006c 3A1C     		mov	r2, r7
 996 006e 0E32     		add	r2, r2, #14
 997 0070 1288     		ldrh	r2, [r2]
 998 0072 0132     		add	r2, r2, #1
 999 0074 1A80     		strh	r2, [r3]
 1000              	.L72:
 362:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1001              		.loc 1 362 0 is_stmt 0
 1002 0076 3B1C     		mov	r3, r7
 1003 0078 0E33     		add	r3, r3, #14
 1004 007a 0021     		mov	r1, #0
 1005 007c 5A5E     		ldrsh	r2, [r3, r1]
 1006 007e 0B4B     		ldr	r3, .L78+4
 1007 0080 9A42     		cmp	r2, r3
 1008 0082 E8DD     		ble	.L75
 1009 0084 00E0     		b	.L74
 1010              	.L77:
 1011              		.loc 1 364 0 is_stmt 1
 1012 0086 C046     		mov	r8, r8
 1013              	.L74:
 365:../Sources/TFC/TFC_CrystalClock.c ****   }
 366:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 1014              		.loc 1 366 0
 1015 0088 074B     		ldr	r3, .L78
 1016 008a 9B79     		ldrb	r3, [r3, #6]
 1017 008c DBB2     		uxtb	r3, r3
 1018 008e 1A1C     		mov	r2, r3
 1019 0090 0C23     		mov	r3, #12
 1020 0092 1340     		and	r3, r2
 1021 0094 9B08     		lsr	r3, r3, #2
 1022 0096 022B     		cmp	r3, #2
 1023 0098 01D0     		beq	.L76
 1024              		.loc 1 366 0 is_stmt 0
 1025 009a 1A23     		mov	r3, #26
 1026 009c 00E0     		b	.L71
 1027              	.L76:
 367:../Sources/TFC/TFC_CrystalClock.c **** 
 368:../Sources/TFC/TFC_CrystalClock.c **** // Now in PBE mode  
 369:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency
 1028              		.loc 1 369 0 is_stmt 1
 1029 009e 7B68     		ldr	r3, [r7, #4]
 1030              	.L71:
 370:../Sources/TFC/TFC_CrystalClock.c **** } // pee_pbe
 1031              		.loc 1 370 0
 1032 00a0 181C     		mov	r0, r3
 1033 00a2 BD46     		mov	sp, r7
 1034 00a4 04B0     		add	sp, sp, #16
 1035              		@ sp needed for prologue
 1036 00a6 80BD     		pop	{r7, pc}
 1037              	.L79:
 1038              		.align	2
 1039              	.L78:
 1040 00a8 00400640 		.word	1074151424
 1041 00ac CF070000 		.word	1999
 1042              		.cfi_endproc
 1043              	.LFE2:
 1045              		.section	.text.pbe_pee,"ax",%progbits
 1046              		.align	2
 1047              		.global	pbe_pee
 1048              		.code	16
 1049              		.thumb_func
 1051              	pbe_pee:
 1052              	.LFB3:
 371:../Sources/TFC/TFC_CrystalClock.c **** 
 372:../Sources/TFC/TFC_CrystalClock.c **** 
 373:../Sources/TFC/TFC_CrystalClock.c **** int pbe_pee(int crystal_val)
 374:../Sources/TFC/TFC_CrystalClock.c **** {
 1053              		.loc 1 374 0
 1054              		.cfi_startproc
 1055 0000 80B5     		push	{r7, lr}
 1056              	.LCFI9:
 1057              		.cfi_def_cfa_offset 8
 1058              		.cfi_offset 7, -8
 1059              		.cfi_offset 14, -4
 1060 0002 84B0     		sub	sp, sp, #16
 1061              	.LCFI10:
 1062              		.cfi_def_cfa_offset 24
 1063 0004 00AF     		add	r7, sp, #0
 1064              	.LCFI11:
 1065              		.cfi_def_cfa_register 7
 1066 0006 7860     		str	r0, [r7, #4]
 375:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char prdiv, vdiv;
 376:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 377:../Sources/TFC/TFC_CrystalClock.c **** 
 378:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in PBE mode
 379:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1067              		.loc 1 379 0
 1068 0008 4C4B     		ldr	r3, .L96
 1069 000a 9B79     		ldrb	r3, [r3, #6]
 1070 000c DBB2     		uxtb	r3, r3
 1071 000e 1A1C     		mov	r2, r3
 1072 0010 0C23     		mov	r3, #12
 1073 0012 1340     		and	r3, r2
 1074 0014 9B08     		lsr	r3, r3, #2
 1075 0016 022B     		cmp	r3, #2
 1076 0018 14D1     		bne	.L81
 380:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1077              		.loc 1 380 0
 1078 001a 484B     		ldr	r3, .L96
 1079 001c 9B79     		ldrb	r3, [r3, #6]
 1080 001e DBB2     		uxtb	r3, r3
 1081 0020 1A1C     		mov	r2, r3
 1082 0022 1023     		mov	r3, #16
 1083 0024 1340     		and	r3, r2
 379:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1084              		.loc 1 379 0
 1085 0026 0DD1     		bne	.L81
 381:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_PLLST_MASK) &&                                   // check PLLS mux has selecte
 1086              		.loc 1 381 0
 1087 0028 444B     		ldr	r3, .L96
 1088 002a 9B79     		ldrb	r3, [r3, #6]
 1089 002c DBB2     		uxtb	r3, r3
 1090 002e 1A1C     		mov	r2, r3
 1091 0030 2023     		mov	r3, #32
 1092 0032 1340     		and	r3, r2
 380:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1093              		.loc 1 380 0
 1094 0034 06D0     		beq	.L81
 382:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 1095              		.loc 1 382 0
 1096 0036 414B     		ldr	r3, .L96
 1097 0038 5B78     		ldrb	r3, [r3, #1]
 1098 003a DBB2     		uxtb	r3, r3
 1099 003c 1A1C     		mov	r2, r3
 1100 003e 0223     		mov	r3, #2
 1101 0040 1340     		and	r3, r2
 379:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1102              		.loc 1 379 0
 1103 0042 01D0     		beq	.L82
 1104              	.L81:
 383:../Sources/TFC/TFC_CrystalClock.c ****   {
 384:../Sources/TFC/TFC_CrystalClock.c ****     return 0x7;                                                       // return error code
 1105              		.loc 1 384 0
 1106 0044 0723     		mov	r3, #7
 1107 0046 75E0     		b	.L83
 1108              	.L82:
 385:../Sources/TFC/TFC_CrystalClock.c ****   }
 386:../Sources/TFC/TFC_CrystalClock.c **** 
 387:../Sources/TFC/TFC_CrystalClock.c ****   // As the PLL settings have already been checked when PBE mode was enterred they are not checked 
 388:../Sources/TFC/TFC_CrystalClock.c **** 
 389:../Sources/TFC/TFC_CrystalClock.c ****   // Check the PLL state before transitioning to PEE mode
 390:../Sources/TFC/TFC_CrystalClock.c ****   
 391:../Sources/TFC/TFC_CrystalClock.c ****   // Check LOCK bit is set before transitioning MCG to PLL output (already checked in fbe_pbe but g
 392:../Sources/TFC/TFC_CrystalClock.c ****   // to re-check before switch to use PLL)
 393:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1109              		.loc 1 393 0
 1110 0048 3B1C     		mov	r3, r7
 1111 004a 0E33     		add	r3, r3, #14
 1112 004c 0022     		mov	r2, #0
 1113 004e 1A80     		strh	r2, [r3]
 1114 0050 0DE0     		b	.L84
 1115              	.L87:
 394:../Sources/TFC/TFC_CrystalClock.c ****   {
 395:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
 1116              		.loc 1 395 0
 1117 0052 3A4B     		ldr	r3, .L96
 1118 0054 9B79     		ldrb	r3, [r3, #6]
 1119 0056 DBB2     		uxtb	r3, r3
 1120 0058 1A1C     		mov	r2, r3
 1121 005a 4023     		mov	r3, #64
 1122 005c 1340     		and	r3, r2
 1123 005e 0ED1     		bne	.L94
 1124              	.L85:
 393:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1125              		.loc 1 393 0
 1126 0060 3B1C     		mov	r3, r7
 1127 0062 0E33     		add	r3, r3, #14
 1128 0064 3A1C     		mov	r2, r7
 1129 0066 0E32     		add	r2, r2, #14
 1130 0068 1288     		ldrh	r2, [r2]
 1131 006a 0132     		add	r2, r2, #1
 1132 006c 1A80     		strh	r2, [r3]
 1133              	.L84:
 393:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1134              		.loc 1 393 0 is_stmt 0
 1135 006e 3B1C     		mov	r3, r7
 1136 0070 0E33     		add	r3, r3, #14
 1137 0072 0021     		mov	r1, #0
 1138 0074 5A5E     		ldrsh	r2, [r3, r1]
 1139 0076 324B     		ldr	r3, .L96+4
 1140 0078 9A42     		cmp	r2, r3
 1141 007a EADD     		ble	.L87
 1142 007c 00E0     		b	.L86
 1143              	.L94:
 1144              		.loc 1 395 0 is_stmt 1
 1145 007e C046     		mov	r8, r8
 1146              	.L86:
 396:../Sources/TFC/TFC_CrystalClock.c ****   }
 397:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if
 1147              		.loc 1 397 0
 1148 0080 2E4B     		ldr	r3, .L96
 1149 0082 9B79     		ldrb	r3, [r3, #6]
 1150 0084 DBB2     		uxtb	r3, r3
 1151 0086 1A1C     		mov	r2, r3
 1152 0088 4023     		mov	r3, #64
 1153 008a 1340     		and	r3, r2
 1154 008c 01D1     		bne	.L88
 1155              		.loc 1 397 0 is_stmt 0
 1156 008e 4423     		mov	r3, #68
 1157 0090 50E0     		b	.L83
 1158              	.L88:
 398:../Sources/TFC/TFC_CrystalClock.c ****   // Use actual PLL settings to calculate PLL frequency
 399:../Sources/TFC/TFC_CrystalClock.c ****   prdiv = ((MCG_C5 & MCG_C5_PRDIV0_MASK) + 1);
 1159              		.loc 1 399 0 is_stmt 1
 1160 0092 2A4B     		ldr	r3, .L96
 1161 0094 1B79     		ldrb	r3, [r3, #4]
 1162 0096 DAB2     		uxtb	r2, r3
 1163 0098 1F23     		mov	r3, #31
 1164 009a 1340     		and	r3, r2
 1165 009c DAB2     		uxtb	r2, r3
 1166 009e 3B1C     		mov	r3, r7
 1167 00a0 0D33     		add	r3, r3, #13
 1168 00a2 0132     		add	r2, r2, #1
 1169 00a4 1A70     		strb	r2, [r3]
 400:../Sources/TFC/TFC_CrystalClock.c ****   vdiv = ((MCG_C6 & MCG_C6_VDIV0_MASK) + 24);
 1170              		.loc 1 400 0
 1171 00a6 254B     		ldr	r3, .L96
 1172 00a8 5B79     		ldrb	r3, [r3, #5]
 1173 00aa DAB2     		uxtb	r2, r3
 1174 00ac 1F23     		mov	r3, #31
 1175 00ae 1340     		and	r3, r2
 1176 00b0 DAB2     		uxtb	r2, r3
 1177 00b2 3B1C     		mov	r3, r7
 1178 00b4 0C33     		add	r3, r3, #12
 1179 00b6 1832     		add	r2, r2, #24
 1180 00b8 1A70     		strb	r2, [r3]
 401:../Sources/TFC/TFC_CrystalClock.c ****   
 402:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 &= ~MCG_C1_CLKS_MASK; // clear CLKS to switch CLKS mux to select PLL as MCG_OUT
 1181              		.loc 1 402 0
 1182 00ba 204B     		ldr	r3, .L96
 1183 00bc 1F4A     		ldr	r2, .L96
 1184 00be 1278     		ldrb	r2, [r2]
 1185 00c0 D1B2     		uxtb	r1, r2
 1186 00c2 3F22     		mov	r2, #63
 1187 00c4 0A40     		and	r2, r1
 1188 00c6 D2B2     		uxtb	r2, r2
 1189 00c8 1A70     		strb	r2, [r3]
 403:../Sources/TFC/TFC_CrystalClock.c **** 
 404:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for clock status bits to update
 405:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1190              		.loc 1 405 0
 1191 00ca 3B1C     		mov	r3, r7
 1192 00cc 0E33     		add	r3, r3, #14
 1193 00ce 0022     		mov	r2, #0
 1194 00d0 1A80     		strh	r2, [r3]
 1195 00d2 0FE0     		b	.L89
 1196              	.L92:
 406:../Sources/TFC/TFC_CrystalClock.c ****   {
 407:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) break; // jump out early if CLKST
 1197              		.loc 1 407 0
 1198 00d4 194B     		ldr	r3, .L96
 1199 00d6 9B79     		ldrb	r3, [r3, #6]
 1200 00d8 DBB2     		uxtb	r3, r3
 1201 00da 1A1C     		mov	r2, r3
 1202 00dc 0C23     		mov	r3, #12
 1203 00de 1340     		and	r3, r2
 1204 00e0 9B08     		lsr	r3, r3, #2
 1205 00e2 032B     		cmp	r3, #3
 1206 00e4 0ED0     		beq	.L95
 1207              	.L90:
 405:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1208              		.loc 1 405 0
 1209 00e6 3B1C     		mov	r3, r7
 1210 00e8 0E33     		add	r3, r3, #14
 1211 00ea 3A1C     		mov	r2, r7
 1212 00ec 0E32     		add	r2, r2, #14
 1213 00ee 1288     		ldrh	r2, [r2]
 1214 00f0 0132     		add	r2, r2, #1
 1215 00f2 1A80     		strh	r2, [r3]
 1216              	.L89:
 405:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1217              		.loc 1 405 0 is_stmt 0
 1218 00f4 3B1C     		mov	r3, r7
 1219 00f6 0E33     		add	r3, r3, #14
 1220 00f8 0021     		mov	r1, #0
 1221 00fa 5A5E     		ldrsh	r2, [r3, r1]
 1222 00fc 104B     		ldr	r3, .L96+4
 1223 00fe 9A42     		cmp	r2, r3
 1224 0100 E8DD     		ble	.L92
 1225 0102 00E0     		b	.L91
 1226              	.L95:
 1227              		.loc 1 407 0 is_stmt 1
 1228 0104 C046     		mov	r8, r8
 1229              	.L91:
 408:../Sources/TFC/TFC_CrystalClock.c ****   }
 409:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3) return 0x1B; // check CLKST is set 
 1230              		.loc 1 409 0
 1231 0106 0D4B     		ldr	r3, .L96
 1232 0108 9B79     		ldrb	r3, [r3, #6]
 1233 010a DBB2     		uxtb	r3, r3
 1234 010c 1A1C     		mov	r2, r3
 1235 010e 0C23     		mov	r3, #12
 1236 0110 1340     		and	r3, r2
 1237 0112 9B08     		lsr	r3, r3, #2
 1238 0114 032B     		cmp	r3, #3
 1239 0116 01D0     		beq	.L93
 1240              		.loc 1 409 0 is_stmt 0
 1241 0118 1B23     		mov	r3, #27
 1242 011a 0BE0     		b	.L83
 1243              	.L93:
 410:../Sources/TFC/TFC_CrystalClock.c **** 
 411:../Sources/TFC/TFC_CrystalClock.c ****   // Now in PEE
 412:../Sources/TFC/TFC_CrystalClock.c ****   return ((crystal_val / prdiv) * vdiv); //MCGOUT equals PLL output frequency
 1244              		.loc 1 412 0 is_stmt 1
 1245 011c 3B1C     		mov	r3, r7
 1246 011e 0D33     		add	r3, r3, #13
 1247 0120 1B78     		ldrb	r3, [r3]
 1248 0122 7868     		ldr	r0, [r7, #4]
 1249 0124 191C     		mov	r1, r3
 1250 0126 FFF7FEFF 		bl	__aeabi_idiv
 1251 012a 031C     		mov	r3, r0
 1252 012c 3A1C     		mov	r2, r7
 1253 012e 0C32     		add	r2, r2, #12
 1254 0130 1278     		ldrb	r2, [r2]
 1255 0132 5343     		mul	r3, r2
 1256              	.L83:
 413:../Sources/TFC/TFC_CrystalClock.c ****   
 414:../Sources/TFC/TFC_CrystalClock.c **** }  // pbe_pee
 1257              		.loc 1 414 0
 1258 0134 181C     		mov	r0, r3
 1259 0136 BD46     		mov	sp, r7
 1260 0138 04B0     		add	sp, sp, #16
 1261              		@ sp needed for prologue
 1262 013a 80BD     		pop	{r7, pc}
 1263              	.L97:
 1264              		.align	2
 1265              	.L96:
 1266 013c 00400640 		.word	1074151424
 1267 0140 CF070000 		.word	1999
 1268              		.cfi_endproc
 1269              	.LFE3:
 1271              		.section	.text.pbe_fbe,"ax",%progbits
 1272              		.align	2
 1273              		.global	pbe_fbe
 1274              		.code	16
 1275              		.thumb_func
 1277              	pbe_fbe:
 1278              	.LFB4:
 415:../Sources/TFC/TFC_CrystalClock.c **** 
 416:../Sources/TFC/TFC_CrystalClock.c **** 
 417:../Sources/TFC/TFC_CrystalClock.c **** int pbe_fbe(int crystal_val)
 418:../Sources/TFC/TFC_CrystalClock.c **** {
 1279              		.loc 1 418 0
 1280              		.cfi_startproc
 1281 0000 80B5     		push	{r7, lr}
 1282              	.LCFI12:
 1283              		.cfi_def_cfa_offset 8
 1284              		.cfi_offset 7, -8
 1285              		.cfi_offset 14, -4
 1286 0002 84B0     		sub	sp, sp, #16
 1287              	.LCFI13:
 1288              		.cfi_def_cfa_offset 24
 1289 0004 00AF     		add	r7, sp, #0
 1290              	.LCFI14:
 1291              		.cfi_def_cfa_register 7
 1292 0006 7860     		str	r0, [r7, #4]
 419:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 420:../Sources/TFC/TFC_CrystalClock.c ****   
 421:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in PBE mode
 422:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1293              		.loc 1 422 0
 1294 0008 284B     		ldr	r3, .L108
 1295 000a 9B79     		ldrb	r3, [r3, #6]
 1296 000c DBB2     		uxtb	r3, r3
 1297 000e 1A1C     		mov	r2, r3
 1298 0010 0C23     		mov	r3, #12
 1299 0012 1340     		and	r3, r2
 1300 0014 9B08     		lsr	r3, r3, #2
 1301 0016 022B     		cmp	r3, #2
 1302 0018 14D1     		bne	.L99
 423:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1303              		.loc 1 423 0
 1304 001a 244B     		ldr	r3, .L108
 1305 001c 9B79     		ldrb	r3, [r3, #6]
 1306 001e DBB2     		uxtb	r3, r3
 1307 0020 1A1C     		mov	r2, r3
 1308 0022 1023     		mov	r3, #16
 1309 0024 1340     		and	r3, r2
 422:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1310              		.loc 1 422 0
 1311 0026 0DD1     		bne	.L99
 424:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_PLLST_MASK) &&                                   // check PLLS mux has selecte
 1312              		.loc 1 424 0
 1313 0028 204B     		ldr	r3, .L108
 1314 002a 9B79     		ldrb	r3, [r3, #6]
 1315 002c DBB2     		uxtb	r3, r3
 1316 002e 1A1C     		mov	r2, r3
 1317 0030 2023     		mov	r3, #32
 1318 0032 1340     		and	r3, r2
 423:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1319              		.loc 1 423 0
 1320 0034 06D0     		beq	.L99
 425:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 1321              		.loc 1 425 0
 1322 0036 1D4B     		ldr	r3, .L108
 1323 0038 5B78     		ldrb	r3, [r3, #1]
 1324 003a DBB2     		uxtb	r3, r3
 1325 003c 1A1C     		mov	r2, r3
 1326 003e 0223     		mov	r3, #2
 1327 0040 1340     		and	r3, r2
 422:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1328              		.loc 1 422 0
 1329 0042 01D0     		beq	.L100
 1330              	.L99:
 426:../Sources/TFC/TFC_CrystalClock.c ****   {
 427:../Sources/TFC/TFC_CrystalClock.c ****     return 0x7;                                                       // return error code
 1331              		.loc 1 427 0
 1332 0044 0723     		mov	r3, #7
 1333 0046 2DE0     		b	.L101
 1334              	.L100:
 428:../Sources/TFC/TFC_CrystalClock.c ****   }
 429:../Sources/TFC/TFC_CrystalClock.c **** 
 430:../Sources/TFC/TFC_CrystalClock.c **** // As we are running from the ext clock, by default the external clock settings are valid
 431:../Sources/TFC/TFC_CrystalClock.c **** // To move to FBE from PBE simply requires the switching of the PLLS mux to disable the PLL 
 432:../Sources/TFC/TFC_CrystalClock.c ****   
 433:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_PLLS_MASK; // clear PLLS to disable PLL, still clocked from ext ref clk
 1335              		.loc 1 433 0
 1336 0048 184B     		ldr	r3, .L108
 1337 004a 184A     		ldr	r2, .L108
 1338 004c 5279     		ldrb	r2, [r2, #5]
 1339 004e D2B2     		uxtb	r2, r2
 1340 0050 4021     		mov	r1, #64
 1341 0052 8A43     		bic	r2, r1
 1342 0054 D2B2     		uxtb	r2, r2
 1343 0056 5A71     		strb	r2, [r3, #5]
 434:../Sources/TFC/TFC_CrystalClock.c ****   
 435:../Sources/TFC/TFC_CrystalClock.c **** // wait for PLLST status bit to set
 436:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1344              		.loc 1 436 0
 1345 0058 3B1C     		mov	r3, r7
 1346 005a 0E33     		add	r3, r3, #14
 1347 005c 0022     		mov	r2, #0
 1348 005e 1A80     		strh	r2, [r3]
 1349 0060 0DE0     		b	.L102
 1350              	.L105:
 437:../Sources/TFC/TFC_CrystalClock.c ****   {
 438:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_PLLST_MASK)) break; // jump out early if PLLST clears before loop finishes
 1351              		.loc 1 438 0
 1352 0062 124B     		ldr	r3, .L108
 1353 0064 9B79     		ldrb	r3, [r3, #6]
 1354 0066 DBB2     		uxtb	r3, r3
 1355 0068 1A1C     		mov	r2, r3
 1356 006a 2023     		mov	r3, #32
 1357 006c 1340     		and	r3, r2
 1358 006e 0ED0     		beq	.L107
 1359              	.L103:
 436:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1360              		.loc 1 436 0
 1361 0070 3B1C     		mov	r3, r7
 1362 0072 0E33     		add	r3, r3, #14
 1363 0074 3A1C     		mov	r2, r7
 1364 0076 0E32     		add	r2, r2, #14
 1365 0078 1288     		ldrh	r2, [r2]
 1366 007a 0132     		add	r2, r2, #1
 1367 007c 1A80     		strh	r2, [r3]
 1368              	.L102:
 436:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1369              		.loc 1 436 0 is_stmt 0
 1370 007e 3B1C     		mov	r3, r7
 1371 0080 0E33     		add	r3, r3, #14
 1372 0082 0021     		mov	r1, #0
 1373 0084 5A5E     		ldrsh	r2, [r3, r1]
 1374 0086 0A4B     		ldr	r3, .L108+4
 1375 0088 9A42     		cmp	r2, r3
 1376 008a EADD     		ble	.L105
 1377 008c 00E0     		b	.L104
 1378              	.L107:
 1379              		.loc 1 438 0 is_stmt 1
 1380 008e C046     		mov	r8, r8
 1381              	.L104:
 439:../Sources/TFC/TFC_CrystalClock.c ****   }
 440:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_PLLST_MASK) return 0x15; // check bit is really clear and return with error if 
 1382              		.loc 1 440 0
 1383 0090 064B     		ldr	r3, .L108
 1384 0092 9B79     		ldrb	r3, [r3, #6]
 1385 0094 DBB2     		uxtb	r3, r3
 1386 0096 1A1C     		mov	r2, r3
 1387 0098 2023     		mov	r3, #32
 1388 009a 1340     		and	r3, r2
 1389 009c 01D0     		beq	.L106
 1390              		.loc 1 440 0 is_stmt 0
 1391 009e 1523     		mov	r3, #21
 1392 00a0 00E0     		b	.L101
 1393              	.L106:
 441:../Sources/TFC/TFC_CrystalClock.c **** 
 442:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE mode  
 443:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency 
 1394              		.loc 1 443 0 is_stmt 1
 1395 00a2 7B68     		ldr	r3, [r7, #4]
 1396              	.L101:
 444:../Sources/TFC/TFC_CrystalClock.c **** } // pbe_fbe
 1397              		.loc 1 444 0
 1398 00a4 181C     		mov	r0, r3
 1399 00a6 BD46     		mov	sp, r7
 1400 00a8 04B0     		add	sp, sp, #16
 1401              		@ sp needed for prologue
 1402 00aa 80BD     		pop	{r7, pc}
 1403              	.L109:
 1404              		.align	2
 1405              	.L108:
 1406 00ac 00400640 		.word	1074151424
 1407 00b0 CF070000 		.word	1999
 1408              		.cfi_endproc
 1409              	.LFE4:
 1411              		.section	.text.fbe_pbe,"ax",%progbits
 1412              		.align	2
 1413              		.global	fbe_pbe
 1414              		.code	16
 1415              		.thumb_func
 1417              	fbe_pbe:
 1418              	.LFB5:
 445:../Sources/TFC/TFC_CrystalClock.c **** 
 446:../Sources/TFC/TFC_CrystalClock.c **** 
 447:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
 448:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : fbe_pbe
 449:../Sources/TFC/TFC_CrystalClock.c ****  *
 450:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: FBE to PBE mode
 451:../Sources/TFC/TFC_CrystalClock.c ****  *
 452:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from FBE mode to PBE mode. 
 453:../Sources/TFC/TFC_CrystalClock.c ****  * This function presently only supports OSC0 and PLL0. Support for OSC1 and PLL1 will be added soo
 454:../Sources/TFC/TFC_CrystalClock.c ****  * The function requires the desired OSC and PLL be passed in to it for compatibility with the
 455:../Sources/TFC/TFC_CrystalClock.c ****  * future support of OSC/PLL selection
 456:../Sources/TFC/TFC_CrystalClock.c ****  *
 457:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: crystal_val - external clock frequency in Hz
 458:../Sources/TFC/TFC_CrystalClock.c ****  *             prdiv_val   - value to divide the external clock source by to create the desired
 459:../Sources/TFC/TFC_CrystalClock.c ****  *                           PLL reference clock frequency
 460:../Sources/TFC/TFC_CrystalClock.c ****  *             vdiv_val    - value to multiply the PLL reference clock frequency by
 461:../Sources/TFC/TFC_CrystalClock.c ****  *
 462:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGCLKOUT frequency (Hz) or error code
 463:../Sources/TFC/TFC_CrystalClock.c ****  */
 464:../Sources/TFC/TFC_CrystalClock.c **** int fbe_pbe(int crystal_val, signed char prdiv_val, signed char vdiv_val)
 465:../Sources/TFC/TFC_CrystalClock.c **** {
 1419              		.loc 1 465 0
 1420              		.cfi_startproc
 1421 0000 80B5     		push	{r7, lr}
 1422              	.LCFI15:
 1423              		.cfi_def_cfa_offset 8
 1424              		.cfi_offset 7, -8
 1425              		.cfi_offset 14, -4
 1426 0002 86B0     		sub	sp, sp, #24
 1427              	.LCFI16:
 1428              		.cfi_def_cfa_offset 32
 1429 0004 00AF     		add	r7, sp, #0
 1430              	.LCFI17:
 1431              		.cfi_def_cfa_register 7
 1432 0006 7860     		str	r0, [r7, #4]
 1433 0008 FB1C     		add	r3, r7, #3
 1434 000a 1970     		strb	r1, [r3]
 1435 000c BB1C     		add	r3, r7, #2
 1436 000e 1A70     		strb	r2, [r3]
 466:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 467:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 468:../Sources/TFC/TFC_CrystalClock.c ****   int pll_freq;
 469:../Sources/TFC/TFC_CrystalClock.c ****   
 470:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 471:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1437              		.loc 1 471 0
 1438 0010 7D4B     		ldr	r3, .L134
 1439 0012 9B79     		ldrb	r3, [r3, #6]
 1440 0014 DBB2     		uxtb	r3, r3
 1441 0016 1A1C     		mov	r2, r3
 1442 0018 0C23     		mov	r3, #12
 1443 001a 1340     		and	r3, r2
 1444 001c 9B08     		lsr	r3, r3, #2
 1445 001e 022B     		cmp	r3, #2
 1446 0020 14D1     		bne	.L111
 472:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1447              		.loc 1 472 0
 1448 0022 794B     		ldr	r3, .L134
 1449 0024 9B79     		ldrb	r3, [r3, #6]
 1450 0026 DBB2     		uxtb	r3, r3
 1451 0028 1A1C     		mov	r2, r3
 1452 002a 1023     		mov	r3, #16
 1453 002c 1340     		and	r3, r2
 471:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1454              		.loc 1 471 0
 1455 002e 0DD1     		bne	.L111
 473:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 1456              		.loc 1 473 0
 1457 0030 754B     		ldr	r3, .L134
 1458 0032 9B79     		ldrb	r3, [r3, #6]
 1459 0034 DBB2     		uxtb	r3, r3
 1460 0036 1A1C     		mov	r2, r3
 1461 0038 2023     		mov	r3, #32
 1462 003a 1340     		and	r3, r2
 472:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1463              		.loc 1 472 0
 1464 003c 06D1     		bne	.L111
 474:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 1465              		.loc 1 474 0
 1466 003e 724B     		ldr	r3, .L134
 1467 0040 5B78     		ldrb	r3, [r3, #1]
 1468 0042 DBB2     		uxtb	r3, r3
 1469 0044 1A1C     		mov	r2, r3
 1470 0046 0223     		mov	r3, #2
 1471 0048 1340     		and	r3, r2
 471:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1472              		.loc 1 471 0
 1473 004a 01D0     		beq	.L112
 1474              	.L111:
 475:../Sources/TFC/TFC_CrystalClock.c ****   {
 476:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 1475              		.loc 1 476 0
 1476 004c 0423     		mov	r3, #4
 1477 004e D6E0     		b	.L113
 1478              	.L112:
 477:../Sources/TFC/TFC_CrystalClock.c ****   }
 478:../Sources/TFC/TFC_CrystalClock.c ****   
 479:../Sources/TFC/TFC_CrystalClock.c **** // As the external frequency has already been checked when FBE mode was enterred it is not checked 
 480:../Sources/TFC/TFC_CrystalClock.c **** 
 481:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL divider settings are within spec.
 482:../Sources/TFC/TFC_CrystalClock.c ****   if ((prdiv_val < 1) || (prdiv_val > 25)) {return 0x41;}
 1479              		.loc 1 482 0
 1480 0050 FB1C     		add	r3, r7, #3
 1481 0052 1B78     		ldrb	r3, [r3]
 1482 0054 5BB2     		sxtb	r3, r3
 1483 0056 002B     		cmp	r3, #0
 1484 0058 04DD     		ble	.L114
 1485              		.loc 1 482 0 is_stmt 0
 1486 005a FB1C     		add	r3, r7, #3
 1487 005c 1B78     		ldrb	r3, [r3]
 1488 005e 5BB2     		sxtb	r3, r3
 1489 0060 192B     		cmp	r3, #25
 1490 0062 01DD     		ble	.L115
 1491              	.L114:
 1492              		.loc 1 482 0
 1493 0064 4123     		mov	r3, #65
 1494 0066 CAE0     		b	.L113
 1495              	.L115:
 483:../Sources/TFC/TFC_CrystalClock.c ****   if ((vdiv_val < 24) || (vdiv_val > 50)) {return 0x42;} 
 1496              		.loc 1 483 0 is_stmt 1
 1497 0068 BB1C     		add	r3, r7, #2
 1498 006a 1B78     		ldrb	r3, [r3]
 1499 006c 5BB2     		sxtb	r3, r3
 1500 006e 172B     		cmp	r3, #23
 1501 0070 04DD     		ble	.L116
 1502              		.loc 1 483 0 is_stmt 0
 1503 0072 BB1C     		add	r3, r7, #2
 1504 0074 1B78     		ldrb	r3, [r3]
 1505 0076 5BB2     		sxtb	r3, r3
 1506 0078 322B     		cmp	r3, #50
 1507 007a 01DD     		ble	.L117
 1508              	.L116:
 1509              		.loc 1 483 0
 1510 007c 4223     		mov	r3, #66
 1511 007e BEE0     		b	.L113
 1512              	.L117:
 484:../Sources/TFC/TFC_CrystalClock.c ****   
 485:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL reference clock frequency is within spec.
 486:../Sources/TFC/TFC_CrystalClock.c ****   if (((crystal_val / prdiv_val) < 2000000) || ((crystal_val / prdiv_val) > 4000000)) {return 0x43;
 1513              		.loc 1 486 0 is_stmt 1
 1514 0080 FB1C     		add	r3, r7, #3
 1515 0082 1B78     		ldrb	r3, [r3]
 1516 0084 5BB2     		sxtb	r3, r3
 1517 0086 7868     		ldr	r0, [r7, #4]
 1518 0088 191C     		mov	r1, r3
 1519 008a FFF7FEFF 		bl	__aeabi_idiv
 1520 008e 031C     		mov	r3, r0
 1521 0090 1A1C     		mov	r2, r3
 1522 0092 5E4B     		ldr	r3, .L134+4
 1523 0094 9A42     		cmp	r2, r3
 1524 0096 0BDD     		ble	.L118
 1525              		.loc 1 486 0 is_stmt 0
 1526 0098 FB1C     		add	r3, r7, #3
 1527 009a 1B78     		ldrb	r3, [r3]
 1528 009c 5BB2     		sxtb	r3, r3
 1529 009e 7868     		ldr	r0, [r7, #4]
 1530 00a0 191C     		mov	r1, r3
 1531 00a2 FFF7FEFF 		bl	__aeabi_idiv
 1532 00a6 031C     		mov	r3, r0
 1533 00a8 1A1C     		mov	r2, r3
 1534 00aa 594B     		ldr	r3, .L134+8
 1535 00ac 9A42     		cmp	r2, r3
 1536 00ae 01DD     		ble	.L119
 1537              	.L118:
 1538              		.loc 1 486 0
 1539 00b0 4323     		mov	r3, #67
 1540 00b2 A4E0     		b	.L113
 1541              	.L119:
 487:../Sources/TFC/TFC_CrystalClock.c ****        
 488:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL output frequency is within spec.
 489:../Sources/TFC/TFC_CrystalClock.c ****   pll_freq = (crystal_val / prdiv_val) * vdiv_val;
 1542              		.loc 1 489 0 is_stmt 1
 1543 00b4 FB1C     		add	r3, r7, #3
 1544 00b6 1B78     		ldrb	r3, [r3]
 1545 00b8 5BB2     		sxtb	r3, r3
 1546 00ba 7868     		ldr	r0, [r7, #4]
 1547 00bc 191C     		mov	r1, r3
 1548 00be FFF7FEFF 		bl	__aeabi_idiv
 1549 00c2 031C     		mov	r3, r0
 1550 00c4 BA1C     		add	r2, r7, #2
 1551 00c6 1278     		ldrb	r2, [r2]
 1552 00c8 52B2     		sxtb	r2, r2
 1553 00ca 5343     		mul	r3, r2
 1554 00cc 3B61     		str	r3, [r7, #16]
 490:../Sources/TFC/TFC_CrystalClock.c ****   if ((pll_freq < 48000000) || (pll_freq > 100000000)) {return 0x45;}
 1555              		.loc 1 490 0
 1556 00ce 3A69     		ldr	r2, [r7, #16]
 1557 00d0 504B     		ldr	r3, .L134+12
 1558 00d2 9A42     		cmp	r2, r3
 1559 00d4 03DD     		ble	.L120
 1560              		.loc 1 490 0 is_stmt 0
 1561 00d6 3A69     		ldr	r2, [r7, #16]
 1562 00d8 4F4B     		ldr	r3, .L134+16
 1563 00da 9A42     		cmp	r2, r3
 1564 00dc 01DD     		ble	.L121
 1565              	.L120:
 1566              		.loc 1 490 0
 1567 00de 4523     		mov	r3, #69
 1568 00e0 8DE0     		b	.L113
 1569              	.L121:
 491:../Sources/TFC/TFC_CrystalClock.c **** 
 492:../Sources/TFC/TFC_CrystalClock.c ****   // Configure MCG_C5
 493:../Sources/TFC/TFC_CrystalClock.c ****   // If the PLL is to run in STOP mode then the PLLSTEN bit needs to be OR'ed in here or in user co
 494:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C5;
 1570              		.loc 1 494 0 is_stmt 1
 1571 00e2 494A     		ldr	r2, .L134
 1572 00e4 3B1C     		mov	r3, r7
 1573 00e6 0F33     		add	r3, r3, #15
 1574 00e8 1279     		ldrb	r2, [r2, #4]
 1575 00ea 1A70     		strb	r2, [r3]
 495:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C5_PRDIV0_MASK;
 1576              		.loc 1 495 0
 1577 00ec 3B1C     		mov	r3, r7
 1578 00ee 0F33     		add	r3, r3, #15
 1579 00f0 3A1C     		mov	r2, r7
 1580 00f2 0F32     		add	r2, r2, #15
 1581 00f4 1278     		ldrb	r2, [r2]
 1582 00f6 1F21     		mov	r1, #31
 1583 00f8 8A43     		bic	r2, r1
 1584 00fa 1A70     		strb	r2, [r3]
 496:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C5_PRDIV0(prdiv_val - 1);    //set PLL ref divider
 1585              		.loc 1 496 0
 1586 00fc FB1C     		add	r3, r7, #3
 1587 00fe 1B78     		ldrb	r3, [r3]
 1588 0100 013B     		sub	r3, r3, #1
 1589 0102 DAB2     		uxtb	r2, r3
 1590 0104 1F23     		mov	r3, #31
 1591 0106 1340     		and	r3, r2
 1592 0108 D9B2     		uxtb	r1, r3
 1593 010a 3B1C     		mov	r3, r7
 1594 010c 0F33     		add	r3, r3, #15
 1595 010e 3A1C     		mov	r2, r7
 1596 0110 0F32     		add	r2, r2, #15
 1597 0112 1278     		ldrb	r2, [r2]
 1598 0114 0A43     		orr	r2, r1
 1599 0116 1A70     		strb	r2, [r3]
 497:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C5 = temp_reg;
 1600              		.loc 1 497 0
 1601 0118 3B4B     		ldr	r3, .L134
 1602 011a 3A1C     		mov	r2, r7
 1603 011c 0F32     		add	r2, r2, #15
 1604 011e 1278     		ldrb	r2, [r2]
 1605 0120 1A71     		strb	r2, [r3, #4]
 498:../Sources/TFC/TFC_CrystalClock.c **** 
 499:../Sources/TFC/TFC_CrystalClock.c ****   // Configure MCG_C6
 500:../Sources/TFC/TFC_CrystalClock.c ****   // The PLLS bit is set to enable the PLL, MCGOUT still sourced from ext ref clk 
 501:../Sources/TFC/TFC_CrystalClock.c ****   // The clock monitor is not enabled here as it has likely been enabled previously and so the valu
 502:../Sources/TFC/TFC_CrystalClock.c ****   // is not altered here.
 503:../Sources/TFC/TFC_CrystalClock.c ****   // The loss of lock interrupt can be enabled by seperately OR'ing in the LOLIE bit in MCG_C6
 504:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C6; // store present C6 value
 1606              		.loc 1 504 0
 1607 0122 394A     		ldr	r2, .L134
 1608 0124 3B1C     		mov	r3, r7
 1609 0126 0F33     		add	r3, r3, #15
 1610 0128 5279     		ldrb	r2, [r2, #5]
 1611 012a 1A70     		strb	r2, [r3]
 505:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C6_VDIV0_MASK; // clear VDIV settings
 1612              		.loc 1 505 0
 1613 012c 3B1C     		mov	r3, r7
 1614 012e 0F33     		add	r3, r3, #15
 1615 0130 3A1C     		mov	r2, r7
 1616 0132 0F32     		add	r2, r2, #15
 1617 0134 1278     		ldrb	r2, [r2]
 1618 0136 1F21     		mov	r1, #31
 1619 0138 8A43     		bic	r2, r1
 1620 013a 1A70     		strb	r2, [r3]
 506:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C6_PLLS_MASK | MCG_C6_VDIV0(vdiv_val - 24); // write new VDIV and enable PLL
 1621              		.loc 1 506 0
 1622 013c BB1C     		add	r3, r7, #2
 1623 013e 1B78     		ldrb	r3, [r3]
 1624 0140 183B     		sub	r3, r3, #24
 1625 0142 DAB2     		uxtb	r2, r3
 1626 0144 1F23     		mov	r3, #31
 1627 0146 1340     		and	r3, r2
 1628 0148 DAB2     		uxtb	r2, r3
 1629 014a 3B1C     		mov	r3, r7
 1630 014c 0F33     		add	r3, r3, #15
 1631 014e 1B78     		ldrb	r3, [r3]
 1632 0150 1343     		orr	r3, r2
 1633 0152 DAB2     		uxtb	r2, r3
 1634 0154 3B1C     		mov	r3, r7
 1635 0156 0F33     		add	r3, r3, #15
 1636 0158 4021     		mov	r1, #64
 1637 015a 0A43     		orr	r2, r1
 1638 015c 1A70     		strb	r2, [r3]
 507:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 = temp_reg; // update MCG_C6
 1639              		.loc 1 507 0
 1640 015e 2A4B     		ldr	r3, .L134
 1641 0160 3A1C     		mov	r2, r7
 1642 0162 0F32     		add	r2, r2, #15
 1643 0164 1278     		ldrb	r2, [r2]
 1644 0166 5A71     		strb	r2, [r3, #5]
 508:../Sources/TFC/TFC_CrystalClock.c ****   
 509:../Sources/TFC/TFC_CrystalClock.c ****   // wait for PLLST status bit to set
 510:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1645              		.loc 1 510 0
 1646 0168 3B1C     		mov	r3, r7
 1647 016a 1633     		add	r3, r3, #22
 1648 016c 0022     		mov	r2, #0
 1649 016e 1A80     		strh	r2, [r3]
 1650 0170 0DE0     		b	.L122
 1651              	.L125:
 511:../Sources/TFC/TFC_CrystalClock.c ****   {
 512:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_PLLST_MASK) break; // jump out early if PLLST sets before loop finishes
 1652              		.loc 1 512 0
 1653 0172 254B     		ldr	r3, .L134
 1654 0174 9B79     		ldrb	r3, [r3, #6]
 1655 0176 DBB2     		uxtb	r3, r3
 1656 0178 1A1C     		mov	r2, r3
 1657 017a 2023     		mov	r3, #32
 1658 017c 1340     		and	r3, r2
 1659 017e 0ED1     		bne	.L132
 1660              	.L123:
 510:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1661              		.loc 1 510 0
 1662 0180 3B1C     		mov	r3, r7
 1663 0182 1633     		add	r3, r3, #22
 1664 0184 3A1C     		mov	r2, r7
 1665 0186 1632     		add	r2, r2, #22
 1666 0188 1288     		ldrh	r2, [r2]
 1667 018a 0132     		add	r2, r2, #1
 1668 018c 1A80     		strh	r2, [r3]
 1669              	.L122:
 510:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1670              		.loc 1 510 0 is_stmt 0
 1671 018e 3B1C     		mov	r3, r7
 1672 0190 1633     		add	r3, r3, #22
 1673 0192 0021     		mov	r1, #0
 1674 0194 5A5E     		ldrsh	r2, [r3, r1]
 1675 0196 214B     		ldr	r3, .L134+20
 1676 0198 9A42     		cmp	r2, r3
 1677 019a EADD     		ble	.L125
 1678 019c 00E0     		b	.L124
 1679              	.L132:
 1680              		.loc 1 512 0 is_stmt 1
 1681 019e C046     		mov	r8, r8
 1682              	.L124:
 513:../Sources/TFC/TFC_CrystalClock.c ****   }
 514:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_PLLST_MASK)) return 0x16; // check bit is really set and return with error if
 1683              		.loc 1 514 0
 1684 01a0 194B     		ldr	r3, .L134
 1685 01a2 9B79     		ldrb	r3, [r3, #6]
 1686 01a4 DBB2     		uxtb	r3, r3
 1687 01a6 1A1C     		mov	r2, r3
 1688 01a8 2023     		mov	r3, #32
 1689 01aa 1340     		and	r3, r2
 1690 01ac 01D1     		bne	.L126
 1691              		.loc 1 514 0 is_stmt 0
 1692 01ae 1623     		mov	r3, #22
 1693 01b0 25E0     		b	.L113
 1694              	.L126:
 515:../Sources/TFC/TFC_CrystalClock.c **** 
 516:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for LOCK bit to set
 517:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1695              		.loc 1 517 0 is_stmt 1
 1696 01b2 3B1C     		mov	r3, r7
 1697 01b4 1633     		add	r3, r3, #22
 1698 01b6 0022     		mov	r2, #0
 1699 01b8 1A80     		strh	r2, [r3]
 1700 01ba 0DE0     		b	.L127
 1701              	.L130:
 518:../Sources/TFC/TFC_CrystalClock.c ****   {
 519:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
 1702              		.loc 1 519 0
 1703 01bc 124B     		ldr	r3, .L134
 1704 01be 9B79     		ldrb	r3, [r3, #6]
 1705 01c0 DBB2     		uxtb	r3, r3
 1706 01c2 1A1C     		mov	r2, r3
 1707 01c4 4023     		mov	r3, #64
 1708 01c6 1340     		and	r3, r2
 1709 01c8 0ED1     		bne	.L133
 1710              	.L128:
 517:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1711              		.loc 1 517 0
 1712 01ca 3B1C     		mov	r3, r7
 1713 01cc 1633     		add	r3, r3, #22
 1714 01ce 3A1C     		mov	r2, r7
 1715 01d0 1632     		add	r2, r2, #22
 1716 01d2 1288     		ldrh	r2, [r2]
 1717 01d4 0132     		add	r2, r2, #1
 1718 01d6 1A80     		strh	r2, [r3]
 1719              	.L127:
 517:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1720              		.loc 1 517 0 is_stmt 0
 1721 01d8 3B1C     		mov	r3, r7
 1722 01da 1633     		add	r3, r3, #22
 1723 01dc 0021     		mov	r1, #0
 1724 01de 5A5E     		ldrsh	r2, [r3, r1]
 1725 01e0 0E4B     		ldr	r3, .L134+20
 1726 01e2 9A42     		cmp	r2, r3
 1727 01e4 EADD     		ble	.L130
 1728 01e6 00E0     		b	.L129
 1729              	.L133:
 1730              		.loc 1 519 0 is_stmt 1
 1731 01e8 C046     		mov	r8, r8
 1732              	.L129:
 520:../Sources/TFC/TFC_CrystalClock.c ****   }
 521:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if
 1733              		.loc 1 521 0
 1734 01ea 074B     		ldr	r3, .L134
 1735 01ec 9B79     		ldrb	r3, [r3, #6]
 1736 01ee DBB2     		uxtb	r3, r3
 1737 01f0 1A1C     		mov	r2, r3
 1738 01f2 4023     		mov	r3, #64
 1739 01f4 1340     		and	r3, r2
 1740 01f6 01D1     		bne	.L131
 1741              		.loc 1 521 0 is_stmt 0
 1742 01f8 4423     		mov	r3, #68
 1743 01fa 00E0     		b	.L113
 1744              	.L131:
 522:../Sources/TFC/TFC_CrystalClock.c ****     
 523:../Sources/TFC/TFC_CrystalClock.c **** // now in PBE 
 524:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency
 1745              		.loc 1 524 0 is_stmt 1
 1746 01fc 7B68     		ldr	r3, [r7, #4]
 1747              	.L113:
 525:../Sources/TFC/TFC_CrystalClock.c **** } // fbe_pbe
 1748              		.loc 1 525 0
 1749 01fe 181C     		mov	r0, r3
 1750 0200 BD46     		mov	sp, r7
 1751 0202 06B0     		add	sp, sp, #24
 1752              		@ sp needed for prologue
 1753 0204 80BD     		pop	{r7, pc}
 1754              	.L135:
 1755 0206 C046     		.align	2
 1756              	.L134:
 1757 0208 00400640 		.word	1074151424
 1758 020c 7F841E00 		.word	1999999
 1759 0210 00093D00 		.word	4000000
 1760 0214 FF6BDC02 		.word	47999999
 1761 0218 00E1F505 		.word	100000000
 1762 021c CF070000 		.word	1999
 1763              		.cfi_endproc
 1764              	.LFE5:
 1766              		.section	.text.pbe_blpe,"ax",%progbits
 1767              		.align	2
 1768              		.global	pbe_blpe
 1769              		.code	16
 1770              		.thumb_func
 1772              	pbe_blpe:
 1773              	.LFB6:
 526:../Sources/TFC/TFC_CrystalClock.c **** 
 527:../Sources/TFC/TFC_CrystalClock.c **** 
 528:../Sources/TFC/TFC_CrystalClock.c **** int pbe_blpe(int crystal_val)
 529:../Sources/TFC/TFC_CrystalClock.c **** {
 1774              		.loc 1 529 0
 1775              		.cfi_startproc
 1776 0000 80B5     		push	{r7, lr}
 1777              	.LCFI18:
 1778              		.cfi_def_cfa_offset 8
 1779              		.cfi_offset 7, -8
 1780              		.cfi_offset 14, -4
 1781 0002 82B0     		sub	sp, sp, #8
 1782              	.LCFI19:
 1783              		.cfi_def_cfa_offset 16
 1784 0004 00AF     		add	r7, sp, #0
 1785              	.LCFI20:
 1786              		.cfi_def_cfa_register 7
 1787 0006 7860     		str	r0, [r7, #4]
 530:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in PBE mode
 531:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1788              		.loc 1 531 0
 1789 0008 164B     		ldr	r3, .L140
 1790 000a 9B79     		ldrb	r3, [r3, #6]
 1791 000c DBB2     		uxtb	r3, r3
 1792 000e 1A1C     		mov	r2, r3
 1793 0010 0C23     		mov	r3, #12
 1794 0012 1340     		and	r3, r2
 1795 0014 9B08     		lsr	r3, r3, #2
 1796 0016 022B     		cmp	r3, #2
 1797 0018 14D1     		bne	.L137
 532:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1798              		.loc 1 532 0
 1799 001a 124B     		ldr	r3, .L140
 1800 001c 9B79     		ldrb	r3, [r3, #6]
 1801 001e DBB2     		uxtb	r3, r3
 1802 0020 1A1C     		mov	r2, r3
 1803 0022 1023     		mov	r3, #16
 1804 0024 1340     		and	r3, r2
 531:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1805              		.loc 1 531 0
 1806 0026 0DD1     		bne	.L137
 533:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_PLLST_MASK) &&                                   // check PLLS mux has selecte
 1807              		.loc 1 533 0
 1808 0028 0E4B     		ldr	r3, .L140
 1809 002a 9B79     		ldrb	r3, [r3, #6]
 1810 002c DBB2     		uxtb	r3, r3
 1811 002e 1A1C     		mov	r2, r3
 1812 0030 2023     		mov	r3, #32
 1813 0032 1340     		and	r3, r2
 532:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1814              		.loc 1 532 0
 1815 0034 06D0     		beq	.L137
 534:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 1816              		.loc 1 534 0
 1817 0036 0B4B     		ldr	r3, .L140
 1818 0038 5B78     		ldrb	r3, [r3, #1]
 1819 003a DBB2     		uxtb	r3, r3
 1820 003c 1A1C     		mov	r2, r3
 1821 003e 0223     		mov	r3, #2
 1822 0040 1340     		and	r3, r2
 531:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1823              		.loc 1 531 0
 1824 0042 01D0     		beq	.L138
 1825              	.L137:
 535:../Sources/TFC/TFC_CrystalClock.c ****   {
 536:../Sources/TFC/TFC_CrystalClock.c ****     return 0x7;                                                       // return error code
 1826              		.loc 1 536 0
 1827 0044 0723     		mov	r3, #7
 1828 0046 08E0     		b	.L139
 1829              	.L138:
 537:../Sources/TFC/TFC_CrystalClock.c ****   }
 538:../Sources/TFC/TFC_CrystalClock.c ****   
 539:../Sources/TFC/TFC_CrystalClock.c **** // To enter BLPE mode the LP bit must be set, disabling the PLL  
 540:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 |= MCG_C2_LP_MASK;
 1830              		.loc 1 540 0
 1831 0048 064B     		ldr	r3, .L140
 1832 004a 064A     		ldr	r2, .L140
 1833 004c 5278     		ldrb	r2, [r2, #1]
 1834 004e D2B2     		uxtb	r2, r2
 1835 0050 0221     		mov	r1, #2
 1836 0052 0A43     		orr	r2, r1
 1837 0054 D2B2     		uxtb	r2, r2
 1838 0056 5A70     		strb	r2, [r3, #1]
 541:../Sources/TFC/TFC_CrystalClock.c ****   
 542:../Sources/TFC/TFC_CrystalClock.c **** // Now in BLPE mode
 543:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val;  
 1839              		.loc 1 543 0
 1840 0058 7B68     		ldr	r3, [r7, #4]
 1841              	.L139:
 544:../Sources/TFC/TFC_CrystalClock.c **** } // pbe_blpe
 1842              		.loc 1 544 0
 1843 005a 181C     		mov	r0, r3
 1844 005c BD46     		mov	sp, r7
 1845 005e 02B0     		add	sp, sp, #8
 1846              		@ sp needed for prologue
 1847 0060 80BD     		pop	{r7, pc}
 1848              	.L141:
 1849 0062 C046     		.align	2
 1850              	.L140:
 1851 0064 00400640 		.word	1074151424
 1852              		.cfi_endproc
 1853              	.LFE6:
 1855              		.section	.text.blpe_pbe,"ax",%progbits
 1856              		.align	2
 1857              		.global	blpe_pbe
 1858              		.code	16
 1859              		.thumb_func
 1861              	blpe_pbe:
 1862              	.LFB7:
 545:../Sources/TFC/TFC_CrystalClock.c **** 
 546:../Sources/TFC/TFC_CrystalClock.c **** 
 547:../Sources/TFC/TFC_CrystalClock.c **** // ************************************************************************************************
 548:../Sources/TFC/TFC_CrystalClock.c **** // Since PBE mode can be enterred via FBE -> BLPE modes, it cannot be assumed that the PLL has been
 549:../Sources/TFC/TFC_CrystalClock.c **** // previously configured correctly. That is why this general purpose driver has the PLL settings as
 550:../Sources/TFC/TFC_CrystalClock.c **** // passed parameters.
 551:../Sources/TFC/TFC_CrystalClock.c **** // ************************************************************************************************
 552:../Sources/TFC/TFC_CrystalClock.c **** int blpe_pbe(int crystal_val, signed char prdiv_val, signed char vdiv_val)
 553:../Sources/TFC/TFC_CrystalClock.c **** {
 1863              		.loc 1 553 0
 1864              		.cfi_startproc
 1865 0000 80B5     		push	{r7, lr}
 1866              	.LCFI21:
 1867              		.cfi_def_cfa_offset 8
 1868              		.cfi_offset 7, -8
 1869              		.cfi_offset 14, -4
 1870 0002 84B0     		sub	sp, sp, #16
 1871              	.LCFI22:
 1872              		.cfi_def_cfa_offset 24
 1873 0004 00AF     		add	r7, sp, #0
 1874              	.LCFI23:
 1875              		.cfi_def_cfa_register 7
 1876 0006 7860     		str	r0, [r7, #4]
 1877 0008 FB1C     		add	r3, r7, #3
 1878 000a 1970     		strb	r1, [r3]
 1879 000c BB1C     		add	r3, r7, #2
 1880 000e 1A70     		strb	r2, [r3]
 554:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 555:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 556:../Sources/TFC/TFC_CrystalClock.c ****   
 557:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in BLPE mode
 558:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1881              		.loc 1 558 0
 1882 0010 724B     		ldr	r3, .L164
 1883 0012 9B79     		ldrb	r3, [r3, #6]
 1884 0014 DBB2     		uxtb	r3, r3
 1885 0016 1A1C     		mov	r2, r3
 1886 0018 0C23     		mov	r3, #12
 1887 001a 1340     		and	r3, r2
 1888 001c 9B08     		lsr	r3, r3, #2
 1889 001e 022B     		cmp	r3, #2
 1890 0020 0DD1     		bne	.L143
 559:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1891              		.loc 1 559 0
 1892 0022 6E4B     		ldr	r3, .L164
 1893 0024 9B79     		ldrb	r3, [r3, #6]
 1894 0026 DBB2     		uxtb	r3, r3
 1895 0028 1A1C     		mov	r2, r3
 1896 002a 1023     		mov	r3, #16
 1897 002c 1340     		and	r3, r2
 558:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1898              		.loc 1 558 0
 1899 002e 06D1     		bne	.L143
 560:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_C2 & MCG_C2_LP_MASK)))                                     // check MCG_C2[LP] bit is se
 1900              		.loc 1 560 0
 1901 0030 6A4B     		ldr	r3, .L164
 1902 0032 5B78     		ldrb	r3, [r3, #1]
 1903 0034 DBB2     		uxtb	r3, r3
 1904 0036 1A1C     		mov	r2, r3
 1905 0038 0223     		mov	r3, #2
 1906 003a 1340     		and	r3, r2
 558:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1907              		.loc 1 558 0
 1908 003c 01D1     		bne	.L144
 1909              	.L143:
 561:../Sources/TFC/TFC_CrystalClock.c ****   {
 562:../Sources/TFC/TFC_CrystalClock.c ****     return 0x6;                                                       // return error code
 1910              		.loc 1 562 0
 1911 003e 0623     		mov	r3, #6
 1912 0040 C7E0     		b	.L145
 1913              	.L144:
 563:../Sources/TFC/TFC_CrystalClock.c ****   }
 564:../Sources/TFC/TFC_CrystalClock.c ****   
 565:../Sources/TFC/TFC_CrystalClock.c **** // As the external frequency has already been checked when FBE mode was enterred it is not checked 
 566:../Sources/TFC/TFC_CrystalClock.c **** 
 567:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL divider settings are within spec.
 568:../Sources/TFC/TFC_CrystalClock.c ****   if ((prdiv_val < 1) || (prdiv_val > 25)) {return 0x41;}
 1914              		.loc 1 568 0
 1915 0042 FB1C     		add	r3, r7, #3
 1916 0044 1B78     		ldrb	r3, [r3]
 1917 0046 5BB2     		sxtb	r3, r3
 1918 0048 002B     		cmp	r3, #0
 1919 004a 04DD     		ble	.L146
 1920              		.loc 1 568 0 is_stmt 0
 1921 004c FB1C     		add	r3, r7, #3
 1922 004e 1B78     		ldrb	r3, [r3]
 1923 0050 5BB2     		sxtb	r3, r3
 1924 0052 192B     		cmp	r3, #25
 1925 0054 01DD     		ble	.L147
 1926              	.L146:
 1927              		.loc 1 568 0
 1928 0056 4123     		mov	r3, #65
 1929 0058 BBE0     		b	.L145
 1930              	.L147:
 569:../Sources/TFC/TFC_CrystalClock.c ****   if ((vdiv_val < 24) || (vdiv_val > 50)) {return 0x42;} 
 1931              		.loc 1 569 0 is_stmt 1
 1932 005a BB1C     		add	r3, r7, #2
 1933 005c 1B78     		ldrb	r3, [r3]
 1934 005e 5BB2     		sxtb	r3, r3
 1935 0060 172B     		cmp	r3, #23
 1936 0062 04DD     		ble	.L148
 1937              		.loc 1 569 0 is_stmt 0
 1938 0064 BB1C     		add	r3, r7, #2
 1939 0066 1B78     		ldrb	r3, [r3]
 1940 0068 5BB2     		sxtb	r3, r3
 1941 006a 322B     		cmp	r3, #50
 1942 006c 01DD     		ble	.L149
 1943              	.L148:
 1944              		.loc 1 569 0
 1945 006e 4223     		mov	r3, #66
 1946 0070 AFE0     		b	.L145
 1947              	.L149:
 570:../Sources/TFC/TFC_CrystalClock.c ****   
 571:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL reference clock frequency is within spec.
 572:../Sources/TFC/TFC_CrystalClock.c ****   if (((crystal_val / prdiv_val) < 2000000) || ((crystal_val / prdiv_val) > 4000000)) {return 0x43;
 1948              		.loc 1 572 0 is_stmt 1
 1949 0072 FB1C     		add	r3, r7, #3
 1950 0074 1B78     		ldrb	r3, [r3]
 1951 0076 5BB2     		sxtb	r3, r3
 1952 0078 7868     		ldr	r0, [r7, #4]
 1953 007a 191C     		mov	r1, r3
 1954 007c FFF7FEFF 		bl	__aeabi_idiv
 1955 0080 031C     		mov	r3, r0
 1956 0082 1A1C     		mov	r2, r3
 1957 0084 564B     		ldr	r3, .L164+4
 1958 0086 9A42     		cmp	r2, r3
 1959 0088 0BDD     		ble	.L150
 1960              		.loc 1 572 0 is_stmt 0
 1961 008a FB1C     		add	r3, r7, #3
 1962 008c 1B78     		ldrb	r3, [r3]
 1963 008e 5BB2     		sxtb	r3, r3
 1964 0090 7868     		ldr	r0, [r7, #4]
 1965 0092 191C     		mov	r1, r3
 1966 0094 FFF7FEFF 		bl	__aeabi_idiv
 1967 0098 031C     		mov	r3, r0
 1968 009a 1A1C     		mov	r2, r3
 1969 009c 514B     		ldr	r3, .L164+8
 1970 009e 9A42     		cmp	r2, r3
 1971 00a0 01DD     		ble	.L151
 1972              	.L150:
 1973              		.loc 1 572 0
 1974 00a2 4323     		mov	r3, #67
 1975 00a4 95E0     		b	.L145
 1976              	.L151:
 573:../Sources/TFC/TFC_CrystalClock.c ****        
 574:../Sources/TFC/TFC_CrystalClock.c **** // If PRDIV, VDIV and the PLL ref clock are in spec. then the PLL frequency is within spec.
 575:../Sources/TFC/TFC_CrystalClock.c **** 
 576:../Sources/TFC/TFC_CrystalClock.c **** // Configure MCG_C5
 577:../Sources/TFC/TFC_CrystalClock.c **** // If the PLL is to run in STOP mode then the PLLSTEN bit needs to be OR'ed in here or in user code
 578:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C5;
 1977              		.loc 1 578 0 is_stmt 1
 1978 00a6 4D4A     		ldr	r2, .L164
 1979 00a8 3B1C     		mov	r3, r7
 1980 00aa 0D33     		add	r3, r3, #13
 1981 00ac 1279     		ldrb	r2, [r2, #4]
 1982 00ae 1A70     		strb	r2, [r3]
 579:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C5_PRDIV0_MASK;
 1983              		.loc 1 579 0
 1984 00b0 3B1C     		mov	r3, r7
 1985 00b2 0D33     		add	r3, r3, #13
 1986 00b4 3A1C     		mov	r2, r7
 1987 00b6 0D32     		add	r2, r2, #13
 1988 00b8 1278     		ldrb	r2, [r2]
 1989 00ba 1F21     		mov	r1, #31
 1990 00bc 8A43     		bic	r2, r1
 1991 00be 1A70     		strb	r2, [r3]
 580:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C5_PRDIV0(prdiv_val - 1);    //set PLL ref divider
 1992              		.loc 1 580 0
 1993 00c0 FB1C     		add	r3, r7, #3
 1994 00c2 1B78     		ldrb	r3, [r3]
 1995 00c4 013B     		sub	r3, r3, #1
 1996 00c6 DAB2     		uxtb	r2, r3
 1997 00c8 1F23     		mov	r3, #31
 1998 00ca 1340     		and	r3, r2
 1999 00cc D9B2     		uxtb	r1, r3
 2000 00ce 3B1C     		mov	r3, r7
 2001 00d0 0D33     		add	r3, r3, #13
 2002 00d2 3A1C     		mov	r2, r7
 2003 00d4 0D32     		add	r2, r2, #13
 2004 00d6 1278     		ldrb	r2, [r2]
 2005 00d8 0A43     		orr	r2, r1
 2006 00da 1A70     		strb	r2, [r3]
 581:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C5 = temp_reg;
 2007              		.loc 1 581 0
 2008 00dc 3F4B     		ldr	r3, .L164
 2009 00de 3A1C     		mov	r2, r7
 2010 00e0 0D32     		add	r2, r2, #13
 2011 00e2 1278     		ldrb	r2, [r2]
 2012 00e4 1A71     		strb	r2, [r3, #4]
 582:../Sources/TFC/TFC_CrystalClock.c **** 
 583:../Sources/TFC/TFC_CrystalClock.c **** // Configure MCG_C6
 584:../Sources/TFC/TFC_CrystalClock.c **** // The PLLS bit is set to enable the PLL, MCGOUT still sourced from ext ref clk 
 585:../Sources/TFC/TFC_CrystalClock.c **** // The clock monitor is not enabled here as it has likely been enabled previously and so the value 
 586:../Sources/TFC/TFC_CrystalClock.c **** // is not altered here.
 587:../Sources/TFC/TFC_CrystalClock.c **** // The loss of lock interrupt can be enabled by seperately OR'ing in the LOLIE bit in MCG_C6
 588:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C6; // store present C6 value
 2013              		.loc 1 588 0
 2014 00e6 3D4A     		ldr	r2, .L164
 2015 00e8 3B1C     		mov	r3, r7
 2016 00ea 0D33     		add	r3, r3, #13
 2017 00ec 5279     		ldrb	r2, [r2, #5]
 2018 00ee 1A70     		strb	r2, [r3]
 589:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C6_VDIV0_MASK; // clear VDIV settings
 2019              		.loc 1 589 0
 2020 00f0 3B1C     		mov	r3, r7
 2021 00f2 0D33     		add	r3, r3, #13
 2022 00f4 3A1C     		mov	r2, r7
 2023 00f6 0D32     		add	r2, r2, #13
 2024 00f8 1278     		ldrb	r2, [r2]
 2025 00fa 1F21     		mov	r1, #31
 2026 00fc 8A43     		bic	r2, r1
 2027 00fe 1A70     		strb	r2, [r3]
 590:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C6_PLLS_MASK | MCG_C6_VDIV0(vdiv_val - 24); // write new VDIV and enable PLL
 2028              		.loc 1 590 0
 2029 0100 BB1C     		add	r3, r7, #2
 2030 0102 1B78     		ldrb	r3, [r3]
 2031 0104 183B     		sub	r3, r3, #24
 2032 0106 DAB2     		uxtb	r2, r3
 2033 0108 1F23     		mov	r3, #31
 2034 010a 1340     		and	r3, r2
 2035 010c DAB2     		uxtb	r2, r3
 2036 010e 3B1C     		mov	r3, r7
 2037 0110 0D33     		add	r3, r3, #13
 2038 0112 1B78     		ldrb	r3, [r3]
 2039 0114 1343     		orr	r3, r2
 2040 0116 DAB2     		uxtb	r2, r3
 2041 0118 3B1C     		mov	r3, r7
 2042 011a 0D33     		add	r3, r3, #13
 2043 011c 4021     		mov	r1, #64
 2044 011e 0A43     		orr	r2, r1
 2045 0120 1A70     		strb	r2, [r3]
 591:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 = temp_reg; // update MCG_C6
 2046              		.loc 1 591 0
 2047 0122 2E4B     		ldr	r3, .L164
 2048 0124 3A1C     		mov	r2, r7
 2049 0126 0D32     		add	r2, r2, #13
 2050 0128 1278     		ldrb	r2, [r2]
 2051 012a 5A71     		strb	r2, [r3, #5]
 592:../Sources/TFC/TFC_CrystalClock.c ****   
 593:../Sources/TFC/TFC_CrystalClock.c **** // Now that PLL is configured, LP is cleared to enable the PLL
 594:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 &= ~MCG_C2_LP_MASK;
 2052              		.loc 1 594 0
 2053 012c 2B4B     		ldr	r3, .L164
 2054 012e 2B4A     		ldr	r2, .L164
 2055 0130 5278     		ldrb	r2, [r2, #1]
 2056 0132 D2B2     		uxtb	r2, r2
 2057 0134 0221     		mov	r1, #2
 2058 0136 8A43     		bic	r2, r1
 2059 0138 D2B2     		uxtb	r2, r2
 2060 013a 5A70     		strb	r2, [r3, #1]
 595:../Sources/TFC/TFC_CrystalClock.c ****   
 596:../Sources/TFC/TFC_CrystalClock.c **** // wait for PLLST status bit to set
 597:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2061              		.loc 1 597 0
 2062 013c 3B1C     		mov	r3, r7
 2063 013e 0E33     		add	r3, r3, #14
 2064 0140 0022     		mov	r2, #0
 2065 0142 1A80     		strh	r2, [r3]
 2066 0144 0DE0     		b	.L152
 2067              	.L155:
 598:../Sources/TFC/TFC_CrystalClock.c ****   {
 599:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_PLLST_MASK) break; // jump out early if PLLST sets before loop finishes
 2068              		.loc 1 599 0
 2069 0146 254B     		ldr	r3, .L164
 2070 0148 9B79     		ldrb	r3, [r3, #6]
 2071 014a DBB2     		uxtb	r3, r3
 2072 014c 1A1C     		mov	r2, r3
 2073 014e 2023     		mov	r3, #32
 2074 0150 1340     		and	r3, r2
 2075 0152 0ED1     		bne	.L162
 2076              	.L153:
 597:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2077              		.loc 1 597 0
 2078 0154 3B1C     		mov	r3, r7
 2079 0156 0E33     		add	r3, r3, #14
 2080 0158 3A1C     		mov	r2, r7
 2081 015a 0E32     		add	r2, r2, #14
 2082 015c 1288     		ldrh	r2, [r2]
 2083 015e 0132     		add	r2, r2, #1
 2084 0160 1A80     		strh	r2, [r3]
 2085              	.L152:
 597:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2086              		.loc 1 597 0 is_stmt 0
 2087 0162 3B1C     		mov	r3, r7
 2088 0164 0E33     		add	r3, r3, #14
 2089 0166 0021     		mov	r1, #0
 2090 0168 5A5E     		ldrsh	r2, [r3, r1]
 2091 016a 1F4B     		ldr	r3, .L164+12
 2092 016c 9A42     		cmp	r2, r3
 2093 016e EADD     		ble	.L155
 2094 0170 00E0     		b	.L154
 2095              	.L162:
 2096              		.loc 1 599 0 is_stmt 1
 2097 0172 C046     		mov	r8, r8
 2098              	.L154:
 600:../Sources/TFC/TFC_CrystalClock.c ****   }
 601:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_PLLST_MASK)) return 0x16; // check bit is really set and return with error if
 2099              		.loc 1 601 0
 2100 0174 194B     		ldr	r3, .L164
 2101 0176 9B79     		ldrb	r3, [r3, #6]
 2102 0178 DBB2     		uxtb	r3, r3
 2103 017a 1A1C     		mov	r2, r3
 2104 017c 2023     		mov	r3, #32
 2105 017e 1340     		and	r3, r2
 2106 0180 01D1     		bne	.L156
 2107              		.loc 1 601 0 is_stmt 0
 2108 0182 1623     		mov	r3, #22
 2109 0184 25E0     		b	.L145
 2110              	.L156:
 602:../Sources/TFC/TFC_CrystalClock.c **** 
 603:../Sources/TFC/TFC_CrystalClock.c **** // Wait for LOCK bit to set
 604:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2111              		.loc 1 604 0 is_stmt 1
 2112 0186 3B1C     		mov	r3, r7
 2113 0188 0E33     		add	r3, r3, #14
 2114 018a 0022     		mov	r2, #0
 2115 018c 1A80     		strh	r2, [r3]
 2116 018e 0DE0     		b	.L157
 2117              	.L160:
 605:../Sources/TFC/TFC_CrystalClock.c ****   {
 606:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
 2118              		.loc 1 606 0
 2119 0190 124B     		ldr	r3, .L164
 2120 0192 9B79     		ldrb	r3, [r3, #6]
 2121 0194 DBB2     		uxtb	r3, r3
 2122 0196 1A1C     		mov	r2, r3
 2123 0198 4023     		mov	r3, #64
 2124 019a 1340     		and	r3, r2
 2125 019c 0ED1     		bne	.L163
 2126              	.L158:
 604:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2127              		.loc 1 604 0
 2128 019e 3B1C     		mov	r3, r7
 2129 01a0 0E33     		add	r3, r3, #14
 2130 01a2 3A1C     		mov	r2, r7
 2131 01a4 0E32     		add	r2, r2, #14
 2132 01a6 1288     		ldrh	r2, [r2]
 2133 01a8 0132     		add	r2, r2, #1
 2134 01aa 1A80     		strh	r2, [r3]
 2135              	.L157:
 604:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2136              		.loc 1 604 0 is_stmt 0
 2137 01ac 3B1C     		mov	r3, r7
 2138 01ae 0E33     		add	r3, r3, #14
 2139 01b0 0021     		mov	r1, #0
 2140 01b2 5A5E     		ldrsh	r2, [r3, r1]
 2141 01b4 0C4B     		ldr	r3, .L164+12
 2142 01b6 9A42     		cmp	r2, r3
 2143 01b8 EADD     		ble	.L160
 2144 01ba 00E0     		b	.L159
 2145              	.L163:
 2146              		.loc 1 606 0 is_stmt 1
 2147 01bc C046     		mov	r8, r8
 2148              	.L159:
 607:../Sources/TFC/TFC_CrystalClock.c ****   }
 608:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if
 2149              		.loc 1 608 0
 2150 01be 074B     		ldr	r3, .L164
 2151 01c0 9B79     		ldrb	r3, [r3, #6]
 2152 01c2 DBB2     		uxtb	r3, r3
 2153 01c4 1A1C     		mov	r2, r3
 2154 01c6 4023     		mov	r3, #64
 2155 01c8 1340     		and	r3, r2
 2156 01ca 01D1     		bne	.L161
 2157              		.loc 1 608 0 is_stmt 0
 2158 01cc 4423     		mov	r3, #68
 2159 01ce 00E0     		b	.L145
 2160              	.L161:
 609:../Sources/TFC/TFC_CrystalClock.c **** 
 610:../Sources/TFC/TFC_CrystalClock.c **** // now in PBE 
 611:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency  
 2161              		.loc 1 611 0 is_stmt 1
 2162 01d0 7B68     		ldr	r3, [r7, #4]
 2163              	.L145:
 612:../Sources/TFC/TFC_CrystalClock.c **** } // blpe_pbe
 2164              		.loc 1 612 0
 2165 01d2 181C     		mov	r0, r3
 2166 01d4 BD46     		mov	sp, r7
 2167 01d6 04B0     		add	sp, sp, #16
 2168              		@ sp needed for prologue
 2169 01d8 80BD     		pop	{r7, pc}
 2170              	.L165:
 2171 01da C046     		.align	2
 2172              	.L164:
 2173 01dc 00400640 		.word	1074151424
 2174 01e0 7F841E00 		.word	1999999
 2175 01e4 00093D00 		.word	4000000
 2176 01e8 CF070000 		.word	1999
 2177              		.cfi_endproc
 2178              	.LFE7:
 2180              		.section	.text.blpe_fbe,"ax",%progbits
 2181              		.align	2
 2182              		.global	blpe_fbe
 2183              		.code	16
 2184              		.thumb_func
 2186              	blpe_fbe:
 2187              	.LFB8:
 613:../Sources/TFC/TFC_CrystalClock.c **** 
 614:../Sources/TFC/TFC_CrystalClock.c **** 
 615:../Sources/TFC/TFC_CrystalClock.c **** int blpe_fbe(int crystal_val)
 616:../Sources/TFC/TFC_CrystalClock.c **** {
 2188              		.loc 1 616 0
 2189              		.cfi_startproc
 2190 0000 80B5     		push	{r7, lr}
 2191              	.LCFI24:
 2192              		.cfi_def_cfa_offset 8
 2193              		.cfi_offset 7, -8
 2194              		.cfi_offset 14, -4
 2195 0002 84B0     		sub	sp, sp, #16
 2196              	.LCFI25:
 2197              		.cfi_def_cfa_offset 24
 2198 0004 00AF     		add	r7, sp, #0
 2199              	.LCFI26:
 2200              		.cfi_def_cfa_register 7
 2201 0006 7860     		str	r0, [r7, #4]
 617:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 618:../Sources/TFC/TFC_CrystalClock.c ****   
 619:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in BLPE mode
 620:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2202              		.loc 1 620 0
 2203 0008 294B     		ldr	r3, .L176
 2204 000a 9B79     		ldrb	r3, [r3, #6]
 2205 000c DBB2     		uxtb	r3, r3
 2206 000e 1A1C     		mov	r2, r3
 2207 0010 0C23     		mov	r3, #12
 2208 0012 1340     		and	r3, r2
 2209 0014 9B08     		lsr	r3, r3, #2
 2210 0016 022B     		cmp	r3, #2
 2211 0018 0DD1     		bne	.L167
 621:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2212              		.loc 1 621 0
 2213 001a 254B     		ldr	r3, .L176
 2214 001c 9B79     		ldrb	r3, [r3, #6]
 2215 001e DBB2     		uxtb	r3, r3
 2216 0020 1A1C     		mov	r2, r3
 2217 0022 1023     		mov	r3, #16
 2218 0024 1340     		and	r3, r2
 620:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2219              		.loc 1 620 0
 2220 0026 06D1     		bne	.L167
 622:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_C2 & MCG_C2_LP_MASK)))                                     // check MCG_C2[LP] bit is se
 2221              		.loc 1 622 0
 2222 0028 214B     		ldr	r3, .L176
 2223 002a 5B78     		ldrb	r3, [r3, #1]
 2224 002c DBB2     		uxtb	r3, r3
 2225 002e 1A1C     		mov	r2, r3
 2226 0030 0223     		mov	r3, #2
 2227 0032 1340     		and	r3, r2
 620:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2228              		.loc 1 620 0
 2229 0034 01D1     		bne	.L168
 2230              	.L167:
 623:../Sources/TFC/TFC_CrystalClock.c ****   {
 624:../Sources/TFC/TFC_CrystalClock.c ****     return 0x6;                                                       // return error code
 2231              		.loc 1 624 0
 2232 0036 0623     		mov	r3, #6
 2233 0038 35E0     		b	.L169
 2234              	.L168:
 625:../Sources/TFC/TFC_CrystalClock.c ****   }
 626:../Sources/TFC/TFC_CrystalClock.c ****  
 627:../Sources/TFC/TFC_CrystalClock.c **** // To move from BLPE to FBE the PLLS mux be set to select the FLL output and the LP bit must be cle
 628:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_PLLS_MASK; // clear PLLS to select the FLL
 2235              		.loc 1 628 0
 2236 003a 1D4B     		ldr	r3, .L176
 2237 003c 1C4A     		ldr	r2, .L176
 2238 003e 5279     		ldrb	r2, [r2, #5]
 2239 0040 D2B2     		uxtb	r2, r2
 2240 0042 4021     		mov	r1, #64
 2241 0044 8A43     		bic	r2, r1
 2242 0046 D2B2     		uxtb	r2, r2
 2243 0048 5A71     		strb	r2, [r3, #5]
 629:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 &= ~MCG_C2_LP_MASK; // clear LP bit  
 2244              		.loc 1 629 0
 2245 004a 194B     		ldr	r3, .L176
 2246 004c 184A     		ldr	r2, .L176
 2247 004e 5278     		ldrb	r2, [r2, #1]
 2248 0050 D2B2     		uxtb	r2, r2
 2249 0052 0221     		mov	r1, #2
 2250 0054 8A43     		bic	r2, r1
 2251 0056 D2B2     		uxtb	r2, r2
 2252 0058 5A70     		strb	r2, [r3, #1]
 630:../Sources/TFC/TFC_CrystalClock.c **** 
 631:../Sources/TFC/TFC_CrystalClock.c **** // wait for PLLST status bit to clear
 632:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2253              		.loc 1 632 0
 2254 005a 3B1C     		mov	r3, r7
 2255 005c 0E33     		add	r3, r3, #14
 2256 005e 0022     		mov	r2, #0
 2257 0060 1A80     		strh	r2, [r3]
 2258 0062 0DE0     		b	.L170
 2259              	.L173:
 633:../Sources/TFC/TFC_CrystalClock.c ****   {
 634:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_PLLST_MASK)) break; // jump out early if PLLST clears before loop finishes
 2260              		.loc 1 634 0
 2261 0064 124B     		ldr	r3, .L176
 2262 0066 9B79     		ldrb	r3, [r3, #6]
 2263 0068 DBB2     		uxtb	r3, r3
 2264 006a 1A1C     		mov	r2, r3
 2265 006c 2023     		mov	r3, #32
 2266 006e 1340     		and	r3, r2
 2267 0070 0ED0     		beq	.L175
 2268              	.L171:
 632:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2269              		.loc 1 632 0
 2270 0072 3B1C     		mov	r3, r7
 2271 0074 0E33     		add	r3, r3, #14
 2272 0076 3A1C     		mov	r2, r7
 2273 0078 0E32     		add	r2, r2, #14
 2274 007a 1288     		ldrh	r2, [r2]
 2275 007c 0132     		add	r2, r2, #1
 2276 007e 1A80     		strh	r2, [r3]
 2277              	.L170:
 632:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2278              		.loc 1 632 0 is_stmt 0
 2279 0080 3B1C     		mov	r3, r7
 2280 0082 0E33     		add	r3, r3, #14
 2281 0084 0021     		mov	r1, #0
 2282 0086 5A5E     		ldrsh	r2, [r3, r1]
 2283 0088 0A4B     		ldr	r3, .L176+4
 2284 008a 9A42     		cmp	r2, r3
 2285 008c EADD     		ble	.L173
 2286 008e 00E0     		b	.L172
 2287              	.L175:
 2288              		.loc 1 634 0 is_stmt 1
 2289 0090 C046     		mov	r8, r8
 2290              	.L172:
 635:../Sources/TFC/TFC_CrystalClock.c ****   }
 636:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_PLLST_MASK) return 0x15; // check bit is really clear and return with error if 
 2291              		.loc 1 636 0
 2292 0092 074B     		ldr	r3, .L176
 2293 0094 9B79     		ldrb	r3, [r3, #6]
 2294 0096 DBB2     		uxtb	r3, r3
 2295 0098 1A1C     		mov	r2, r3
 2296 009a 2023     		mov	r3, #32
 2297 009c 1340     		and	r3, r2
 2298 009e 01D0     		beq	.L174
 2299              		.loc 1 636 0 is_stmt 0
 2300 00a0 1523     		mov	r3, #21
 2301 00a2 00E0     		b	.L169
 2302              	.L174:
 637:../Sources/TFC/TFC_CrystalClock.c ****   
 638:../Sources/TFC/TFC_CrystalClock.c **** // now in FBE mode
 639:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency     
 2303              		.loc 1 639 0 is_stmt 1
 2304 00a4 7B68     		ldr	r3, [r7, #4]
 2305              	.L169:
 640:../Sources/TFC/TFC_CrystalClock.c **** } // blpe_fbe
 2306              		.loc 1 640 0
 2307 00a6 181C     		mov	r0, r3
 2308 00a8 BD46     		mov	sp, r7
 2309 00aa 04B0     		add	sp, sp, #16
 2310              		@ sp needed for prologue
 2311 00ac 80BD     		pop	{r7, pc}
 2312              	.L177:
 2313 00ae C046     		.align	2
 2314              	.L176:
 2315 00b0 00400640 		.word	1074151424
 2316 00b4 CF070000 		.word	1999
 2317              		.cfi_endproc
 2318              	.LFE8:
 2320              		.section	.text.fbe_blpe,"ax",%progbits
 2321              		.align	2
 2322              		.global	fbe_blpe
 2323              		.code	16
 2324              		.thumb_func
 2326              	fbe_blpe:
 2327              	.LFB9:
 641:../Sources/TFC/TFC_CrystalClock.c **** 
 642:../Sources/TFC/TFC_CrystalClock.c **** 
 643:../Sources/TFC/TFC_CrystalClock.c **** int fbe_blpe(int crystal_val)
 644:../Sources/TFC/TFC_CrystalClock.c **** {
 2328              		.loc 1 644 0
 2329              		.cfi_startproc
 2330 0000 80B5     		push	{r7, lr}
 2331              	.LCFI27:
 2332              		.cfi_def_cfa_offset 8
 2333              		.cfi_offset 7, -8
 2334              		.cfi_offset 14, -4
 2335 0002 82B0     		sub	sp, sp, #8
 2336              	.LCFI28:
 2337              		.cfi_def_cfa_offset 16
 2338 0004 00AF     		add	r7, sp, #0
 2339              	.LCFI29:
 2340              		.cfi_def_cfa_register 7
 2341 0006 7860     		str	r0, [r7, #4]
 645:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 646:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2342              		.loc 1 646 0
 2343 0008 164B     		ldr	r3, .L182
 2344 000a 9B79     		ldrb	r3, [r3, #6]
 2345 000c DBB2     		uxtb	r3, r3
 2346 000e 1A1C     		mov	r2, r3
 2347 0010 0C23     		mov	r3, #12
 2348 0012 1340     		and	r3, r2
 2349 0014 9B08     		lsr	r3, r3, #2
 2350 0016 022B     		cmp	r3, #2
 2351 0018 14D1     		bne	.L179
 647:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2352              		.loc 1 647 0
 2353 001a 124B     		ldr	r3, .L182
 2354 001c 9B79     		ldrb	r3, [r3, #6]
 2355 001e DBB2     		uxtb	r3, r3
 2356 0020 1A1C     		mov	r2, r3
 2357 0022 1023     		mov	r3, #16
 2358 0024 1340     		and	r3, r2
 646:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2359              		.loc 1 646 0
 2360 0026 0DD1     		bne	.L179
 648:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 2361              		.loc 1 648 0
 2362 0028 0E4B     		ldr	r3, .L182
 2363 002a 9B79     		ldrb	r3, [r3, #6]
 2364 002c DBB2     		uxtb	r3, r3
 2365 002e 1A1C     		mov	r2, r3
 2366 0030 2023     		mov	r3, #32
 2367 0032 1340     		and	r3, r2
 647:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2368              		.loc 1 647 0
 2369 0034 06D1     		bne	.L179
 649:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 2370              		.loc 1 649 0
 2371 0036 0B4B     		ldr	r3, .L182
 2372 0038 5B78     		ldrb	r3, [r3, #1]
 2373 003a DBB2     		uxtb	r3, r3
 2374 003c 1A1C     		mov	r2, r3
 2375 003e 0223     		mov	r3, #2
 2376 0040 1340     		and	r3, r2
 646:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2377              		.loc 1 646 0
 2378 0042 01D0     		beq	.L180
 2379              	.L179:
 650:../Sources/TFC/TFC_CrystalClock.c ****   {
 651:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 2380              		.loc 1 651 0
 2381 0044 0423     		mov	r3, #4
 2382 0046 08E0     		b	.L181
 2383              	.L180:
 652:../Sources/TFC/TFC_CrystalClock.c ****   }
 653:../Sources/TFC/TFC_CrystalClock.c ****  
 654:../Sources/TFC/TFC_CrystalClock.c **** // To move from FBE to BLPE the LP bit must be set
 655:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 |= MCG_C2_LP_MASK; // set LP bit  
 2384              		.loc 1 655 0
 2385 0048 064B     		ldr	r3, .L182
 2386 004a 064A     		ldr	r2, .L182
 2387 004c 5278     		ldrb	r2, [r2, #1]
 2388 004e D2B2     		uxtb	r2, r2
 2389 0050 0221     		mov	r1, #2
 2390 0052 0A43     		orr	r2, r1
 2391 0054 D2B2     		uxtb	r2, r2
 2392 0056 5A70     		strb	r2, [r3, #1]
 656:../Sources/TFC/TFC_CrystalClock.c ****  
 657:../Sources/TFC/TFC_CrystalClock.c **** // now in FBE mode
 658:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency     
 2393              		.loc 1 658 0
 2394 0058 7B68     		ldr	r3, [r7, #4]
 2395              	.L181:
 659:../Sources/TFC/TFC_CrystalClock.c **** } // fbe_blpe
 2396              		.loc 1 659 0
 2397 005a 181C     		mov	r0, r3
 2398 005c BD46     		mov	sp, r7
 2399 005e 02B0     		add	sp, sp, #8
 2400              		@ sp needed for prologue
 2401 0060 80BD     		pop	{r7, pc}
 2402              	.L183:
 2403 0062 C046     		.align	2
 2404              	.L182:
 2405 0064 00400640 		.word	1074151424
 2406              		.cfi_endproc
 2407              	.LFE9:
 2409              		.section	.text.fbe_fei,"ax",%progbits
 2410              		.align	2
 2411              		.global	fbe_fei
 2412              		.code	16
 2413              		.thumb_func
 2415              	fbe_fei:
 2416              	.LFB10:
 660:../Sources/TFC/TFC_CrystalClock.c **** 
 661:../Sources/TFC/TFC_CrystalClock.c **** 
 662:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fei(int slow_irc_freq)
 663:../Sources/TFC/TFC_CrystalClock.c **** {
 2417              		.loc 1 663 0
 2418              		.cfi_startproc
 2419 0000 80B5     		push	{r7, lr}
 2420              	.LCFI30:
 2421              		.cfi_def_cfa_offset 8
 2422              		.cfi_offset 7, -8
 2423              		.cfi_offset 14, -4
 2424 0002 86B0     		sub	sp, sp, #24
 2425              	.LCFI31:
 2426              		.cfi_def_cfa_offset 32
 2427 0004 00AF     		add	r7, sp, #0
 2428              	.LCFI32:
 2429              		.cfi_def_cfa_register 7
 2430 0006 7860     		str	r0, [r7, #4]
 664:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 665:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 666:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out;
 667:../Sources/TFC/TFC_CrystalClock.c ****   
 668:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 669:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2431              		.loc 1 669 0
 2432 0008 534B     		ldr	r3, .L203
 2433 000a 9B79     		ldrb	r3, [r3, #6]
 2434 000c DBB2     		uxtb	r3, r3
 2435 000e 1A1C     		mov	r2, r3
 2436 0010 0C23     		mov	r3, #12
 2437 0012 1340     		and	r3, r2
 2438 0014 9B08     		lsr	r3, r3, #2
 2439 0016 022B     		cmp	r3, #2
 2440 0018 14D1     		bne	.L185
 670:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2441              		.loc 1 670 0
 2442 001a 4F4B     		ldr	r3, .L203
 2443 001c 9B79     		ldrb	r3, [r3, #6]
 2444 001e DBB2     		uxtb	r3, r3
 2445 0020 1A1C     		mov	r2, r3
 2446 0022 1023     		mov	r3, #16
 2447 0024 1340     		and	r3, r2
 669:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2448              		.loc 1 669 0
 2449 0026 0DD1     		bne	.L185
 671:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 2450              		.loc 1 671 0
 2451 0028 4B4B     		ldr	r3, .L203
 2452 002a 9B79     		ldrb	r3, [r3, #6]
 2453 002c DBB2     		uxtb	r3, r3
 2454 002e 1A1C     		mov	r2, r3
 2455 0030 2023     		mov	r3, #32
 2456 0032 1340     		and	r3, r2
 670:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2457              		.loc 1 670 0
 2458 0034 06D1     		bne	.L185
 672:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 2459              		.loc 1 672 0
 2460 0036 484B     		ldr	r3, .L203
 2461 0038 5B78     		ldrb	r3, [r3, #1]
 2462 003a DBB2     		uxtb	r3, r3
 2463 003c 1A1C     		mov	r2, r3
 2464 003e 0223     		mov	r3, #2
 2465 0040 1340     		and	r3, r2
 669:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2466              		.loc 1 669 0
 2467 0042 01D0     		beq	.L186
 2468              	.L185:
 673:../Sources/TFC/TFC_CrystalClock.c ****   {
 674:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 2469              		.loc 1 674 0
 2470 0044 0423     		mov	r3, #4
 2471 0046 83E0     		b	.L187
 2472              	.L186:
 675:../Sources/TFC/TFC_CrystalClock.c ****   }
 676:../Sources/TFC/TFC_CrystalClock.c **** 
 677:../Sources/TFC/TFC_CrystalClock.c **** // Check IRC frequency is within spec.
 678:../Sources/TFC/TFC_CrystalClock.c ****   if ((slow_irc_freq < 31250) || (slow_irc_freq > 39063))
 2473              		.loc 1 678 0
 2474 0048 7A68     		ldr	r2, [r7, #4]
 2475 004a 444B     		ldr	r3, .L203+4
 2476 004c 9A42     		cmp	r2, r3
 2477 004e 03DD     		ble	.L188
 2478              		.loc 1 678 0 is_stmt 0
 2479 0050 7A68     		ldr	r2, [r7, #4]
 2480 0052 434B     		ldr	r3, .L203+8
 2481 0054 9A42     		cmp	r2, r3
 2482 0056 01DD     		ble	.L189
 2483              	.L188:
 679:../Sources/TFC/TFC_CrystalClock.c ****   {
 680:../Sources/TFC/TFC_CrystalClock.c ****     return 0x31;
 2484              		.loc 1 680 0 is_stmt 1
 2485 0058 3123     		mov	r3, #49
 2486 005a 79E0     		b	.L187
 2487              	.L189:
 681:../Sources/TFC/TFC_CrystalClock.c ****   }
 682:../Sources/TFC/TFC_CrystalClock.c ****   
 683:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
 684:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(slow_irc_freq); 
 2488              		.loc 1 684 0
 2489 005c 7B68     		ldr	r3, [r7, #4]
 2490 005e 181C     		mov	r0, r3
 2491 0060 FFF7FEFF 		bl	fll_freq
 2492 0064 031C     		mov	r3, r0
 2493 0066 3B61     		str	r3, [r7, #16]
 685:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 2494              		.loc 1 685 0
 2495 0068 3B69     		ldr	r3, [r7, #16]
 2496 006a 3B2B     		cmp	r3, #59
 2497 006c 01DC     		bgt	.L190
 2498              		.loc 1 685 0 is_stmt 0
 2499 006e 3B69     		ldr	r3, [r7, #16]
 2500 0070 6EE0     		b	.L187
 2501              	.L190:
 686:../Sources/TFC/TFC_CrystalClock.c **** 
 687:../Sources/TFC/TFC_CrystalClock.c **** // Need to make sure the clockmonitor is disabled before moving to an "internal" clock mode
 688:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_CME0_MASK; //This assumes OSC0 is used as the external clock source
 2502              		.loc 1 688 0 is_stmt 1
 2503 0072 394B     		ldr	r3, .L203
 2504 0074 384A     		ldr	r2, .L203
 2505 0076 5279     		ldrb	r2, [r2, #5]
 2506 0078 D2B2     		uxtb	r2, r2
 2507 007a 2021     		mov	r1, #32
 2508 007c 8A43     		bic	r2, r1
 2509 007e D2B2     		uxtb	r2, r2
 2510 0080 5A71     		strb	r2, [r3, #5]
 689:../Sources/TFC/TFC_CrystalClock.c ****   
 690:../Sources/TFC/TFC_CrystalClock.c **** // Move to FEI by setting CLKS to 0 and enabling the slow IRC as the FLL reference clock
 691:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 2511              		.loc 1 691 0
 2512 0082 354A     		ldr	r2, .L203
 2513 0084 3B1C     		mov	r3, r7
 2514 0086 0F33     		add	r3, r3, #15
 2515 0088 1278     		ldrb	r2, [r2]
 2516 008a 1A70     		strb	r2, [r3]
 692:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C1_CLKS_MASK; // clear CLKS to select FLL output
 2517              		.loc 1 692 0
 2518 008c 3B1C     		mov	r3, r7
 2519 008e 0F33     		add	r3, r3, #15
 2520 0090 3A1C     		mov	r2, r7
 2521 0092 0F32     		add	r2, r2, #15
 2522 0094 1178     		ldrb	r1, [r2]
 2523 0096 3F22     		mov	r2, #63
 2524 0098 0A40     		and	r2, r1
 2525 009a 1A70     		strb	r2, [r3]
 693:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C1_IREFS_MASK; // select internal reference clock
 2526              		.loc 1 693 0
 2527 009c 3B1C     		mov	r3, r7
 2528 009e 0F33     		add	r3, r3, #15
 2529 00a0 3A1C     		mov	r2, r7
 2530 00a2 0F32     		add	r2, r2, #15
 2531 00a4 1278     		ldrb	r2, [r2]
 2532 00a6 0421     		mov	r1, #4
 2533 00a8 0A43     		orr	r2, r1
 2534 00aa 1A70     		strb	r2, [r3]
 694:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg; // update MCG_C1 
 2535              		.loc 1 694 0
 2536 00ac 2A4B     		ldr	r3, .L203
 2537 00ae 3A1C     		mov	r2, r7
 2538 00b0 0F32     		add	r2, r2, #15
 2539 00b2 1278     		ldrb	r2, [r2]
 2540 00b4 1A70     		strb	r2, [r3]
 695:../Sources/TFC/TFC_CrystalClock.c ****   
 696:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to set
 697:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2541              		.loc 1 697 0
 2542 00b6 3B1C     		mov	r3, r7
 2543 00b8 1633     		add	r3, r3, #22
 2544 00ba 0022     		mov	r2, #0
 2545 00bc 1A80     		strh	r2, [r3]
 2546 00be 0DE0     		b	.L191
 2547              	.L194:
 698:../Sources/TFC/TFC_CrystalClock.c ****   {
 699:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
 2548              		.loc 1 699 0
 2549 00c0 254B     		ldr	r3, .L203
 2550 00c2 9B79     		ldrb	r3, [r3, #6]
 2551 00c4 DBB2     		uxtb	r3, r3
 2552 00c6 1A1C     		mov	r2, r3
 2553 00c8 1023     		mov	r3, #16
 2554 00ca 1340     		and	r3, r2
 2555 00cc 0ED1     		bne	.L201
 2556              	.L192:
 697:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2557              		.loc 1 697 0
 2558 00ce 3B1C     		mov	r3, r7
 2559 00d0 1633     		add	r3, r3, #22
 2560 00d2 3A1C     		mov	r2, r7
 2561 00d4 1632     		add	r2, r2, #22
 2562 00d6 1288     		ldrh	r2, [r2]
 2563 00d8 0132     		add	r2, r2, #1
 2564 00da 1A80     		strh	r2, [r3]
 2565              	.L191:
 697:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2566              		.loc 1 697 0 is_stmt 0
 2567 00dc 3B1C     		mov	r3, r7
 2568 00de 1633     		add	r3, r3, #22
 2569 00e0 0021     		mov	r1, #0
 2570 00e2 5A5E     		ldrsh	r2, [r3, r1]
 2571 00e4 1F4B     		ldr	r3, .L203+12
 2572 00e6 9A42     		cmp	r2, r3
 2573 00e8 EADD     		ble	.L194
 2574 00ea 00E0     		b	.L193
 2575              	.L201:
 2576              		.loc 1 699 0 is_stmt 1
 2577 00ec C046     		mov	r8, r8
 2578              	.L193:
 700:../Sources/TFC/TFC_CrystalClock.c ****   }
 701:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 2579              		.loc 1 701 0
 2580 00ee 1A4B     		ldr	r3, .L203
 2581 00f0 9B79     		ldrb	r3, [r3, #6]
 2582 00f2 DBB2     		uxtb	r3, r3
 2583 00f4 1A1C     		mov	r2, r3
 2584 00f6 1023     		mov	r3, #16
 2585 00f8 1340     		and	r3, r2
 2586 00fa 01D1     		bne	.L195
 2587              		.loc 1 701 0 is_stmt 0
 2588 00fc 1223     		mov	r3, #18
 2589 00fe 27E0     		b	.L187
 2590              	.L195:
 702:../Sources/TFC/TFC_CrystalClock.c ****   
 703:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
 704:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2591              		.loc 1 704 0 is_stmt 1
 2592 0100 3B1C     		mov	r3, r7
 2593 0102 1633     		add	r3, r3, #22
 2594 0104 0022     		mov	r2, #0
 2595 0106 1A80     		strh	r2, [r3]
 2596 0108 0EE0     		b	.L196
 2597              	.L199:
 705:../Sources/TFC/TFC_CrystalClock.c ****   {
 706:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST
 2598              		.loc 1 706 0
 2599 010a 134B     		ldr	r3, .L203
 2600 010c 9B79     		ldrb	r3, [r3, #6]
 2601 010e DBB2     		uxtb	r3, r3
 2602 0110 1A1C     		mov	r2, r3
 2603 0112 0C23     		mov	r3, #12
 2604 0114 1340     		and	r3, r2
 2605 0116 9B08     		lsr	r3, r3, #2
 2606 0118 0ED0     		beq	.L202
 2607              	.L197:
 704:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2608              		.loc 1 704 0
 2609 011a 3B1C     		mov	r3, r7
 2610 011c 1633     		add	r3, r3, #22
 2611 011e 3A1C     		mov	r2, r7
 2612 0120 1632     		add	r2, r2, #22
 2613 0122 1288     		ldrh	r2, [r2]
 2614 0124 0132     		add	r2, r2, #1
 2615 0126 1A80     		strh	r2, [r3]
 2616              	.L196:
 704:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2617              		.loc 1 704 0 is_stmt 0
 2618 0128 3B1C     		mov	r3, r7
 2619 012a 1633     		add	r3, r3, #22
 2620 012c 0021     		mov	r1, #0
 2621 012e 5A5E     		ldrsh	r2, [r3, r1]
 2622 0130 0C4B     		ldr	r3, .L203+12
 2623 0132 9A42     		cmp	r2, r3
 2624 0134 E9DD     		ble	.L199
 2625 0136 00E0     		b	.L198
 2626              	.L202:
 2627              		.loc 1 706 0 is_stmt 1
 2628 0138 C046     		mov	r8, r8
 2629              	.L198:
 707:../Sources/TFC/TFC_CrystalClock.c ****   }
 708:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check EXT CLK is re
 2630              		.loc 1 708 0
 2631 013a 074B     		ldr	r3, .L203
 2632 013c 9B79     		ldrb	r3, [r3, #6]
 2633 013e DBB2     		uxtb	r3, r3
 2634 0140 1A1C     		mov	r2, r3
 2635 0142 0C23     		mov	r3, #12
 2636 0144 1340     		and	r3, r2
 2637 0146 9B08     		lsr	r3, r3, #2
 2638 0148 01D0     		beq	.L200
 2639              		.loc 1 708 0 is_stmt 0
 2640 014a 1823     		mov	r3, #24
 2641 014c 00E0     		b	.L187
 2642              	.L200:
 709:../Sources/TFC/TFC_CrystalClock.c **** 
 710:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEI mode
 711:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out;
 2643              		.loc 1 711 0 is_stmt 1
 2644 014e 3B69     		ldr	r3, [r7, #16]
 2645              	.L187:
 712:../Sources/TFC/TFC_CrystalClock.c **** } // fbe_fei
 2646              		.loc 1 712 0
 2647 0150 181C     		mov	r0, r3
 2648 0152 BD46     		mov	sp, r7
 2649 0154 06B0     		add	sp, sp, #24
 2650              		@ sp needed for prologue
 2651 0156 80BD     		pop	{r7, pc}
 2652              	.L204:
 2653              		.align	2
 2654              	.L203:
 2655 0158 00400640 		.word	1074151424
 2656 015c 117A0000 		.word	31249
 2657 0160 97980000 		.word	39063
 2658 0164 CF070000 		.word	1999
 2659              		.cfi_endproc
 2660              	.LFE10:
 2662              		.section	.text.fei_fbe,"ax",%progbits
 2663              		.align	2
 2664              		.global	fei_fbe
 2665              		.code	16
 2666              		.thumb_func
 2668              	fei_fbe:
 2669              	.LFB11:
 713:../Sources/TFC/TFC_CrystalClock.c **** 
 714:../Sources/TFC/TFC_CrystalClock.c **** 
 715:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
 716:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : fei_fbe
 717:../Sources/TFC/TFC_CrystalClock.c ****  *
 718:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: FEI to FBE mode
 719:../Sources/TFC/TFC_CrystalClock.c ****  *
 720:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from FEI mode to FBE mode. This is
 721:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by setting the MCG_C2[LP] bit. There is no status bit to 
 722:../Sources/TFC/TFC_CrystalClock.c ****  * check so 0 is always returned if the function was called with the MCG
 723:../Sources/TFC/TFC_CrystalClock.c ****  * in FBI mode. The MCGCLKOUT frequency does not change
 724:../Sources/TFC/TFC_CrystalClock.c ****  *
 725:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: crystal_val - external clock frequency in Hz
 726:../Sources/TFC/TFC_CrystalClock.c ****  *             hgo_val     - selects whether low power or high gain mode is selected
 727:../Sources/TFC/TFC_CrystalClock.c ****  *                           for the crystal oscillator. This has no meaning if an 
 728:../Sources/TFC/TFC_CrystalClock.c ****  *                           external clock is used.
 729:../Sources/TFC/TFC_CrystalClock.c ****  *             erefs_val   - selects external clock (=0) or crystal osc (=1)
 730:../Sources/TFC/TFC_CrystalClock.c ****  *
 731:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGCLKOUT frequency (Hz) or error code
 732:../Sources/TFC/TFC_CrystalClock.c ****  */
 733:../Sources/TFC/TFC_CrystalClock.c **** int fei_fbe(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
 734:../Sources/TFC/TFC_CrystalClock.c **** {
 2670              		.loc 1 734 0
 2671              		.cfi_startproc
 2672 0000 80B5     		push	{r7, lr}
 2673              	.LCFI33:
 2674              		.cfi_def_cfa_offset 8
 2675              		.cfi_offset 7, -8
 2676              		.cfi_offset 14, -4
 2677 0002 84B0     		sub	sp, sp, #16
 2678              	.LCFI34:
 2679              		.cfi_def_cfa_offset 24
 2680 0004 00AF     		add	r7, sp, #0
 2681              	.LCFI35:
 2682              		.cfi_def_cfa_register 7
 2683 0006 7860     		str	r0, [r7, #4]
 2684 0008 FB1C     		add	r3, r7, #3
 2685 000a 1970     		strb	r1, [r3]
 2686 000c BB1C     		add	r3, r7, #2
 2687 000e 1A70     		strb	r2, [r3]
 735:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
 736:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 737:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 738:../Sources/TFC/TFC_CrystalClock.c ****   
 739:../Sources/TFC/TFC_CrystalClock.c **** // check if in FEI mode
 740:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 2688              		.loc 1 740 0
 2689 0010 B44B     		ldr	r3, .L241
 2690 0012 9B79     		ldrb	r3, [r3, #6]
 2691 0014 DBB2     		uxtb	r3, r3
 2692 0016 1A1C     		mov	r2, r3
 2693 0018 0C23     		mov	r3, #12
 2694 001a 1340     		and	r3, r2
 2695 001c 9B08     		lsr	r3, r3, #2
 2696 001e 0DD1     		bne	.L206
 741:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 2697              		.loc 1 741 0
 2698 0020 B04B     		ldr	r3, .L241
 2699 0022 9B79     		ldrb	r3, [r3, #6]
 2700 0024 DBB2     		uxtb	r3, r3
 2701 0026 1A1C     		mov	r2, r3
 2702 0028 1023     		mov	r3, #16
 2703 002a 1340     		and	r3, r2
 740:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 2704              		.loc 1 740 0
 2705 002c 06D0     		beq	.L206
 742:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 2706              		.loc 1 742 0
 2707 002e AD4B     		ldr	r3, .L241
 2708 0030 9B79     		ldrb	r3, [r3, #6]
 2709 0032 DBB2     		uxtb	r3, r3
 2710 0034 1A1C     		mov	r2, r3
 2711 0036 2023     		mov	r3, #32
 2712 0038 1340     		and	r3, r2
 740:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 2713              		.loc 1 740 0
 2714 003a 01D0     		beq	.L207
 2715              	.L206:
 743:../Sources/TFC/TFC_CrystalClock.c ****   {
 744:../Sources/TFC/TFC_CrystalClock.c ****     return 0x1;                                                     // return error code
 2716              		.loc 1 744 0
 2717 003c 0123     		mov	r3, #1
 2718 003e 4DE1     		b	.L208
 2719              	.L207:
 745:../Sources/TFC/TFC_CrystalClock.c ****   }
 746:../Sources/TFC/TFC_CrystalClock.c **** 
 747:../Sources/TFC/TFC_CrystalClock.c **** // check external frequency is less than the maximum frequency
 748:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 2720              		.loc 1 748 0
 2721 0040 7A68     		ldr	r2, [r7, #4]
 2722 0042 A94B     		ldr	r3, .L241+4
 2723 0044 9A42     		cmp	r2, r3
 2724 0046 01DD     		ble	.L209
 2725              		.loc 1 748 0 is_stmt 0
 2726 0048 2123     		mov	r3, #33
 2727 004a 47E1     		b	.L208
 2728              	.L209:
 749:../Sources/TFC/TFC_CrystalClock.c ****   
 750:../Sources/TFC/TFC_CrystalClock.c **** // check crystal frequency is within spec. if crystal osc is being used
 751:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 2729              		.loc 1 751 0 is_stmt 1
 2730 004c BB1C     		add	r3, r7, #2
 2731 004e 1B78     		ldrb	r3, [r3]
 2732 0050 002B     		cmp	r3, #0
 2733 0052 11D0     		beq	.L210
 752:../Sources/TFC/TFC_CrystalClock.c ****   {
 753:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 30000) ||
 2734              		.loc 1 753 0
 2735 0054 7A68     		ldr	r2, [r7, #4]
 2736 0056 A54B     		ldr	r3, .L241+8
 2737 0058 9A42     		cmp	r2, r3
 2738 005a 0BDD     		ble	.L211
 2739              		.loc 1 753 0 is_stmt 0
 2740 005c 7A68     		ldr	r2, [r7, #4]
 2741 005e A44B     		ldr	r3, .L241+12
 2742 0060 9A42     		cmp	r2, r3
 2743 0062 03DD     		ble	.L212
 754:../Sources/TFC/TFC_CrystalClock.c ****         ((crystal_val > 40000) && (crystal_val < 3000000)) ||
 2744              		.loc 1 754 0 is_stmt 1
 2745 0064 7A68     		ldr	r2, [r7, #4]
 2746 0066 A34B     		ldr	r3, .L241+16
 2747 0068 9A42     		cmp	r2, r3
 2748 006a 03DD     		ble	.L211
 2749              	.L212:
 2750              		.loc 1 754 0 is_stmt 0
 2751 006c 7A68     		ldr	r2, [r7, #4]
 2752 006e A24B     		ldr	r3, .L241+20
 2753 0070 9A42     		cmp	r2, r3
 2754 0072 01DD     		ble	.L210
 2755              	.L211:
 755:../Sources/TFC/TFC_CrystalClock.c ****         (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal op
 2756              		.loc 1 755 0 is_stmt 1
 2757 0074 2223     		mov	r3, #34
 2758 0076 31E1     		b	.L208
 2759              	.L210:
 756:../Sources/TFC/TFC_CrystalClock.c ****   }
 757:../Sources/TFC/TFC_CrystalClock.c **** 
 758:../Sources/TFC/TFC_CrystalClock.c **** // make sure HGO will never be greater than 1. Could return an error instead if desired.  
 759:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 2760              		.loc 1 759 0
 2761 0078 FB1C     		add	r3, r7, #3
 2762 007a 1B78     		ldrb	r3, [r3]
 2763 007c 002B     		cmp	r3, #0
 2764 007e 02D0     		beq	.L213
 760:../Sources/TFC/TFC_CrystalClock.c ****   {
 761:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 2765              		.loc 1 761 0
 2766 0080 FB1C     		add	r3, r7, #3
 2767 0082 0122     		mov	r2, #1
 2768 0084 1A70     		strb	r2, [r3]
 2769              	.L213:
 762:../Sources/TFC/TFC_CrystalClock.c ****   }
 763:../Sources/TFC/TFC_CrystalClock.c **** 
 764:../Sources/TFC/TFC_CrystalClock.c **** // configure the MCG_C2 register
 765:../Sources/TFC/TFC_CrystalClock.c **** // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the F
 766:../Sources/TFC/TFC_CrystalClock.c **** // it still needs to be set correctly even if the oscillator is not being used
 767:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 2770              		.loc 1 767 0
 2771 0086 974A     		ldr	r2, .L241
 2772 0088 3B1C     		mov	r3, r7
 2773 008a 0E33     		add	r3, r3, #14
 2774 008c 5278     		ldrb	r2, [r2, #1]
 2775 008e 1A70     		strb	r2, [r3]
 768:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 2776              		.loc 1 768 0
 2777 0090 3B1C     		mov	r3, r7
 2778 0092 0E33     		add	r3, r3, #14
 2779 0094 3A1C     		mov	r2, r7
 2780 0096 0E32     		add	r2, r2, #14
 2781 0098 1278     		ldrb	r2, [r2]
 2782 009a 3C21     		mov	r1, #60
 2783 009c 8A43     		bic	r2, r1
 2784 009e 1A70     		strb	r2, [r3]
 769:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 40000)
 2785              		.loc 1 769 0
 2786 00a0 7A68     		ldr	r2, [r7, #4]
 2787 00a2 934B     		ldr	r3, .L241+12
 2788 00a4 9A42     		cmp	r2, r3
 2789 00a6 11DC     		bgt	.L214
 770:../Sources/TFC/TFC_CrystalClock.c ****   {
 771:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 2790              		.loc 1 771 0
 2791 00a8 FB1C     		add	r3, r7, #3
 2792 00aa 1B78     		ldrb	r3, [r3]
 2793 00ac DB00     		lsl	r3, r3, #3
 2794 00ae DAB2     		uxtb	r2, r3
 2795 00b0 BB1C     		add	r3, r7, #2
 2796 00b2 1B78     		ldrb	r3, [r3]
 2797 00b4 9B00     		lsl	r3, r3, #2
 2798 00b6 DBB2     		uxtb	r3, r3
 2799 00b8 1343     		orr	r3, r2
 2800 00ba D9B2     		uxtb	r1, r3
 2801 00bc 3B1C     		mov	r3, r7
 2802 00be 0E33     		add	r3, r3, #14
 2803 00c0 3A1C     		mov	r2, r7
 2804 00c2 0E32     		add	r2, r2, #14
 2805 00c4 1278     		ldrb	r2, [r2]
 2806 00c6 0A43     		orr	r2, r1
 2807 00c8 1A70     		strb	r2, [r3]
 2808 00ca 2CE0     		b	.L215
 2809              	.L214:
 772:../Sources/TFC/TFC_CrystalClock.c ****   }
 773:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 8000000)
 2810              		.loc 1 773 0
 2811 00cc 7A68     		ldr	r2, [r7, #4]
 2812 00ce 8B4B     		ldr	r3, .L241+24
 2813 00d0 9A42     		cmp	r2, r3
 2814 00d2 14DC     		bgt	.L216
 774:../Sources/TFC/TFC_CrystalClock.c ****   {
 775:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 2815              		.loc 1 775 0
 2816 00d4 FB1C     		add	r3, r7, #3
 2817 00d6 1B78     		ldrb	r3, [r3]
 2818 00d8 DB00     		lsl	r3, r3, #3
 2819 00da DAB2     		uxtb	r2, r3
 2820 00dc BB1C     		add	r3, r7, #2
 2821 00de 1B78     		ldrb	r3, [r3]
 2822 00e0 9B00     		lsl	r3, r3, #2
 2823 00e2 DBB2     		uxtb	r3, r3
 2824 00e4 1343     		orr	r3, r2
 2825 00e6 DAB2     		uxtb	r2, r3
 2826 00e8 3B1C     		mov	r3, r7
 2827 00ea 0E33     		add	r3, r3, #14
 2828 00ec 1B78     		ldrb	r3, [r3]
 2829 00ee 1343     		orr	r3, r2
 2830 00f0 DAB2     		uxtb	r2, r3
 2831 00f2 3B1C     		mov	r3, r7
 2832 00f4 0E33     		add	r3, r3, #14
 2833 00f6 1021     		mov	r1, #16
 2834 00f8 0A43     		orr	r2, r1
 2835 00fa 1A70     		strb	r2, [r3]
 2836 00fc 13E0     		b	.L215
 2837              	.L216:
 776:../Sources/TFC/TFC_CrystalClock.c ****   }
 777:../Sources/TFC/TFC_CrystalClock.c ****   else
 778:../Sources/TFC/TFC_CrystalClock.c ****   {
 779:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 2838              		.loc 1 779 0
 2839 00fe FB1C     		add	r3, r7, #3
 2840 0100 1B78     		ldrb	r3, [r3]
 2841 0102 DB00     		lsl	r3, r3, #3
 2842 0104 DAB2     		uxtb	r2, r3
 2843 0106 BB1C     		add	r3, r7, #2
 2844 0108 1B78     		ldrb	r3, [r3]
 2845 010a 9B00     		lsl	r3, r3, #2
 2846 010c DBB2     		uxtb	r3, r3
 2847 010e 1343     		orr	r3, r2
 2848 0110 DAB2     		uxtb	r2, r3
 2849 0112 3B1C     		mov	r3, r7
 2850 0114 0E33     		add	r3, r3, #14
 2851 0116 1B78     		ldrb	r3, [r3]
 2852 0118 1343     		orr	r3, r2
 2853 011a DAB2     		uxtb	r2, r3
 2854 011c 3B1C     		mov	r3, r7
 2855 011e 0E33     		add	r3, r3, #14
 2856 0120 2021     		mov	r1, #32
 2857 0122 0A43     		orr	r2, r1
 2858 0124 1A70     		strb	r2, [r3]
 2859              	.L215:
 780:../Sources/TFC/TFC_CrystalClock.c ****   }
 781:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 2860              		.loc 1 781 0
 2861 0126 6F4B     		ldr	r3, .L241
 2862 0128 3A1C     		mov	r2, r7
 2863 012a 0E32     		add	r2, r2, #14
 2864 012c 1278     		ldrb	r2, [r2]
 2865 012e 5A70     		strb	r2, [r3, #1]
 782:../Sources/TFC/TFC_CrystalClock.c **** // determine FRDIV based on reference clock frequency
 783:../Sources/TFC/TFC_CrystalClock.c **** // since the external frequency has already been checked only the maximum frequency for each FRDIV 
 784:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 2866              		.loc 1 784 0
 2867 0130 7A68     		ldr	r2, [r7, #4]
 2868 0132 734B     		ldr	r3, .L241+28
 2869 0134 9A42     		cmp	r2, r3
 2870 0136 04DC     		bgt	.L217
 2871              		.loc 1 784 0 is_stmt 0
 2872 0138 3B1C     		mov	r3, r7
 2873 013a 0F33     		add	r3, r3, #15
 2874 013c 0022     		mov	r2, #0
 2875 013e 1A70     		strb	r2, [r3]
 2876 0140 27E0     		b	.L218
 2877              	.L217:
 785:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 2878              		.loc 1 785 0 is_stmt 1
 2879 0142 7A68     		ldr	r2, [r7, #4]
 2880 0144 6F4B     		ldr	r3, .L241+32
 2881 0146 9A42     		cmp	r2, r3
 2882 0148 04DC     		bgt	.L219
 2883              		.loc 1 785 0 is_stmt 0
 2884 014a 3B1C     		mov	r3, r7
 2885 014c 0F33     		add	r3, r3, #15
 2886 014e 0122     		mov	r2, #1
 2887 0150 1A70     		strb	r2, [r3]
 2888 0152 1EE0     		b	.L218
 2889              	.L219:
 786:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 2890              		.loc 1 786 0 is_stmt 1
 2891 0154 7A68     		ldr	r2, [r7, #4]
 2892 0156 6C4B     		ldr	r3, .L241+36
 2893 0158 9A42     		cmp	r2, r3
 2894 015a 04DC     		bgt	.L220
 2895              		.loc 1 786 0 is_stmt 0
 2896 015c 3B1C     		mov	r3, r7
 2897 015e 0F33     		add	r3, r3, #15
 2898 0160 0222     		mov	r2, #2
 2899 0162 1A70     		strb	r2, [r3]
 2900 0164 15E0     		b	.L218
 2901              	.L220:
 787:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 2902              		.loc 1 787 0 is_stmt 1
 2903 0166 7A68     		ldr	r2, [r7, #4]
 2904 0168 684B     		ldr	r3, .L241+40
 2905 016a 9A42     		cmp	r2, r3
 2906 016c 04DC     		bgt	.L221
 2907              		.loc 1 787 0 is_stmt 0
 2908 016e 3B1C     		mov	r3, r7
 2909 0170 0F33     		add	r3, r3, #15
 2910 0172 0322     		mov	r2, #3
 2911 0174 1A70     		strb	r2, [r3]
 2912 0176 0CE0     		b	.L218
 2913              	.L221:
 788:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 2914              		.loc 1 788 0 is_stmt 1
 2915 0178 7A68     		ldr	r2, [r7, #4]
 2916 017a 654B     		ldr	r3, .L241+44
 2917 017c 9A42     		cmp	r2, r3
 2918 017e 04DC     		bgt	.L222
 2919              		.loc 1 788 0 is_stmt 0
 2920 0180 3B1C     		mov	r3, r7
 2921 0182 0F33     		add	r3, r3, #15
 2922 0184 0422     		mov	r2, #4
 2923 0186 1A70     		strb	r2, [r3]
 2924 0188 03E0     		b	.L218
 2925              	.L222:
 789:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 2926              		.loc 1 789 0 is_stmt 1
 2927 018a 3B1C     		mov	r3, r7
 2928 018c 0F33     		add	r3, r3, #15
 2929 018e 0522     		mov	r2, #5
 2930 0190 1A70     		strb	r2, [r3]
 2931              	.L218:
 790:../Sources/TFC/TFC_CrystalClock.c ****   
 791:../Sources/TFC/TFC_CrystalClock.c **** // Select external oscilator and Reference Divider and clear IREFS to start ext osc
 792:../Sources/TFC/TFC_CrystalClock.c **** // If IRCLK is required it must be enabled outside of this driver, existing state will be maintaine
 793:../Sources/TFC/TFC_CrystalClock.c **** // CLKS=2, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
 794:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 2932              		.loc 1 794 0
 2933 0192 544A     		ldr	r2, .L241
 2934 0194 3B1C     		mov	r3, r7
 2935 0196 0E33     		add	r3, r3, #14
 2936 0198 1278     		ldrb	r2, [r2]
 2937 019a 1A70     		strb	r2, [r3]
 795:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these
 2938              		.loc 1 795 0
 2939 019c 3B1C     		mov	r3, r7
 2940 019e 0E33     		add	r3, r3, #14
 2941 01a0 3A1C     		mov	r2, r7
 2942 01a2 0E32     		add	r2, r2, #14
 2943 01a4 1178     		ldrb	r1, [r2]
 2944 01a6 0322     		mov	r2, #3
 2945 01a8 0A40     		and	r2, r1
 2946 01aa 1A70     		strb	r2, [r3]
 796:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(2) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 2947              		.loc 1 796 0
 2948 01ac 3B1C     		mov	r3, r7
 2949 01ae 0F33     		add	r3, r3, #15
 2950 01b0 1B78     		ldrb	r3, [r3]
 2951 01b2 DB00     		lsl	r3, r3, #3
 2952 01b4 DAB2     		uxtb	r2, r3
 2953 01b6 3823     		mov	r3, #56
 2954 01b8 1340     		and	r3, r2
 2955 01ba DAB2     		uxtb	r2, r3
 2956 01bc 3B1C     		mov	r3, r7
 2957 01be 0E33     		add	r3, r3, #14
 2958 01c0 1B78     		ldrb	r3, [r3]
 2959 01c2 1343     		orr	r3, r2
 2960 01c4 DAB2     		uxtb	r2, r3
 2961 01c6 3B1C     		mov	r3, r7
 2962 01c8 0E33     		add	r3, r3, #14
 2963 01ca 8021     		mov	r1, #128
 2964 01cc 4942     		neg	r1, r1
 2965 01ce 0A43     		orr	r2, r1
 2966 01d0 1A70     		strb	r2, [r3]
 797:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 2967              		.loc 1 797 0
 2968 01d2 444B     		ldr	r3, .L241
 2969 01d4 3A1C     		mov	r2, r7
 2970 01d6 0E32     		add	r2, r2, #14
 2971 01d8 1278     		ldrb	r2, [r2]
 2972 01da 1A70     		strb	r2, [r3]
 798:../Sources/TFC/TFC_CrystalClock.c **** 
 799:../Sources/TFC/TFC_CrystalClock.c **** // if the external oscillator is used need to wait for OSCINIT to set
 800:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 2973              		.loc 1 800 0
 2974 01dc BB1C     		add	r3, r7, #2
 2975 01de 1B78     		ldrb	r3, [r3]
 2976 01e0 002B     		cmp	r3, #0
 2977 01e2 24D0     		beq	.L223
 801:../Sources/TFC/TFC_CrystalClock.c ****   {
 802:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 2978              		.loc 1 802 0
 2979 01e4 3B1C     		mov	r3, r7
 2980 01e6 0C33     		add	r3, r3, #12
 2981 01e8 0022     		mov	r2, #0
 2982 01ea 1A80     		strh	r2, [r3]
 2983 01ec 0DE0     		b	.L224
 2984              	.L227:
 803:../Sources/TFC/TFC_CrystalClock.c ****     {
 804:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 2985              		.loc 1 804 0
 2986 01ee 3D4B     		ldr	r3, .L241
 2987 01f0 9B79     		ldrb	r3, [r3, #6]
 2988 01f2 DBB2     		uxtb	r3, r3
 2989 01f4 1A1C     		mov	r2, r3
 2990 01f6 0223     		mov	r3, #2
 2991 01f8 1340     		and	r3, r2
 2992 01fa 0ED1     		bne	.L238
 2993              	.L225:
 802:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 2994              		.loc 1 802 0
 2995 01fc 3B1C     		mov	r3, r7
 2996 01fe 0C33     		add	r3, r3, #12
 2997 0200 3A1C     		mov	r2, r7
 2998 0202 0C32     		add	r2, r2, #12
 2999 0204 1288     		ldrh	r2, [r2]
 3000 0206 0132     		add	r2, r2, #1
 3001 0208 1A80     		strh	r2, [r3]
 3002              	.L224:
 802:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 3003              		.loc 1 802 0 is_stmt 0
 3004 020a 3B1C     		mov	r3, r7
 3005 020c 0C33     		add	r3, r3, #12
 3006 020e 0021     		mov	r1, #0
 3007 0210 5A5E     		ldrsh	r2, [r3, r1]
 3008 0212 404B     		ldr	r3, .L241+48
 3009 0214 9A42     		cmp	r2, r3
 3010 0216 EADD     		ble	.L227
 3011 0218 00E0     		b	.L226
 3012              	.L238:
 3013              		.loc 1 804 0 is_stmt 1
 3014 021a C046     		mov	r8, r8
 3015              	.L226:
 805:../Sources/TFC/TFC_CrystalClock.c ****     }
 806:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with err
 3016              		.loc 1 806 0
 3017 021c 314B     		ldr	r3, .L241
 3018 021e 9B79     		ldrb	r3, [r3, #6]
 3019 0220 DBB2     		uxtb	r3, r3
 3020 0222 1A1C     		mov	r2, r3
 3021 0224 0223     		mov	r3, #2
 3022 0226 1340     		and	r3, r2
 3023 0228 01D1     		bne	.L223
 3024              		.loc 1 806 0 is_stmt 0
 3025 022a 2323     		mov	r3, #35
 3026 022c 56E0     		b	.L208
 3027              	.L223:
 807:../Sources/TFC/TFC_CrystalClock.c ****   }
 808:../Sources/TFC/TFC_CrystalClock.c **** 
 809:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
 810:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3028              		.loc 1 810 0 is_stmt 1
 3029 022e 3B1C     		mov	r3, r7
 3030 0230 0C33     		add	r3, r3, #12
 3031 0232 0022     		mov	r2, #0
 3032 0234 1A80     		strh	r2, [r3]
 3033 0236 0DE0     		b	.L228
 3034              	.L231:
 811:../Sources/TFC/TFC_CrystalClock.c ****   {
 812:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 3035              		.loc 1 812 0
 3036 0238 2A4B     		ldr	r3, .L241
 3037 023a 9B79     		ldrb	r3, [r3, #6]
 3038 023c DBB2     		uxtb	r3, r3
 3039 023e 1A1C     		mov	r2, r3
 3040 0240 1023     		mov	r3, #16
 3041 0242 1340     		and	r3, r2
 3042 0244 0ED0     		beq	.L239
 3043              	.L229:
 810:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3044              		.loc 1 810 0
 3045 0246 3B1C     		mov	r3, r7
 3046 0248 0C33     		add	r3, r3, #12
 3047 024a 3A1C     		mov	r2, r7
 3048 024c 0C32     		add	r2, r2, #12
 3049 024e 1288     		ldrh	r2, [r2]
 3050 0250 0132     		add	r2, r2, #1
 3051 0252 1A80     		strh	r2, [r3]
 3052              	.L228:
 810:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3053              		.loc 1 810 0 is_stmt 0
 3054 0254 3B1C     		mov	r3, r7
 3055 0256 0C33     		add	r3, r3, #12
 3056 0258 0021     		mov	r1, #0
 3057 025a 5A5E     		ldrsh	r2, [r3, r1]
 3058 025c 2E4B     		ldr	r3, .L241+52
 3059 025e 9A42     		cmp	r2, r3
 3060 0260 EADD     		ble	.L231
 3061 0262 00E0     		b	.L230
 3062              	.L239:
 3063              		.loc 1 812 0 is_stmt 1
 3064 0264 C046     		mov	r8, r8
 3065              	.L230:
 813:../Sources/TFC/TFC_CrystalClock.c ****   }
 814:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 3066              		.loc 1 814 0
 3067 0266 1F4B     		ldr	r3, .L241
 3068 0268 9B79     		ldrb	r3, [r3, #6]
 3069 026a DBB2     		uxtb	r3, r3
 3070 026c 1A1C     		mov	r2, r3
 3071 026e 1023     		mov	r3, #16
 3072 0270 1340     		and	r3, r2
 3073 0272 01D0     		beq	.L232
 3074              		.loc 1 814 0 is_stmt 0
 3075 0274 1123     		mov	r3, #17
 3076 0276 31E0     		b	.L208
 3077              	.L232:
 815:../Sources/TFC/TFC_CrystalClock.c ****   
 816:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
 817:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3078              		.loc 1 817 0 is_stmt 1
 3079 0278 3B1C     		mov	r3, r7
 3080 027a 0C33     		add	r3, r3, #12
 3081 027c 0022     		mov	r2, #0
 3082 027e 1A80     		strh	r2, [r3]
 3083 0280 0FE0     		b	.L233
 3084              	.L236:
 818:../Sources/TFC/TFC_CrystalClock.c ****   {
 819:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 3085              		.loc 1 819 0
 3086 0282 184B     		ldr	r3, .L241
 3087 0284 9B79     		ldrb	r3, [r3, #6]
 3088 0286 DBB2     		uxtb	r3, r3
 3089 0288 1A1C     		mov	r2, r3
 3090 028a 0C23     		mov	r3, #12
 3091 028c 1340     		and	r3, r2
 3092 028e 9B08     		lsr	r3, r3, #2
 3093 0290 022B     		cmp	r3, #2
 3094 0292 0ED0     		beq	.L240
 3095              	.L234:
 817:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3096              		.loc 1 817 0
 3097 0294 3B1C     		mov	r3, r7
 3098 0296 0C33     		add	r3, r3, #12
 3099 0298 3A1C     		mov	r2, r7
 3100 029a 0C32     		add	r2, r2, #12
 3101 029c 1288     		ldrh	r2, [r2]
 3102 029e 0132     		add	r2, r2, #1
 3103 02a0 1A80     		strh	r2, [r3]
 3104              	.L233:
 817:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3105              		.loc 1 817 0 is_stmt 0
 3106 02a2 3B1C     		mov	r3, r7
 3107 02a4 0C33     		add	r3, r3, #12
 3108 02a6 0021     		mov	r1, #0
 3109 02a8 5A5E     		ldrsh	r2, [r3, r1]
 3110 02aa 1B4B     		ldr	r3, .L241+52
 3111 02ac 9A42     		cmp	r2, r3
 3112 02ae E8DD     		ble	.L236
 3113 02b0 00E0     		b	.L235
 3114              	.L240:
 3115              		.loc 1 819 0 is_stmt 1
 3116 02b2 C046     		mov	r8, r8
 3117              	.L235:
 820:../Sources/TFC/TFC_CrystalClock.c ****   }
 821:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 3118              		.loc 1 821 0
 3119 02b4 0B4B     		ldr	r3, .L241
 3120 02b6 9B79     		ldrb	r3, [r3, #6]
 3121 02b8 DBB2     		uxtb	r3, r3
 3122 02ba 1A1C     		mov	r2, r3
 3123 02bc 0C23     		mov	r3, #12
 3124 02be 1340     		and	r3, r2
 3125 02c0 9B08     		lsr	r3, r3, #2
 3126 02c2 022B     		cmp	r3, #2
 3127 02c4 01D0     		beq	.L237
 3128              		.loc 1 821 0 is_stmt 0
 3129 02c6 1A23     		mov	r3, #26
 3130 02c8 08E0     		b	.L208
 3131              	.L237:
 822:../Sources/TFC/TFC_CrystalClock.c ****  
 823:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE  
 824:../Sources/TFC/TFC_CrystalClock.c **** // It is recommended that the clock monitor is enabled when using an external clock as the clock so
 825:../Sources/TFC/TFC_CrystalClock.c **** // It is enabled here but can be removed if this is not required.
 826:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 3132              		.loc 1 826 0 is_stmt 1
 3133 02ca 064B     		ldr	r3, .L241
 3134 02cc 054A     		ldr	r2, .L241
 3135 02ce 5279     		ldrb	r2, [r2, #5]
 3136 02d0 D2B2     		uxtb	r2, r2
 3137 02d2 2021     		mov	r1, #32
 3138 02d4 0A43     		orr	r2, r1
 3139 02d6 D2B2     		uxtb	r2, r2
 3140 02d8 5A71     		strb	r2, [r3, #5]
 827:../Sources/TFC/TFC_CrystalClock.c ****   
 828:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency
 3141              		.loc 1 828 0
 3142 02da 7B68     		ldr	r3, [r7, #4]
 3143              	.L208:
 829:../Sources/TFC/TFC_CrystalClock.c **** } // fei_fbe
 3144              		.loc 1 829 0
 3145 02dc 181C     		mov	r0, r3
 3146 02de BD46     		mov	sp, r7
 3147 02e0 04B0     		add	sp, sp, #16
 3148              		@ sp needed for prologue
 3149 02e2 80BD     		pop	{r7, pc}
 3150              	.L242:
 3151              		.align	2
 3152              	.L241:
 3153 02e4 00400640 		.word	1074151424
 3154 02e8 80F0FA02 		.word	50000000
 3155 02ec 2F750000 		.word	29999
 3156 02f0 409C0000 		.word	40000
 3157 02f4 BFC62D00 		.word	2999999
 3158 02f8 0048E801 		.word	32000000
 3159 02fc 00127A00 		.word	8000000
 3160 0300 D0121300 		.word	1250000
 3161 0304 A0252600 		.word	2500000
 3162 0308 404B4C00 		.word	5000000
 3163 030c 80969800 		.word	10000000
 3164 0310 002D3101 		.word	20000000
 3165 0314 0F270000 		.word	9999
 3166 0318 CF070000 		.word	1999
 3167              		.cfi_endproc
 3168              	.LFE11:
 3170              		.section	.text.fbe_fee,"ax",%progbits
 3171              		.align	2
 3172              		.global	fbe_fee
 3173              		.code	16
 3174              		.thumb_func
 3176              	fbe_fee:
 3177              	.LFB12:
 830:../Sources/TFC/TFC_CrystalClock.c **** 
 831:../Sources/TFC/TFC_CrystalClock.c **** 
 832:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fee(int crystal_val)
 833:../Sources/TFC/TFC_CrystalClock.c **** {
 3178              		.loc 1 833 0
 3179              		.cfi_startproc
 3180 0000 80B5     		push	{r7, lr}
 3181              	.LCFI36:
 3182              		.cfi_def_cfa_offset 8
 3183              		.cfi_offset 7, -8
 3184              		.cfi_offset 14, -4
 3185 0002 84B0     		sub	sp, sp, #16
 3186              	.LCFI37:
 3187              		.cfi_def_cfa_offset 24
 3188 0004 00AF     		add	r7, sp, #0
 3189              	.LCFI38:
 3190              		.cfi_def_cfa_register 7
 3191 0006 7860     		str	r0, [r7, #4]
 834:../Sources/TFC/TFC_CrystalClock.c ****   short i, fll_ref_freq;
 835:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out;
 836:../Sources/TFC/TFC_CrystalClock.c **** 
 837:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 838:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3192              		.loc 1 838 0
 3193 0008 494B     		ldr	r3, .L256
 3194 000a 9B79     		ldrb	r3, [r3, #6]
 3195 000c DBB2     		uxtb	r3, r3
 3196 000e 1A1C     		mov	r2, r3
 3197 0010 0C23     		mov	r3, #12
 3198 0012 1340     		and	r3, r2
 3199 0014 9B08     		lsr	r3, r3, #2
 3200 0016 022B     		cmp	r3, #2
 3201 0018 14D1     		bne	.L244
 839:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3202              		.loc 1 839 0
 3203 001a 454B     		ldr	r3, .L256
 3204 001c 9B79     		ldrb	r3, [r3, #6]
 3205 001e DBB2     		uxtb	r3, r3
 3206 0020 1A1C     		mov	r2, r3
 3207 0022 1023     		mov	r3, #16
 3208 0024 1340     		and	r3, r2
 838:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3209              		.loc 1 838 0
 3210 0026 0DD1     		bne	.L244
 840:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 3211              		.loc 1 840 0
 3212 0028 414B     		ldr	r3, .L256
 3213 002a 9B79     		ldrb	r3, [r3, #6]
 3214 002c DBB2     		uxtb	r3, r3
 3215 002e 1A1C     		mov	r2, r3
 3216 0030 2023     		mov	r3, #32
 3217 0032 1340     		and	r3, r2
 839:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3218              		.loc 1 839 0
 3219 0034 06D1     		bne	.L244
 841:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 3220              		.loc 1 841 0
 3221 0036 3E4B     		ldr	r3, .L256
 3222 0038 5B78     		ldrb	r3, [r3, #1]
 3223 003a DBB2     		uxtb	r3, r3
 3224 003c 1A1C     		mov	r2, r3
 3225 003e 0223     		mov	r3, #2
 3226 0040 1340     		and	r3, r2
 838:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3227              		.loc 1 838 0
 3228 0042 01D0     		beq	.L245
 3229              	.L244:
 842:../Sources/TFC/TFC_CrystalClock.c ****   {
 843:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 3230              		.loc 1 843 0
 3231 0044 0423     		mov	r3, #4
 3232 0046 6EE0     		b	.L246
 3233              	.L245:
 844:../Sources/TFC/TFC_CrystalClock.c ****   }
 845:../Sources/TFC/TFC_CrystalClock.c ****   
 846:../Sources/TFC/TFC_CrystalClock.c ****   // The FLL ref clk divide value depends on FRDIV and the RANGE value
 847:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT) > 0)
 3234              		.loc 1 847 0
 3235 0048 394B     		ldr	r3, .L256
 3236 004a 5B78     		ldrb	r3, [r3, #1]
 3237 004c DBB2     		uxtb	r3, r3
 3238 004e 1A1C     		mov	r2, r3
 3239 0050 3023     		mov	r3, #48
 3240 0052 1340     		and	r3, r2
 3241 0054 1B09     		lsr	r3, r3, #4
 3242 0056 14D0     		beq	.L247
 848:../Sources/TFC/TFC_CrystalClock.c ****   {
 849:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = (crystal_val / (32 << ((MCG_C1 & MCG_C1_FRDIV_MASK) >> MCG_C1_FRDIV_SHIFT)));
 3243              		.loc 1 849 0
 3244 0058 354B     		ldr	r3, .L256
 3245 005a 1B78     		ldrb	r3, [r3]
 3246 005c DBB2     		uxtb	r3, r3
 3247 005e 1A1C     		mov	r2, r3
 3248 0060 3823     		mov	r3, #56
 3249 0062 1340     		and	r3, r2
 3250 0064 DB08     		lsr	r3, r3, #3
 3251 0066 2022     		mov	r2, #32
 3252 0068 111C     		mov	r1, r2
 3253 006a 9940     		lsl	r1, r1, r3
 3254 006c 0B1C     		mov	r3, r1
 3255 006e 7868     		ldr	r0, [r7, #4]
 3256 0070 191C     		mov	r1, r3
 3257 0072 FFF7FEFF 		bl	__aeabi_idiv
 3258 0076 031C     		mov	r3, r0
 3259 0078 1A1C     		mov	r2, r3
 3260 007a 3B1C     		mov	r3, r7
 3261 007c 0C33     		add	r3, r3, #12
 3262 007e 1A80     		strh	r2, [r3]
 3263 0080 13E0     		b	.L248
 3264              	.L247:
 850:../Sources/TFC/TFC_CrystalClock.c ****   }
 851:../Sources/TFC/TFC_CrystalClock.c ****   else
 852:../Sources/TFC/TFC_CrystalClock.c ****   {
 853:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (1 << (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT)))
 3265              		.loc 1 853 0
 3266 0082 2B4B     		ldr	r3, .L256
 3267 0084 5B78     		ldrb	r3, [r3, #1]
 3268 0086 DBB2     		uxtb	r3, r3
 3269 0088 1A1C     		mov	r2, r3
 3270 008a 3023     		mov	r3, #48
 3271 008c 1340     		and	r3, r2
 3272 008e 1B09     		lsr	r3, r3, #4
 3273 0090 0122     		mov	r2, #1
 3274 0092 111C     		mov	r1, r2
 3275 0094 9940     		lsl	r1, r1, r3
 3276 0096 0B1C     		mov	r3, r1
 3277 0098 7868     		ldr	r0, [r7, #4]
 3278 009a 191C     		mov	r1, r3
 3279 009c FFF7FEFF 		bl	__aeabi_idiv
 3280 00a0 031C     		mov	r3, r0
 3281 00a2 1A1C     		mov	r2, r3
 3282 00a4 3B1C     		mov	r3, r7
 3283 00a6 0C33     		add	r3, r3, #12
 3284 00a8 1A80     		strh	r2, [r3]
 3285              	.L248:
 854:../Sources/TFC/TFC_CrystalClock.c ****   }
 855:../Sources/TFC/TFC_CrystalClock.c ****   
 856:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
 857:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(fll_ref_freq); // FLL reference frequency calculated from ext ref freq and FRD
 3286              		.loc 1 857 0
 3287 00aa 3B1C     		mov	r3, r7
 3288 00ac 0C33     		add	r3, r3, #12
 3289 00ae 0022     		mov	r2, #0
 3290 00b0 9B5E     		ldrsh	r3, [r3, r2]
 3291 00b2 181C     		mov	r0, r3
 3292 00b4 FFF7FEFF 		bl	fll_freq
 3293 00b8 031C     		mov	r3, r0
 3294 00ba BB60     		str	r3, [r7, #8]
 858:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 3295              		.loc 1 858 0
 3296 00bc BB68     		ldr	r3, [r7, #8]
 3297 00be 3B2B     		cmp	r3, #59
 3298 00c0 01DC     		bgt	.L249
 3299              		.loc 1 858 0 is_stmt 0
 3300 00c2 BB68     		ldr	r3, [r7, #8]
 3301 00c4 2FE0     		b	.L246
 3302              	.L249:
 859:../Sources/TFC/TFC_CrystalClock.c ****   
 860:../Sources/TFC/TFC_CrystalClock.c **** // Clear CLKS field to switch CLKS mux to select FLL output
 861:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 &= ~MCG_C1_CLKS_MASK; // clear CLKS to select FLL output
 3303              		.loc 1 861 0 is_stmt 1
 3304 00c6 1A4B     		ldr	r3, .L256
 3305 00c8 194A     		ldr	r2, .L256
 3306 00ca 1278     		ldrb	r2, [r2]
 3307 00cc D1B2     		uxtb	r1, r2
 3308 00ce 3F22     		mov	r2, #63
 3309 00d0 0A40     		and	r2, r1
 3310 00d2 D2B2     		uxtb	r2, r2
 3311 00d4 1A70     		strb	r2, [r3]
 862:../Sources/TFC/TFC_CrystalClock.c **** 
 863:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is FLL
 864:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3312              		.loc 1 864 0
 3313 00d6 3B1C     		mov	r3, r7
 3314 00d8 0E33     		add	r3, r3, #14
 3315 00da 0022     		mov	r2, #0
 3316 00dc 1A80     		strh	r2, [r3]
 3317 00de 0EE0     		b	.L250
 3318              	.L253:
 865:../Sources/TFC/TFC_CrystalClock.c ****   {
 866:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST
 3319              		.loc 1 866 0
 3320 00e0 134B     		ldr	r3, .L256
 3321 00e2 9B79     		ldrb	r3, [r3, #6]
 3322 00e4 DBB2     		uxtb	r3, r3
 3323 00e6 1A1C     		mov	r2, r3
 3324 00e8 0C23     		mov	r3, #12
 3325 00ea 1340     		and	r3, r2
 3326 00ec 9B08     		lsr	r3, r3, #2
 3327 00ee 0ED0     		beq	.L255
 3328              	.L251:
 864:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3329              		.loc 1 864 0
 3330 00f0 3B1C     		mov	r3, r7
 3331 00f2 0E33     		add	r3, r3, #14
 3332 00f4 3A1C     		mov	r2, r7
 3333 00f6 0E32     		add	r2, r2, #14
 3334 00f8 1288     		ldrh	r2, [r2]
 3335 00fa 0132     		add	r2, r2, #1
 3336 00fc 1A80     		strh	r2, [r3]
 3337              	.L250:
 864:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3338              		.loc 1 864 0 is_stmt 0
 3339 00fe 3B1C     		mov	r3, r7
 3340 0100 0E33     		add	r3, r3, #14
 3341 0102 0021     		mov	r1, #0
 3342 0104 5A5E     		ldrsh	r2, [r3, r1]
 3343 0106 0B4B     		ldr	r3, .L256+4
 3344 0108 9A42     		cmp	r2, r3
 3345 010a E9DD     		ble	.L253
 3346 010c 00E0     		b	.L252
 3347              	.L255:
 3348              		.loc 1 866 0 is_stmt 1
 3349 010e C046     		mov	r8, r8
 3350              	.L252:
 867:../Sources/TFC/TFC_CrystalClock.c ****   }
 868:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check FLL is really
 3351              		.loc 1 868 0
 3352 0110 074B     		ldr	r3, .L256
 3353 0112 9B79     		ldrb	r3, [r3, #6]
 3354 0114 DBB2     		uxtb	r3, r3
 3355 0116 1A1C     		mov	r2, r3
 3356 0118 0C23     		mov	r3, #12
 3357 011a 1340     		and	r3, r2
 3358 011c 9B08     		lsr	r3, r3, #2
 3359 011e 01D0     		beq	.L254
 3360              		.loc 1 868 0 is_stmt 0
 3361 0120 1823     		mov	r3, #24
 3362 0122 00E0     		b	.L246
 3363              	.L254:
 869:../Sources/TFC/TFC_CrystalClock.c ****   
 870:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEE mode
 871:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out;
 3364              		.loc 1 871 0 is_stmt 1
 3365 0124 BB68     		ldr	r3, [r7, #8]
 3366              	.L246:
 872:../Sources/TFC/TFC_CrystalClock.c **** } // fbe_fee
 3367              		.loc 1 872 0
 3368 0126 181C     		mov	r0, r3
 3369 0128 BD46     		mov	sp, r7
 3370 012a 04B0     		add	sp, sp, #16
 3371              		@ sp needed for prologue
 3372 012c 80BD     		pop	{r7, pc}
 3373              	.L257:
 3374 012e C046     		.align	2
 3375              	.L256:
 3376 0130 00400640 		.word	1074151424
 3377 0134 CF070000 		.word	1999
 3378              		.cfi_endproc
 3379              	.LFE12:
 3381              		.section	.text.fee_fbe,"ax",%progbits
 3382              		.align	2
 3383              		.global	fee_fbe
 3384              		.code	16
 3385              		.thumb_func
 3387              	fee_fbe:
 3388              	.LFB13:
 873:../Sources/TFC/TFC_CrystalClock.c **** 
 874:../Sources/TFC/TFC_CrystalClock.c **** 
 875:../Sources/TFC/TFC_CrystalClock.c **** int fee_fbe(int crystal_val)
 876:../Sources/TFC/TFC_CrystalClock.c **** { 
 3389              		.loc 1 876 0
 3390              		.cfi_startproc
 3391 0000 80B5     		push	{r7, lr}
 3392              	.LCFI39:
 3393              		.cfi_def_cfa_offset 8
 3394              		.cfi_offset 7, -8
 3395              		.cfi_offset 14, -4
 3396 0002 84B0     		sub	sp, sp, #16
 3397              	.LCFI40:
 3398              		.cfi_def_cfa_offset 24
 3399 0004 00AF     		add	r7, sp, #0
 3400              	.LCFI41:
 3401              		.cfi_def_cfa_register 7
 3402 0006 7860     		str	r0, [r7, #4]
 877:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 878:../Sources/TFC/TFC_CrystalClock.c ****   
 879:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FEE mode
 880:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 3403              		.loc 1 880 0
 3404 0008 274B     		ldr	r3, .L268
 3405 000a 9B79     		ldrb	r3, [r3, #6]
 3406 000c DBB2     		uxtb	r3, r3
 3407 000e 1A1C     		mov	r2, r3
 3408 0010 0C23     		mov	r3, #12
 3409 0012 1340     		and	r3, r2
 3410 0014 9B08     		lsr	r3, r3, #2
 3411 0016 0DD1     		bne	.L259
 881:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3412              		.loc 1 881 0
 3413 0018 234B     		ldr	r3, .L268
 3414 001a 9B79     		ldrb	r3, [r3, #6]
 3415 001c DBB2     		uxtb	r3, r3
 3416 001e 1A1C     		mov	r2, r3
 3417 0020 1023     		mov	r3, #16
 3418 0022 1340     		and	r3, r2
 880:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 3419              		.loc 1 880 0
 3420 0024 06D1     		bne	.L259
 882:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 3421              		.loc 1 882 0
 3422 0026 204B     		ldr	r3, .L268
 3423 0028 9B79     		ldrb	r3, [r3, #6]
 3424 002a DBB2     		uxtb	r3, r3
 3425 002c 1A1C     		mov	r2, r3
 3426 002e 2023     		mov	r3, #32
 3427 0030 1340     		and	r3, r2
 880:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 3428              		.loc 1 880 0
 3429 0032 01D0     		beq	.L260
 3430              	.L259:
 883:../Sources/TFC/TFC_CrystalClock.c ****   {
 884:../Sources/TFC/TFC_CrystalClock.c ****     return 0x2;                                                       // return error code
 3431              		.loc 1 884 0
 3432 0034 0223     		mov	r3, #2
 3433 0036 32E0     		b	.L261
 3434              	.L260:
 885:../Sources/TFC/TFC_CrystalClock.c ****   }
 886:../Sources/TFC/TFC_CrystalClock.c ****   
 887:../Sources/TFC/TFC_CrystalClock.c **** // Set CLKS field to 2 to switch CLKS mux to select ext ref clock
 888:../Sources/TFC/TFC_CrystalClock.c **** // MCG is current in FEE mode so CLKS field = 0 so can just OR in new value
 889:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 |= MCG_C1_CLKS(2); // set CLKS to select ext ref clock
 3435              		.loc 1 889 0
 3436 0038 1B4B     		ldr	r3, .L268
 3437 003a 1B4A     		ldr	r2, .L268
 3438 003c 1278     		ldrb	r2, [r2]
 3439 003e D2B2     		uxtb	r2, r2
 3440 0040 8021     		mov	r1, #128
 3441 0042 4942     		neg	r1, r1
 3442 0044 0A43     		orr	r2, r1
 3443 0046 D2B2     		uxtb	r2, r2
 3444 0048 1A70     		strb	r2, [r3]
 890:../Sources/TFC/TFC_CrystalClock.c **** 
 891:../Sources/TFC/TFC_CrystalClock.c **** /// Wait for clock status bits to show clock source is ext ref clk
 892:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3445              		.loc 1 892 0
 3446 004a 3B1C     		mov	r3, r7
 3447 004c 0E33     		add	r3, r3, #14
 3448 004e 0022     		mov	r2, #0
 3449 0050 1A80     		strh	r2, [r3]
 3450 0052 0FE0     		b	.L262
 3451              	.L265:
 893:../Sources/TFC/TFC_CrystalClock.c ****   {
 894:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 3452              		.loc 1 894 0
 3453 0054 144B     		ldr	r3, .L268
 3454 0056 9B79     		ldrb	r3, [r3, #6]
 3455 0058 DBB2     		uxtb	r3, r3
 3456 005a 1A1C     		mov	r2, r3
 3457 005c 0C23     		mov	r3, #12
 3458 005e 1340     		and	r3, r2
 3459 0060 9B08     		lsr	r3, r3, #2
 3460 0062 022B     		cmp	r3, #2
 3461 0064 0ED0     		beq	.L267
 3462              	.L263:
 892:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3463              		.loc 1 892 0
 3464 0066 3B1C     		mov	r3, r7
 3465 0068 0E33     		add	r3, r3, #14
 3466 006a 3A1C     		mov	r2, r7
 3467 006c 0E32     		add	r2, r2, #14
 3468 006e 1288     		ldrh	r2, [r2]
 3469 0070 0132     		add	r2, r2, #1
 3470 0072 1A80     		strh	r2, [r3]
 3471              	.L262:
 892:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3472              		.loc 1 892 0 is_stmt 0
 3473 0074 3B1C     		mov	r3, r7
 3474 0076 0E33     		add	r3, r3, #14
 3475 0078 0021     		mov	r1, #0
 3476 007a 5A5E     		ldrsh	r2, [r3, r1]
 3477 007c 0B4B     		ldr	r3, .L268+4
 3478 007e 9A42     		cmp	r2, r3
 3479 0080 E8DD     		ble	.L265
 3480 0082 00E0     		b	.L264
 3481              	.L267:
 3482              		.loc 1 894 0 is_stmt 1
 3483 0084 C046     		mov	r8, r8
 3484              	.L264:
 895:../Sources/TFC/TFC_CrystalClock.c ****   }
 896:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 3485              		.loc 1 896 0
 3486 0086 084B     		ldr	r3, .L268
 3487 0088 9B79     		ldrb	r3, [r3, #6]
 3488 008a DBB2     		uxtb	r3, r3
 3489 008c 1A1C     		mov	r2, r3
 3490 008e 0C23     		mov	r3, #12
 3491 0090 1340     		and	r3, r2
 3492 0092 9B08     		lsr	r3, r3, #2
 3493 0094 022B     		cmp	r3, #2
 3494 0096 01D0     		beq	.L266
 3495              		.loc 1 896 0 is_stmt 0
 3496 0098 1A23     		mov	r3, #26
 3497 009a 00E0     		b	.L261
 3498              	.L266:
 897:../Sources/TFC/TFC_CrystalClock.c ****   
 898:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE mode
 899:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val;
 3499              		.loc 1 899 0 is_stmt 1
 3500 009c 7B68     		ldr	r3, [r7, #4]
 3501              	.L261:
 900:../Sources/TFC/TFC_CrystalClock.c **** } // fee_fbe
 3502              		.loc 1 900 0
 3503 009e 181C     		mov	r0, r3
 3504 00a0 BD46     		mov	sp, r7
 3505 00a2 04B0     		add	sp, sp, #16
 3506              		@ sp needed for prologue
 3507 00a4 80BD     		pop	{r7, pc}
 3508              	.L269:
 3509 00a6 C046     		.align	2
 3510              	.L268:
 3511 00a8 00400640 		.word	1074151424
 3512 00ac CF070000 		.word	1999
 3513              		.cfi_endproc
 3514              	.LFE13:
 3516              		.section	.text.fbe_fbi,"ax",%progbits
 3517              		.align	2
 3518              		.global	fbe_fbi
 3519              		.code	16
 3520              		.thumb_func
 3522              	fbe_fbi:
 3523              	.LFB14:
 901:../Sources/TFC/TFC_CrystalClock.c **** 
 902:../Sources/TFC/TFC_CrystalClock.c **** 
 903:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fbi(int irc_freq, unsigned char irc_select)
 904:../Sources/TFC/TFC_CrystalClock.c **** {
 3524              		.loc 1 904 0
 3525              		.cfi_startproc
 3526 0000 80B5     		push	{r7, lr}
 3527              	.LCFI42:
 3528              		.cfi_def_cfa_offset 8
 3529              		.cfi_offset 7, -8
 3530              		.cfi_offset 14, -4
 3531 0002 84B0     		sub	sp, sp, #16
 3532              	.LCFI43:
 3533              		.cfi_def_cfa_offset 24
 3534 0004 00AF     		add	r7, sp, #0
 3535              	.LCFI44:
 3536              		.cfi_def_cfa_register 7
 3537 0006 7860     		str	r0, [r7, #4]
 3538 0008 0A1C     		mov	r2, r1
 3539 000a FB1C     		add	r3, r7, #3
 3540 000c 1A70     		strb	r2, [r3]
 905:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 906:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
 907:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 908:../Sources/TFC/TFC_CrystalClock.c ****   
 909:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 910:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3541              		.loc 1 910 0
 3542 000e 944B     		ldr	r3, .L305
 3543 0010 9B79     		ldrb	r3, [r3, #6]
 3544 0012 DBB2     		uxtb	r3, r3
 3545 0014 1A1C     		mov	r2, r3
 3546 0016 0C23     		mov	r3, #12
 3547 0018 1340     		and	r3, r2
 3548 001a 9B08     		lsr	r3, r3, #2
 3549 001c 022B     		cmp	r3, #2
 3550 001e 14D1     		bne	.L271
 911:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3551              		.loc 1 911 0
 3552 0020 8F4B     		ldr	r3, .L305
 3553 0022 9B79     		ldrb	r3, [r3, #6]
 3554 0024 DBB2     		uxtb	r3, r3
 3555 0026 1A1C     		mov	r2, r3
 3556 0028 1023     		mov	r3, #16
 3557 002a 1340     		and	r3, r2
 910:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3558              		.loc 1 910 0
 3559 002c 0DD1     		bne	.L271
 912:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 3560              		.loc 1 912 0
 3561 002e 8C4B     		ldr	r3, .L305
 3562 0030 9B79     		ldrb	r3, [r3, #6]
 3563 0032 DBB2     		uxtb	r3, r3
 3564 0034 1A1C     		mov	r2, r3
 3565 0036 2023     		mov	r3, #32
 3566 0038 1340     		and	r3, r2
 911:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3567              		.loc 1 911 0
 3568 003a 06D1     		bne	.L271
 913:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 3569              		.loc 1 913 0
 3570 003c 884B     		ldr	r3, .L305
 3571 003e 5B78     		ldrb	r3, [r3, #1]
 3572 0040 DBB2     		uxtb	r3, r3
 3573 0042 1A1C     		mov	r2, r3
 3574 0044 0223     		mov	r3, #2
 3575 0046 1340     		and	r3, r2
 910:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3576              		.loc 1 910 0
 3577 0048 01D0     		beq	.L272
 3578              	.L271:
 914:../Sources/TFC/TFC_CrystalClock.c ****   {
 915:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 3579              		.loc 1 915 0
 3580 004a 0423     		mov	r3, #4
 3581 004c 04E1     		b	.L273
 3582              	.L272:
 916:../Sources/TFC/TFC_CrystalClock.c ****   }
 917:../Sources/TFC/TFC_CrystalClock.c **** 
 918:../Sources/TFC/TFC_CrystalClock.c **** // Check that the irc frequency matches the selected IRC 
 919:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 3583              		.loc 1 919 0
 3584 004e FB1C     		add	r3, r7, #3
 3585 0050 1B78     		ldrb	r3, [r3]
 3586 0052 002B     		cmp	r3, #0
 3587 0054 09D1     		bne	.L274
 920:../Sources/TFC/TFC_CrystalClock.c ****   {    
 921:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 31250) || (irc_freq > 39063)) {return 0x31;}
 3588              		.loc 1 921 0
 3589 0056 7A68     		ldr	r2, [r7, #4]
 3590 0058 824B     		ldr	r3, .L305+4
 3591 005a 9A42     		cmp	r2, r3
 3592 005c 03DD     		ble	.L275
 3593              		.loc 1 921 0 is_stmt 0
 3594 005e 7A68     		ldr	r2, [r7, #4]
 3595 0060 814B     		ldr	r3, .L305+8
 3596 0062 9A42     		cmp	r2, r3
 3597 0064 0BDD     		ble	.L276
 3598              	.L275:
 3599              		.loc 1 921 0
 3600 0066 3123     		mov	r3, #49
 3601 0068 F6E0     		b	.L273
 3602              	.L274:
 922:../Sources/TFC/TFC_CrystalClock.c ****   }
 923:../Sources/TFC/TFC_CrystalClock.c ****   else
 924:../Sources/TFC/TFC_CrystalClock.c ****   {
 925:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 3000000) || (irc_freq > 5000000)) {return 0x32;} // Fast IRC freq
 3603              		.loc 1 925 0 is_stmt 1
 3604 006a 7A68     		ldr	r2, [r7, #4]
 3605 006c 7F4B     		ldr	r3, .L305+12
 3606 006e 9A42     		cmp	r2, r3
 3607 0070 03DD     		ble	.L277
 3608              		.loc 1 925 0 is_stmt 0
 3609 0072 7A68     		ldr	r2, [r7, #4]
 3610 0074 7E4B     		ldr	r3, .L305+16
 3611 0076 9A42     		cmp	r2, r3
 3612 0078 01DD     		ble	.L276
 3613              	.L277:
 3614              		.loc 1 925 0
 3615 007a 3223     		mov	r3, #50
 3616 007c ECE0     		b	.L273
 3617              	.L276:
 926:../Sources/TFC/TFC_CrystalClock.c ****   }
 927:../Sources/TFC/TFC_CrystalClock.c ****   
 928:../Sources/TFC/TFC_CrystalClock.c **** // Select the required IRC
 929:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 3618              		.loc 1 929 0 is_stmt 1
 3619 007e FB1C     		add	r3, r7, #3
 3620 0080 1B78     		ldrb	r3, [r3]
 3621 0082 002B     		cmp	r3, #0
 3622 0084 08D0     		beq	.L278
 930:../Sources/TFC/TFC_CrystalClock.c ****   {
 931:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 |= MCG_C2_IRCS_MASK; // select fast IRC by setting IRCS
 3623              		.loc 1 931 0
 3624 0086 764B     		ldr	r3, .L305
 3625 0088 754A     		ldr	r2, .L305
 3626 008a 5278     		ldrb	r2, [r2, #1]
 3627 008c D2B2     		uxtb	r2, r2
 3628 008e 0121     		mov	r1, #1
 3629 0090 0A43     		orr	r2, r1
 3630 0092 D2B2     		uxtb	r2, r2
 3631 0094 5A70     		strb	r2, [r3, #1]
 3632 0096 07E0     		b	.L279
 3633              	.L278:
 932:../Sources/TFC/TFC_CrystalClock.c ****   }
 933:../Sources/TFC/TFC_CrystalClock.c ****   else
 934:../Sources/TFC/TFC_CrystalClock.c ****   {
 935:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 &= ~MCG_C2_IRCS_MASK; // select slow IRC by clearing IRCS
 3634              		.loc 1 935 0
 3635 0098 714B     		ldr	r3, .L305
 3636 009a 714A     		ldr	r2, .L305
 3637 009c 5278     		ldrb	r2, [r2, #1]
 3638 009e D2B2     		uxtb	r2, r2
 3639 00a0 0121     		mov	r1, #1
 3640 00a2 8A43     		bic	r2, r1
 3641 00a4 D2B2     		uxtb	r2, r2
 3642 00a6 5A70     		strb	r2, [r3, #1]
 3643              	.L279:
 936:../Sources/TFC/TFC_CrystalClock.c ****   }
 937:../Sources/TFC/TFC_CrystalClock.c ****   
 938:../Sources/TFC/TFC_CrystalClock.c **** // Make sure the clock monitor is disabled before switching modes otherwise it will trigger
 939:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_CME0_MASK;
 3644              		.loc 1 939 0
 3645 00a8 6D4B     		ldr	r3, .L305
 3646 00aa 6D4A     		ldr	r2, .L305
 3647 00ac 5279     		ldrb	r2, [r2, #5]
 3648 00ae D2B2     		uxtb	r2, r2
 3649 00b0 2021     		mov	r1, #32
 3650 00b2 8A43     		bic	r2, r1
 3651 00b4 D2B2     		uxtb	r2, r2
 3652 00b6 5A71     		strb	r2, [r3, #5]
 940:../Sources/TFC/TFC_CrystalClock.c ****   
 941:../Sources/TFC/TFC_CrystalClock.c **** // Select the IRC as the CLKS mux selection
 942:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 3653              		.loc 1 942 0
 3654 00b8 694A     		ldr	r2, .L305
 3655 00ba 3B1C     		mov	r3, r7
 3656 00bc 0D33     		add	r3, r3, #13
 3657 00be 1278     		ldrb	r2, [r2]
 3658 00c0 1A70     		strb	r2, [r3]
 943:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C1_CLKS_MASK;                    // clear CLKS bits 
 3659              		.loc 1 943 0
 3660 00c2 3B1C     		mov	r3, r7
 3661 00c4 0D33     		add	r3, r3, #13
 3662 00c6 3A1C     		mov	r2, r7
 3663 00c8 0D32     		add	r2, r2, #13
 3664 00ca 1178     		ldrb	r1, [r2]
 3665 00cc 3F22     		mov	r2, #63
 3666 00ce 0A40     		and	r2, r1
 3667 00d0 1A70     		strb	r2, [r3]
 944:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(1) | MCG_C1_IREFS_MASK); // select IRC as MCGOUT and enable IREFS
 3668              		.loc 1 944 0
 3669 00d2 3B1C     		mov	r3, r7
 3670 00d4 0D33     		add	r3, r3, #13
 3671 00d6 3A1C     		mov	r2, r7
 3672 00d8 0D32     		add	r2, r2, #13
 3673 00da 1278     		ldrb	r2, [r2]
 3674 00dc 4421     		mov	r1, #68
 3675 00de 0A43     		orr	r2, r1
 3676 00e0 1A70     		strb	r2, [r3]
 945:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg; // update MCG_C1
 3677              		.loc 1 945 0
 3678 00e2 5F4B     		ldr	r3, .L305
 3679 00e4 3A1C     		mov	r2, r7
 3680 00e6 0D32     		add	r2, r2, #13
 3681 00e8 1278     		ldrb	r2, [r2]
 3682 00ea 1A70     		strb	r2, [r3]
 946:../Sources/TFC/TFC_CrystalClock.c ****   
 947:../Sources/TFC/TFC_CrystalClock.c **** // wait until internal reference switches to requested irc.
 948:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 3683              		.loc 1 948 0
 3684 00ec FB1C     		add	r3, r7, #3
 3685 00ee 1B78     		ldrb	r3, [r3]
 3686 00f0 002B     		cmp	r3, #0
 3687 00f2 24D1     		bne	.L280
 949:../Sources/TFC/TFC_CrystalClock.c ****   {
 950:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3688              		.loc 1 950 0
 3689 00f4 3B1C     		mov	r3, r7
 3690 00f6 0E33     		add	r3, r3, #14
 3691 00f8 0022     		mov	r2, #0
 3692 00fa 1A80     		strh	r2, [r3]
 3693 00fc 0DE0     		b	.L281
 3694              	.L284:
 951:../Sources/TFC/TFC_CrystalClock.c ****     {
 952:../Sources/TFC/TFC_CrystalClock.c ****       if (!(MCG_S & MCG_S_IRCST_MASK)) break; // jump out early if IRCST clears before loop finishe
 3695              		.loc 1 952 0
 3696 00fe 584B     		ldr	r3, .L305
 3697 0100 9B79     		ldrb	r3, [r3, #6]
 3698 0102 DBB2     		uxtb	r3, r3
 3699 0104 1A1C     		mov	r2, r3
 3700 0106 0123     		mov	r3, #1
 3701 0108 1340     		and	r3, r2
 3702 010a 0ED0     		beq	.L301
 3703              	.L282:
 950:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3704              		.loc 1 950 0
 3705 010c 3B1C     		mov	r3, r7
 3706 010e 0E33     		add	r3, r3, #14
 3707 0110 3A1C     		mov	r2, r7
 3708 0112 0E32     		add	r2, r2, #14
 3709 0114 1288     		ldrh	r2, [r2]
 3710 0116 0132     		add	r2, r2, #1
 3711 0118 1A80     		strh	r2, [r3]
 3712              	.L281:
 950:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3713              		.loc 1 950 0 is_stmt 0
 3714 011a 3B1C     		mov	r3, r7
 3715 011c 0E33     		add	r3, r3, #14
 3716 011e 0021     		mov	r1, #0
 3717 0120 5A5E     		ldrsh	r2, [r3, r1]
 3718 0122 544B     		ldr	r3, .L305+20
 3719 0124 9A42     		cmp	r2, r3
 3720 0126 EADD     		ble	.L284
 3721 0128 00E0     		b	.L283
 3722              	.L301:
 3723              		.loc 1 952 0 is_stmt 1
 3724 012a C046     		mov	r8, r8
 3725              	.L283:
 953:../Sources/TFC/TFC_CrystalClock.c ****     }
 954:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IRCST_MASK) return 0x13; // check bit is really clear and return with error i
 3726              		.loc 1 954 0
 3727 012c 4C4B     		ldr	r3, .L305
 3728 012e 9B79     		ldrb	r3, [r3, #6]
 3729 0130 DBB2     		uxtb	r3, r3
 3730 0132 1A1C     		mov	r2, r3
 3731 0134 0123     		mov	r3, #1
 3732 0136 1340     		and	r3, r2
 3733 0138 26D0     		beq	.L285
 3734              		.loc 1 954 0 is_stmt 0
 3735 013a 1323     		mov	r3, #19
 3736 013c 8CE0     		b	.L273
 3737              	.L280:
 955:../Sources/TFC/TFC_CrystalClock.c ****   }
 956:../Sources/TFC/TFC_CrystalClock.c ****   else
 957:../Sources/TFC/TFC_CrystalClock.c ****   {
 958:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3738              		.loc 1 958 0 is_stmt 1
 3739 013e 3B1C     		mov	r3, r7
 3740 0140 0E33     		add	r3, r3, #14
 3741 0142 0022     		mov	r2, #0
 3742 0144 1A80     		strh	r2, [r3]
 3743 0146 0DE0     		b	.L286
 3744              	.L289:
 959:../Sources/TFC/TFC_CrystalClock.c ****     {
 960:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_IRCST_MASK) break; // jump out early if IRCST sets before loop finishes
 3745              		.loc 1 960 0
 3746 0148 454B     		ldr	r3, .L305
 3747 014a 9B79     		ldrb	r3, [r3, #6]
 3748 014c DBB2     		uxtb	r3, r3
 3749 014e 1A1C     		mov	r2, r3
 3750 0150 0123     		mov	r3, #1
 3751 0152 1340     		and	r3, r2
 3752 0154 0ED1     		bne	.L302
 3753              	.L287:
 958:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3754              		.loc 1 958 0
 3755 0156 3B1C     		mov	r3, r7
 3756 0158 0E33     		add	r3, r3, #14
 3757 015a 3A1C     		mov	r2, r7
 3758 015c 0E32     		add	r2, r2, #14
 3759 015e 1288     		ldrh	r2, [r2]
 3760 0160 0132     		add	r2, r2, #1
 3761 0162 1A80     		strh	r2, [r3]
 3762              	.L286:
 958:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3763              		.loc 1 958 0 is_stmt 0
 3764 0164 3B1C     		mov	r3, r7
 3765 0166 0E33     		add	r3, r3, #14
 3766 0168 0021     		mov	r1, #0
 3767 016a 5A5E     		ldrsh	r2, [r3, r1]
 3768 016c 414B     		ldr	r3, .L305+20
 3769 016e 9A42     		cmp	r2, r3
 3770 0170 EADD     		ble	.L289
 3771 0172 00E0     		b	.L288
 3772              	.L302:
 3773              		.loc 1 960 0 is_stmt 1
 3774 0174 C046     		mov	r8, r8
 3775              	.L288:
 961:../Sources/TFC/TFC_CrystalClock.c ****     }
 962:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IRCST_MASK)) return 0x14; // check bit is really set and return with error 
 3776              		.loc 1 962 0
 3777 0176 3A4B     		ldr	r3, .L305
 3778 0178 9B79     		ldrb	r3, [r3, #6]
 3779 017a DBB2     		uxtb	r3, r3
 3780 017c 1A1C     		mov	r2, r3
 3781 017e 0123     		mov	r3, #1
 3782 0180 1340     		and	r3, r2
 3783 0182 01D1     		bne	.L285
 3784              		.loc 1 962 0 is_stmt 0
 3785 0184 1423     		mov	r3, #20
 3786 0186 67E0     		b	.L273
 3787              	.L285:
 963:../Sources/TFC/TFC_CrystalClock.c ****   }
 964:../Sources/TFC/TFC_CrystalClock.c ****  
 965:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to update
 966:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3788              		.loc 1 966 0 is_stmt 1
 3789 0188 3B1C     		mov	r3, r7
 3790 018a 0E33     		add	r3, r3, #14
 3791 018c 0022     		mov	r2, #0
 3792 018e 1A80     		strh	r2, [r3]
 3793 0190 0FE0     		b	.L290
 3794              	.L293:
 967:../Sources/TFC/TFC_CrystalClock.c ****   {
 968:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) break; // jump out early if CLKST
 3795              		.loc 1 968 0
 3796 0192 334B     		ldr	r3, .L305
 3797 0194 9B79     		ldrb	r3, [r3, #6]
 3798 0196 DBB2     		uxtb	r3, r3
 3799 0198 1A1C     		mov	r2, r3
 3800 019a 0C23     		mov	r3, #12
 3801 019c 1340     		and	r3, r2
 3802 019e 9B08     		lsr	r3, r3, #2
 3803 01a0 012B     		cmp	r3, #1
 3804 01a2 0ED0     		beq	.L303
 3805              	.L291:
 966:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3806              		.loc 1 966 0
 3807 01a4 3B1C     		mov	r3, r7
 3808 01a6 0E33     		add	r3, r3, #14
 3809 01a8 3A1C     		mov	r2, r7
 3810 01aa 0E32     		add	r2, r2, #14
 3811 01ac 1288     		ldrh	r2, [r2]
 3812 01ae 0132     		add	r2, r2, #1
 3813 01b0 1A80     		strh	r2, [r3]
 3814              	.L290:
 966:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3815              		.loc 1 966 0 is_stmt 0
 3816 01b2 3B1C     		mov	r3, r7
 3817 01b4 0E33     		add	r3, r3, #14
 3818 01b6 0021     		mov	r1, #0
 3819 01b8 5A5E     		ldrsh	r2, [r3, r1]
 3820 01ba 2E4B     		ldr	r3, .L305+20
 3821 01bc 9A42     		cmp	r2, r3
 3822 01be E8DD     		ble	.L293
 3823 01c0 00E0     		b	.L292
 3824              	.L303:
 3825              		.loc 1 968 0 is_stmt 1
 3826 01c2 C046     		mov	r8, r8
 3827              	.L292:
 969:../Sources/TFC/TFC_CrystalClock.c ****   }
 970:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) return 0x19; // check IRC is really
 3828              		.loc 1 970 0
 3829 01c4 264B     		ldr	r3, .L305
 3830 01c6 9B79     		ldrb	r3, [r3, #6]
 3831 01c8 DBB2     		uxtb	r3, r3
 3832 01ca 1A1C     		mov	r2, r3
 3833 01cc 0C23     		mov	r3, #12
 3834 01ce 1340     		and	r3, r2
 3835 01d0 9B08     		lsr	r3, r3, #2
 3836 01d2 012B     		cmp	r3, #1
 3837 01d4 01D0     		beq	.L294
 3838              		.loc 1 970 0 is_stmt 0
 3839 01d6 1923     		mov	r3, #25
 3840 01d8 3EE0     		b	.L273
 3841              	.L294:
 971:../Sources/TFC/TFC_CrystalClock.c ****   
 972:../Sources/TFC/TFC_CrystalClock.c ****   // wait for Reference clock Status bit to set
 973:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3842              		.loc 1 973 0 is_stmt 1
 3843 01da 3B1C     		mov	r3, r7
 3844 01dc 0E33     		add	r3, r3, #14
 3845 01de 0022     		mov	r2, #0
 3846 01e0 1A80     		strh	r2, [r3]
 3847 01e2 0DE0     		b	.L295
 3848              	.L298:
 974:../Sources/TFC/TFC_CrystalClock.c ****   {
 975:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
 3849              		.loc 1 975 0
 3850 01e4 1E4B     		ldr	r3, .L305
 3851 01e6 9B79     		ldrb	r3, [r3, #6]
 3852 01e8 DBB2     		uxtb	r3, r3
 3853 01ea 1A1C     		mov	r2, r3
 3854 01ec 1023     		mov	r3, #16
 3855 01ee 1340     		and	r3, r2
 3856 01f0 0ED1     		bne	.L304
 3857              	.L296:
 973:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3858              		.loc 1 973 0
 3859 01f2 3B1C     		mov	r3, r7
 3860 01f4 0E33     		add	r3, r3, #14
 3861 01f6 3A1C     		mov	r2, r7
 3862 01f8 0E32     		add	r2, r2, #14
 3863 01fa 1288     		ldrh	r2, [r2]
 3864 01fc 0132     		add	r2, r2, #1
 3865 01fe 1A80     		strh	r2, [r3]
 3866              	.L295:
 973:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3867              		.loc 1 973 0 is_stmt 0
 3868 0200 3B1C     		mov	r3, r7
 3869 0202 0E33     		add	r3, r3, #14
 3870 0204 0021     		mov	r1, #0
 3871 0206 5A5E     		ldrsh	r2, [r3, r1]
 3872 0208 1A4B     		ldr	r3, .L305+20
 3873 020a 9A42     		cmp	r2, r3
 3874 020c EADD     		ble	.L298
 3875 020e 00E0     		b	.L297
 3876              	.L304:
 3877              		.loc 1 975 0 is_stmt 1
 3878 0210 C046     		mov	r8, r8
 3879              	.L297:
 976:../Sources/TFC/TFC_CrystalClock.c ****   }
 977:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 3880              		.loc 1 977 0
 3881 0212 134B     		ldr	r3, .L305
 3882 0214 9B79     		ldrb	r3, [r3, #6]
 3883 0216 DBB2     		uxtb	r3, r3
 3884 0218 1A1C     		mov	r2, r3
 3885 021a 1023     		mov	r3, #16
 3886 021c 1340     		and	r3, r2
 3887 021e 01D1     		bne	.L299
 3888              		.loc 1 977 0 is_stmt 0
 3889 0220 1223     		mov	r3, #18
 3890 0222 19E0     		b	.L273
 3891              	.L299:
 978:../Sources/TFC/TFC_CrystalClock.c ****   
 979:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBI mode
 980:../Sources/TFC/TFC_CrystalClock.c ****   
 981:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 3892              		.loc 1 981 0 is_stmt 1
 3893 0224 FB1C     		add	r3, r7, #3
 3894 0226 1B78     		ldrb	r3, [r3]
 3895 0228 002B     		cmp	r3, #0
 3896 022a 14D0     		beq	.L300
 982:../Sources/TFC/TFC_CrystalClock.c ****   {
 983:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 3897              		.loc 1 983 0
 3898 022c 0C4B     		ldr	r3, .L305
 3899 022e 1B7A     		ldrb	r3, [r3, #8]
 3900 0230 DBB2     		uxtb	r3, r3
 3901 0232 1A1C     		mov	r2, r3
 3902 0234 0E23     		mov	r3, #14
 3903 0236 1340     		and	r3, r2
 3904 0238 5B08     		lsr	r3, r3, #1
 3905 023a 0122     		mov	r2, #1
 3906 023c 9A40     		lsl	r2, r2, r3
 3907 023e 3B1C     		mov	r3, r7
 3908 0240 0C33     		add	r3, r3, #12
 3909 0242 1A70     		strb	r2, [r3]
 984:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by FCRDIV
 3910              		.loc 1 984 0
 3911 0244 3B1C     		mov	r3, r7
 3912 0246 0C33     		add	r3, r3, #12
 3913 0248 1B78     		ldrb	r3, [r3]
 3914 024a 7868     		ldr	r0, [r7, #4]
 3915 024c 191C     		mov	r1, r3
 3916 024e FFF7FEFF 		bl	__aeabi_idiv
 3917 0252 031C     		mov	r3, r0
 3918 0254 00E0     		b	.L273
 3919              	.L300:
 985:../Sources/TFC/TFC_CrystalClock.c ****   }
 986:../Sources/TFC/TFC_CrystalClock.c ****   else
 987:../Sources/TFC/TFC_CrystalClock.c ****   {
 988:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 3920              		.loc 1 988 0
 3921 0256 7B68     		ldr	r3, [r7, #4]
 3922              	.L273:
 989:../Sources/TFC/TFC_CrystalClock.c ****   }
 990:../Sources/TFC/TFC_CrystalClock.c **** } //fbe_fbi
 3923              		.loc 1 990 0
 3924 0258 181C     		mov	r0, r3
 3925 025a BD46     		mov	sp, r7
 3926 025c 04B0     		add	sp, sp, #16
 3927              		@ sp needed for prologue
 3928 025e 80BD     		pop	{r7, pc}
 3929              	.L306:
 3930              		.align	2
 3931              	.L305:
 3932 0260 00400640 		.word	1074151424
 3933 0264 117A0000 		.word	31249
 3934 0268 97980000 		.word	39063
 3935 026c BFC62D00 		.word	2999999
 3936 0270 404B4C00 		.word	5000000
 3937 0274 CF070000 		.word	1999
 3938              		.cfi_endproc
 3939              	.LFE14:
 3941              		.section	.text.fbi_fbe,"ax",%progbits
 3942              		.align	2
 3943              		.global	fbi_fbe
 3944              		.code	16
 3945              		.thumb_func
 3947              	fbi_fbe:
 3948              	.LFB15:
 991:../Sources/TFC/TFC_CrystalClock.c **** 
 992:../Sources/TFC/TFC_CrystalClock.c **** 
 993:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fbe(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
 994:../Sources/TFC/TFC_CrystalClock.c **** {
 3949              		.loc 1 994 0
 3950              		.cfi_startproc
 3951 0000 80B5     		push	{r7, lr}
 3952              	.LCFI45:
 3953              		.cfi_def_cfa_offset 8
 3954              		.cfi_offset 7, -8
 3955              		.cfi_offset 14, -4
 3956 0002 84B0     		sub	sp, sp, #16
 3957              	.LCFI46:
 3958              		.cfi_def_cfa_offset 24
 3959 0004 00AF     		add	r7, sp, #0
 3960              	.LCFI47:
 3961              		.cfi_def_cfa_register 7
 3962 0006 7860     		str	r0, [r7, #4]
 3963 0008 FB1C     		add	r3, r7, #3
 3964 000a 1970     		strb	r1, [r3]
 3965 000c BB1C     		add	r3, r7, #2
 3966 000e 1A70     		strb	r2, [r3]
 995:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 996:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
 997:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 998:../Sources/TFC/TFC_CrystalClock.c ****   
 999:../Sources/TFC/TFC_CrystalClock.c **** // check if in FBI mode
1000:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 3967              		.loc 1 1000 0
 3968 0010 B84B     		ldr	r3, .L343
 3969 0012 9B79     		ldrb	r3, [r3, #6]
 3970 0014 DBB2     		uxtb	r3, r3
 3971 0016 1A1C     		mov	r2, r3
 3972 0018 0C23     		mov	r3, #12
 3973 001a 1340     		and	r3, r2
 3974 001c 9B08     		lsr	r3, r3, #2
 3975 001e 012B     		cmp	r3, #1
 3976 0020 14D1     		bne	.L308
1001:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 3977              		.loc 1 1001 0
 3978 0022 B44B     		ldr	r3, .L343
 3979 0024 9B79     		ldrb	r3, [r3, #6]
 3980 0026 DBB2     		uxtb	r3, r3
 3981 0028 1A1C     		mov	r2, r3
 3982 002a 1023     		mov	r3, #16
 3983 002c 1340     		and	r3, r2
1000:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 3984              		.loc 1 1000 0
 3985 002e 0DD0     		beq	.L308
1002:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 3986              		.loc 1 1002 0
 3987 0030 B04B     		ldr	r3, .L343
 3988 0032 9B79     		ldrb	r3, [r3, #6]
 3989 0034 DBB2     		uxtb	r3, r3
 3990 0036 1A1C     		mov	r2, r3
 3991 0038 2023     		mov	r3, #32
 3992 003a 1340     		and	r3, r2
1001:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 3993              		.loc 1 1001 0
 3994 003c 06D1     		bne	.L308
1003:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
 3995              		.loc 1 1003 0
 3996 003e AD4B     		ldr	r3, .L343
 3997 0040 5B78     		ldrb	r3, [r3, #1]
 3998 0042 DBB2     		uxtb	r3, r3
 3999 0044 1A1C     		mov	r2, r3
 4000 0046 0223     		mov	r3, #2
 4001 0048 1340     		and	r3, r2
1000:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4002              		.loc 1 1000 0
 4003 004a 01D0     		beq	.L309
 4004              	.L308:
1004:../Sources/TFC/TFC_CrystalClock.c ****   {  
1005:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3;                                                       // MCG not in correct mode re
 4005              		.loc 1 1005 0
 4006 004c 0323     		mov	r3, #3
 4007 004e 4DE1     		b	.L310
 4008              	.L309:
1006:../Sources/TFC/TFC_CrystalClock.c ****   }
1007:../Sources/TFC/TFC_CrystalClock.c ****  
1008:../Sources/TFC/TFC_CrystalClock.c **** // check external frequency is less than the maximum frequency
1009:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 4009              		.loc 1 1009 0
 4010 0050 7A68     		ldr	r2, [r7, #4]
 4011 0052 A94B     		ldr	r3, .L343+4
 4012 0054 9A42     		cmp	r2, r3
 4013 0056 01DD     		ble	.L311
 4014              		.loc 1 1009 0 is_stmt 0
 4015 0058 2123     		mov	r3, #33
 4016 005a 47E1     		b	.L310
 4017              	.L311:
1010:../Sources/TFC/TFC_CrystalClock.c ****   
1011:../Sources/TFC/TFC_CrystalClock.c **** // check crystal frequency is within spec. if crystal osc is being used
1012:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 4018              		.loc 1 1012 0 is_stmt 1
 4019 005c BB1C     		add	r3, r7, #2
 4020 005e 1B78     		ldrb	r3, [r3]
 4021 0060 002B     		cmp	r3, #0
 4022 0062 11D0     		beq	.L312
1013:../Sources/TFC/TFC_CrystalClock.c ****   {
1014:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 30000) ||
 4023              		.loc 1 1014 0
 4024 0064 7A68     		ldr	r2, [r7, #4]
 4025 0066 A54B     		ldr	r3, .L343+8
 4026 0068 9A42     		cmp	r2, r3
 4027 006a 0BDD     		ble	.L313
 4028              		.loc 1 1014 0 is_stmt 0
 4029 006c 7A68     		ldr	r2, [r7, #4]
 4030 006e A44B     		ldr	r3, .L343+12
 4031 0070 9A42     		cmp	r2, r3
 4032 0072 03DD     		ble	.L314
1015:../Sources/TFC/TFC_CrystalClock.c ****         ((crystal_val > 40000) && (crystal_val < 3000000)) ||
 4033              		.loc 1 1015 0 is_stmt 1
 4034 0074 7A68     		ldr	r2, [r7, #4]
 4035 0076 A34B     		ldr	r3, .L343+16
 4036 0078 9A42     		cmp	r2, r3
 4037 007a 03DD     		ble	.L313
 4038              	.L314:
 4039              		.loc 1 1015 0 is_stmt 0
 4040 007c 7A68     		ldr	r2, [r7, #4]
 4041 007e A24B     		ldr	r3, .L343+20
 4042 0080 9A42     		cmp	r2, r3
 4043 0082 01DD     		ble	.L312
 4044              	.L313:
1016:../Sources/TFC/TFC_CrystalClock.c ****         (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal op
 4045              		.loc 1 1016 0 is_stmt 1
 4046 0084 2223     		mov	r3, #34
 4047 0086 31E1     		b	.L310
 4048              	.L312:
1017:../Sources/TFC/TFC_CrystalClock.c ****   }
1018:../Sources/TFC/TFC_CrystalClock.c **** 
1019:../Sources/TFC/TFC_CrystalClock.c **** // make sure HGO will never be greater than 1. Could return an error instead if desired.  
1020:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 4049              		.loc 1 1020 0
 4050 0088 FB1C     		add	r3, r7, #3
 4051 008a 1B78     		ldrb	r3, [r3]
 4052 008c 002B     		cmp	r3, #0
 4053 008e 02D0     		beq	.L315
1021:../Sources/TFC/TFC_CrystalClock.c ****   {
1022:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 4054              		.loc 1 1022 0
 4055 0090 FB1C     		add	r3, r7, #3
 4056 0092 0122     		mov	r2, #1
 4057 0094 1A70     		strb	r2, [r3]
 4058              	.L315:
1023:../Sources/TFC/TFC_CrystalClock.c ****   }
1024:../Sources/TFC/TFC_CrystalClock.c **** 
1025:../Sources/TFC/TFC_CrystalClock.c **** // configure the MCG_C2 register
1026:../Sources/TFC/TFC_CrystalClock.c **** // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the F
1027:../Sources/TFC/TFC_CrystalClock.c **** // it still needs to be set correctly even if the oscillator is not being used
1028:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 4059              		.loc 1 1028 0
 4060 0096 974A     		ldr	r2, .L343
 4061 0098 3B1C     		mov	r3, r7
 4062 009a 0F33     		add	r3, r3, #15
 4063 009c 5278     		ldrb	r2, [r2, #1]
 4064 009e 1A70     		strb	r2, [r3]
1029:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 4065              		.loc 1 1029 0
 4066 00a0 3B1C     		mov	r3, r7
 4067 00a2 0F33     		add	r3, r3, #15
 4068 00a4 3A1C     		mov	r2, r7
 4069 00a6 0F32     		add	r2, r2, #15
 4070 00a8 1278     		ldrb	r2, [r2]
 4071 00aa 3C21     		mov	r1, #60
 4072 00ac 8A43     		bic	r2, r1
 4073 00ae 1A70     		strb	r2, [r3]
1030:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 40000)
 4074              		.loc 1 1030 0
 4075 00b0 7A68     		ldr	r2, [r7, #4]
 4076 00b2 934B     		ldr	r3, .L343+12
 4077 00b4 9A42     		cmp	r2, r3
 4078 00b6 11DC     		bgt	.L316
1031:../Sources/TFC/TFC_CrystalClock.c ****   {
1032:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4079              		.loc 1 1032 0
 4080 00b8 FB1C     		add	r3, r7, #3
 4081 00ba 1B78     		ldrb	r3, [r3]
 4082 00bc DB00     		lsl	r3, r3, #3
 4083 00be DAB2     		uxtb	r2, r3
 4084 00c0 BB1C     		add	r3, r7, #2
 4085 00c2 1B78     		ldrb	r3, [r3]
 4086 00c4 9B00     		lsl	r3, r3, #2
 4087 00c6 DBB2     		uxtb	r3, r3
 4088 00c8 1343     		orr	r3, r2
 4089 00ca D9B2     		uxtb	r1, r3
 4090 00cc 3B1C     		mov	r3, r7
 4091 00ce 0F33     		add	r3, r3, #15
 4092 00d0 3A1C     		mov	r2, r7
 4093 00d2 0F32     		add	r2, r2, #15
 4094 00d4 1278     		ldrb	r2, [r2]
 4095 00d6 0A43     		orr	r2, r1
 4096 00d8 1A70     		strb	r2, [r3]
 4097 00da 2CE0     		b	.L317
 4098              	.L316:
1033:../Sources/TFC/TFC_CrystalClock.c ****   }
1034:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 8000000)
 4099              		.loc 1 1034 0
 4100 00dc 7A68     		ldr	r2, [r7, #4]
 4101 00de 8B4B     		ldr	r3, .L343+24
 4102 00e0 9A42     		cmp	r2, r3
 4103 00e2 14DC     		bgt	.L318
1035:../Sources/TFC/TFC_CrystalClock.c ****   {
1036:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4104              		.loc 1 1036 0
 4105 00e4 FB1C     		add	r3, r7, #3
 4106 00e6 1B78     		ldrb	r3, [r3]
 4107 00e8 DB00     		lsl	r3, r3, #3
 4108 00ea DAB2     		uxtb	r2, r3
 4109 00ec BB1C     		add	r3, r7, #2
 4110 00ee 1B78     		ldrb	r3, [r3]
 4111 00f0 9B00     		lsl	r3, r3, #2
 4112 00f2 DBB2     		uxtb	r3, r3
 4113 00f4 1343     		orr	r3, r2
 4114 00f6 DAB2     		uxtb	r2, r3
 4115 00f8 3B1C     		mov	r3, r7
 4116 00fa 0F33     		add	r3, r3, #15
 4117 00fc 1B78     		ldrb	r3, [r3]
 4118 00fe 1343     		orr	r3, r2
 4119 0100 DAB2     		uxtb	r2, r3
 4120 0102 3B1C     		mov	r3, r7
 4121 0104 0F33     		add	r3, r3, #15
 4122 0106 1021     		mov	r1, #16
 4123 0108 0A43     		orr	r2, r1
 4124 010a 1A70     		strb	r2, [r3]
 4125 010c 13E0     		b	.L317
 4126              	.L318:
1037:../Sources/TFC/TFC_CrystalClock.c ****   }
1038:../Sources/TFC/TFC_CrystalClock.c ****   else
1039:../Sources/TFC/TFC_CrystalClock.c ****   {
1040:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4127              		.loc 1 1040 0
 4128 010e FB1C     		add	r3, r7, #3
 4129 0110 1B78     		ldrb	r3, [r3]
 4130 0112 DB00     		lsl	r3, r3, #3
 4131 0114 DAB2     		uxtb	r2, r3
 4132 0116 BB1C     		add	r3, r7, #2
 4133 0118 1B78     		ldrb	r3, [r3]
 4134 011a 9B00     		lsl	r3, r3, #2
 4135 011c DBB2     		uxtb	r3, r3
 4136 011e 1343     		orr	r3, r2
 4137 0120 DAB2     		uxtb	r2, r3
 4138 0122 3B1C     		mov	r3, r7
 4139 0124 0F33     		add	r3, r3, #15
 4140 0126 1B78     		ldrb	r3, [r3]
 4141 0128 1343     		orr	r3, r2
 4142 012a DAB2     		uxtb	r2, r3
 4143 012c 3B1C     		mov	r3, r7
 4144 012e 0F33     		add	r3, r3, #15
 4145 0130 2021     		mov	r1, #32
 4146 0132 0A43     		orr	r2, r1
 4147 0134 1A70     		strb	r2, [r3]
 4148              	.L317:
1041:../Sources/TFC/TFC_CrystalClock.c ****   }
1042:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 4149              		.loc 1 1042 0
 4150 0136 6F4B     		ldr	r3, .L343
 4151 0138 3A1C     		mov	r2, r7
 4152 013a 0F32     		add	r2, r2, #15
 4153 013c 1278     		ldrb	r2, [r2]
 4154 013e 5A70     		strb	r2, [r3, #1]
1043:../Sources/TFC/TFC_CrystalClock.c **** 
1044:../Sources/TFC/TFC_CrystalClock.c **** // determine FRDIV based on reference clock frequency
1045:../Sources/TFC/TFC_CrystalClock.c **** // since the external frequency has already been checked only the maximum frequency for each FRDIV 
1046:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 4155              		.loc 1 1046 0
 4156 0140 7A68     		ldr	r2, [r7, #4]
 4157 0142 734B     		ldr	r3, .L343+28
 4158 0144 9A42     		cmp	r2, r3
 4159 0146 04DC     		bgt	.L319
 4160              		.loc 1 1046 0 is_stmt 0
 4161 0148 3B1C     		mov	r3, r7
 4162 014a 0E33     		add	r3, r3, #14
 4163 014c 0022     		mov	r2, #0
 4164 014e 1A70     		strb	r2, [r3]
 4165 0150 27E0     		b	.L320
 4166              	.L319:
1047:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 4167              		.loc 1 1047 0 is_stmt 1
 4168 0152 7A68     		ldr	r2, [r7, #4]
 4169 0154 6F4B     		ldr	r3, .L343+32
 4170 0156 9A42     		cmp	r2, r3
 4171 0158 04DC     		bgt	.L321
 4172              		.loc 1 1047 0 is_stmt 0
 4173 015a 3B1C     		mov	r3, r7
 4174 015c 0E33     		add	r3, r3, #14
 4175 015e 0122     		mov	r2, #1
 4176 0160 1A70     		strb	r2, [r3]
 4177 0162 1EE0     		b	.L320
 4178              	.L321:
1048:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 4179              		.loc 1 1048 0 is_stmt 1
 4180 0164 7A68     		ldr	r2, [r7, #4]
 4181 0166 6C4B     		ldr	r3, .L343+36
 4182 0168 9A42     		cmp	r2, r3
 4183 016a 04DC     		bgt	.L322
 4184              		.loc 1 1048 0 is_stmt 0
 4185 016c 3B1C     		mov	r3, r7
 4186 016e 0E33     		add	r3, r3, #14
 4187 0170 0222     		mov	r2, #2
 4188 0172 1A70     		strb	r2, [r3]
 4189 0174 15E0     		b	.L320
 4190              	.L322:
1049:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 4191              		.loc 1 1049 0 is_stmt 1
 4192 0176 7A68     		ldr	r2, [r7, #4]
 4193 0178 684B     		ldr	r3, .L343+40
 4194 017a 9A42     		cmp	r2, r3
 4195 017c 04DC     		bgt	.L323
 4196              		.loc 1 1049 0 is_stmt 0
 4197 017e 3B1C     		mov	r3, r7
 4198 0180 0E33     		add	r3, r3, #14
 4199 0182 0322     		mov	r2, #3
 4200 0184 1A70     		strb	r2, [r3]
 4201 0186 0CE0     		b	.L320
 4202              	.L323:
1050:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 4203              		.loc 1 1050 0 is_stmt 1
 4204 0188 7A68     		ldr	r2, [r7, #4]
 4205 018a 654B     		ldr	r3, .L343+44
 4206 018c 9A42     		cmp	r2, r3
 4207 018e 04DC     		bgt	.L324
 4208              		.loc 1 1050 0 is_stmt 0
 4209 0190 3B1C     		mov	r3, r7
 4210 0192 0E33     		add	r3, r3, #14
 4211 0194 0422     		mov	r2, #4
 4212 0196 1A70     		strb	r2, [r3]
 4213 0198 03E0     		b	.L320
 4214              	.L324:
1051:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 4215              		.loc 1 1051 0 is_stmt 1
 4216 019a 3B1C     		mov	r3, r7
 4217 019c 0E33     		add	r3, r3, #14
 4218 019e 0522     		mov	r2, #5
 4219 01a0 1A70     		strb	r2, [r3]
 4220              	.L320:
1052:../Sources/TFC/TFC_CrystalClock.c ****   
1053:../Sources/TFC/TFC_CrystalClock.c **** // Select external oscilator and Reference Divider and clear IREFS to start ext osc
1054:../Sources/TFC/TFC_CrystalClock.c **** // If IRCLK is required it must be enabled outside of this driver, existing state will be maintaine
1055:../Sources/TFC/TFC_CrystalClock.c **** // CLKS=2, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
1056:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 4221              		.loc 1 1056 0
 4222 01a2 544A     		ldr	r2, .L343
 4223 01a4 3B1C     		mov	r3, r7
 4224 01a6 0F33     		add	r3, r3, #15
 4225 01a8 1278     		ldrb	r2, [r2]
 4226 01aa 1A70     		strb	r2, [r3]
1057:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these
 4227              		.loc 1 1057 0
 4228 01ac 3B1C     		mov	r3, r7
 4229 01ae 0F33     		add	r3, r3, #15
 4230 01b0 3A1C     		mov	r2, r7
 4231 01b2 0F32     		add	r2, r2, #15
 4232 01b4 1178     		ldrb	r1, [r2]
 4233 01b6 0322     		mov	r2, #3
 4234 01b8 0A40     		and	r2, r1
 4235 01ba 1A70     		strb	r2, [r3]
1058:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(2) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 4236              		.loc 1 1058 0
 4237 01bc 3B1C     		mov	r3, r7
 4238 01be 0E33     		add	r3, r3, #14
 4239 01c0 1B78     		ldrb	r3, [r3]
 4240 01c2 DB00     		lsl	r3, r3, #3
 4241 01c4 DAB2     		uxtb	r2, r3
 4242 01c6 3823     		mov	r3, #56
 4243 01c8 1340     		and	r3, r2
 4244 01ca DAB2     		uxtb	r2, r3
 4245 01cc 3B1C     		mov	r3, r7
 4246 01ce 0F33     		add	r3, r3, #15
 4247 01d0 1B78     		ldrb	r3, [r3]
 4248 01d2 1343     		orr	r3, r2
 4249 01d4 DAB2     		uxtb	r2, r3
 4250 01d6 3B1C     		mov	r3, r7
 4251 01d8 0F33     		add	r3, r3, #15
 4252 01da 8021     		mov	r1, #128
 4253 01dc 4942     		neg	r1, r1
 4254 01de 0A43     		orr	r2, r1
 4255 01e0 1A70     		strb	r2, [r3]
1059:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 4256              		.loc 1 1059 0
 4257 01e2 444B     		ldr	r3, .L343
 4258 01e4 3A1C     		mov	r2, r7
 4259 01e6 0F32     		add	r2, r2, #15
 4260 01e8 1278     		ldrb	r2, [r2]
 4261 01ea 1A70     		strb	r2, [r3]
1060:../Sources/TFC/TFC_CrystalClock.c **** 
1061:../Sources/TFC/TFC_CrystalClock.c **** // if the external oscillator is used need to wait for OSCINIT to set
1062:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 4262              		.loc 1 1062 0
 4263 01ec BB1C     		add	r3, r7, #2
 4264 01ee 1B78     		ldrb	r3, [r3]
 4265 01f0 002B     		cmp	r3, #0
 4266 01f2 24D0     		beq	.L325
1063:../Sources/TFC/TFC_CrystalClock.c ****   {
1064:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 4267              		.loc 1 1064 0
 4268 01f4 3B1C     		mov	r3, r7
 4269 01f6 0C33     		add	r3, r3, #12
 4270 01f8 0022     		mov	r2, #0
 4271 01fa 1A80     		strh	r2, [r3]
 4272 01fc 0DE0     		b	.L326
 4273              	.L329:
1065:../Sources/TFC/TFC_CrystalClock.c ****     {
1066:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 4274              		.loc 1 1066 0
 4275 01fe 3D4B     		ldr	r3, .L343
 4276 0200 9B79     		ldrb	r3, [r3, #6]
 4277 0202 DBB2     		uxtb	r3, r3
 4278 0204 1A1C     		mov	r2, r3
 4279 0206 0223     		mov	r3, #2
 4280 0208 1340     		and	r3, r2
 4281 020a 0ED1     		bne	.L340
 4282              	.L327:
1064:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 4283              		.loc 1 1064 0
 4284 020c 3B1C     		mov	r3, r7
 4285 020e 0C33     		add	r3, r3, #12
 4286 0210 3A1C     		mov	r2, r7
 4287 0212 0C32     		add	r2, r2, #12
 4288 0214 1288     		ldrh	r2, [r2]
 4289 0216 0132     		add	r2, r2, #1
 4290 0218 1A80     		strh	r2, [r3]
 4291              	.L326:
1064:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 4292              		.loc 1 1064 0 is_stmt 0
 4293 021a 3B1C     		mov	r3, r7
 4294 021c 0C33     		add	r3, r3, #12
 4295 021e 0021     		mov	r1, #0
 4296 0220 5A5E     		ldrsh	r2, [r3, r1]
 4297 0222 404B     		ldr	r3, .L343+48
 4298 0224 9A42     		cmp	r2, r3
 4299 0226 EADD     		ble	.L329
 4300 0228 00E0     		b	.L328
 4301              	.L340:
 4302              		.loc 1 1066 0 is_stmt 1
 4303 022a C046     		mov	r8, r8
 4304              	.L328:
1067:../Sources/TFC/TFC_CrystalClock.c ****     }
1068:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with err
 4305              		.loc 1 1068 0
 4306 022c 314B     		ldr	r3, .L343
 4307 022e 9B79     		ldrb	r3, [r3, #6]
 4308 0230 DBB2     		uxtb	r3, r3
 4309 0232 1A1C     		mov	r2, r3
 4310 0234 0223     		mov	r3, #2
 4311 0236 1340     		and	r3, r2
 4312 0238 01D1     		bne	.L325
 4313              		.loc 1 1068 0 is_stmt 0
 4314 023a 2323     		mov	r3, #35
 4315 023c 56E0     		b	.L310
 4316              	.L325:
1069:../Sources/TFC/TFC_CrystalClock.c ****   }
1070:../Sources/TFC/TFC_CrystalClock.c **** 
1071:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
1072:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4317              		.loc 1 1072 0 is_stmt 1
 4318 023e 3B1C     		mov	r3, r7
 4319 0240 0C33     		add	r3, r3, #12
 4320 0242 0022     		mov	r2, #0
 4321 0244 1A80     		strh	r2, [r3]
 4322 0246 0DE0     		b	.L330
 4323              	.L333:
1073:../Sources/TFC/TFC_CrystalClock.c ****   {
1074:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 4324              		.loc 1 1074 0
 4325 0248 2A4B     		ldr	r3, .L343
 4326 024a 9B79     		ldrb	r3, [r3, #6]
 4327 024c DBB2     		uxtb	r3, r3
 4328 024e 1A1C     		mov	r2, r3
 4329 0250 1023     		mov	r3, #16
 4330 0252 1340     		and	r3, r2
 4331 0254 0ED0     		beq	.L341
 4332              	.L331:
1072:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4333              		.loc 1 1072 0
 4334 0256 3B1C     		mov	r3, r7
 4335 0258 0C33     		add	r3, r3, #12
 4336 025a 3A1C     		mov	r2, r7
 4337 025c 0C32     		add	r2, r2, #12
 4338 025e 1288     		ldrh	r2, [r2]
 4339 0260 0132     		add	r2, r2, #1
 4340 0262 1A80     		strh	r2, [r3]
 4341              	.L330:
1072:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4342              		.loc 1 1072 0 is_stmt 0
 4343 0264 3B1C     		mov	r3, r7
 4344 0266 0C33     		add	r3, r3, #12
 4345 0268 0021     		mov	r1, #0
 4346 026a 5A5E     		ldrsh	r2, [r3, r1]
 4347 026c 2E4B     		ldr	r3, .L343+52
 4348 026e 9A42     		cmp	r2, r3
 4349 0270 EADD     		ble	.L333
 4350 0272 00E0     		b	.L332
 4351              	.L341:
 4352              		.loc 1 1074 0 is_stmt 1
 4353 0274 C046     		mov	r8, r8
 4354              	.L332:
1075:../Sources/TFC/TFC_CrystalClock.c ****   }
1076:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 4355              		.loc 1 1076 0
 4356 0276 1F4B     		ldr	r3, .L343
 4357 0278 9B79     		ldrb	r3, [r3, #6]
 4358 027a DBB2     		uxtb	r3, r3
 4359 027c 1A1C     		mov	r2, r3
 4360 027e 1023     		mov	r3, #16
 4361 0280 1340     		and	r3, r2
 4362 0282 01D0     		beq	.L334
 4363              		.loc 1 1076 0 is_stmt 0
 4364 0284 1123     		mov	r3, #17
 4365 0286 31E0     		b	.L310
 4366              	.L334:
1077:../Sources/TFC/TFC_CrystalClock.c ****   
1078:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
1079:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4367              		.loc 1 1079 0 is_stmt 1
 4368 0288 3B1C     		mov	r3, r7
 4369 028a 0C33     		add	r3, r3, #12
 4370 028c 0022     		mov	r2, #0
 4371 028e 1A80     		strh	r2, [r3]
 4372 0290 0FE0     		b	.L335
 4373              	.L338:
1080:../Sources/TFC/TFC_CrystalClock.c ****   {
1081:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 4374              		.loc 1 1081 0
 4375 0292 184B     		ldr	r3, .L343
 4376 0294 9B79     		ldrb	r3, [r3, #6]
 4377 0296 DBB2     		uxtb	r3, r3
 4378 0298 1A1C     		mov	r2, r3
 4379 029a 0C23     		mov	r3, #12
 4380 029c 1340     		and	r3, r2
 4381 029e 9B08     		lsr	r3, r3, #2
 4382 02a0 022B     		cmp	r3, #2
 4383 02a2 0ED0     		beq	.L342
 4384              	.L336:
1079:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4385              		.loc 1 1079 0
 4386 02a4 3B1C     		mov	r3, r7
 4387 02a6 0C33     		add	r3, r3, #12
 4388 02a8 3A1C     		mov	r2, r7
 4389 02aa 0C32     		add	r2, r2, #12
 4390 02ac 1288     		ldrh	r2, [r2]
 4391 02ae 0132     		add	r2, r2, #1
 4392 02b0 1A80     		strh	r2, [r3]
 4393              	.L335:
1079:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4394              		.loc 1 1079 0 is_stmt 0
 4395 02b2 3B1C     		mov	r3, r7
 4396 02b4 0C33     		add	r3, r3, #12
 4397 02b6 0021     		mov	r1, #0
 4398 02b8 5A5E     		ldrsh	r2, [r3, r1]
 4399 02ba 1B4B     		ldr	r3, .L343+52
 4400 02bc 9A42     		cmp	r2, r3
 4401 02be E8DD     		ble	.L338
 4402 02c0 00E0     		b	.L337
 4403              	.L342:
 4404              		.loc 1 1081 0 is_stmt 1
 4405 02c2 C046     		mov	r8, r8
 4406              	.L337:
1082:../Sources/TFC/TFC_CrystalClock.c ****   }
1083:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 4407              		.loc 1 1083 0
 4408 02c4 0B4B     		ldr	r3, .L343
 4409 02c6 9B79     		ldrb	r3, [r3, #6]
 4410 02c8 DBB2     		uxtb	r3, r3
 4411 02ca 1A1C     		mov	r2, r3
 4412 02cc 0C23     		mov	r3, #12
 4413 02ce 1340     		and	r3, r2
 4414 02d0 9B08     		lsr	r3, r3, #2
 4415 02d2 022B     		cmp	r3, #2
 4416 02d4 01D0     		beq	.L339
 4417              		.loc 1 1083 0 is_stmt 0
 4418 02d6 1A23     		mov	r3, #26
 4419 02d8 08E0     		b	.L310
 4420              	.L339:
1084:../Sources/TFC/TFC_CrystalClock.c ****  
1085:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE  
1086:../Sources/TFC/TFC_CrystalClock.c **** // It is recommended that the clock monitor is enabled when using an external clock as the clock so
1087:../Sources/TFC/TFC_CrystalClock.c **** // It is enabled here but can be removed if this is not required.
1088:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 4421              		.loc 1 1088 0 is_stmt 1
 4422 02da 064B     		ldr	r3, .L343
 4423 02dc 054A     		ldr	r2, .L343
 4424 02de 5279     		ldrb	r2, [r2, #5]
 4425 02e0 D2B2     		uxtb	r2, r2
 4426 02e2 2021     		mov	r1, #32
 4427 02e4 0A43     		orr	r2, r1
 4428 02e6 D2B2     		uxtb	r2, r2
 4429 02e8 5A71     		strb	r2, [r3, #5]
1089:../Sources/TFC/TFC_CrystalClock.c ****   
1090:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency  
 4430              		.loc 1 1090 0
 4431 02ea 7B68     		ldr	r3, [r7, #4]
 4432              	.L310:
1091:../Sources/TFC/TFC_CrystalClock.c **** } // fbi_fbe
 4433              		.loc 1 1091 0
 4434 02ec 181C     		mov	r0, r3
 4435 02ee BD46     		mov	sp, r7
 4436 02f0 04B0     		add	sp, sp, #16
 4437              		@ sp needed for prologue
 4438 02f2 80BD     		pop	{r7, pc}
 4439              	.L344:
 4440              		.align	2
 4441              	.L343:
 4442 02f4 00400640 		.word	1074151424
 4443 02f8 80F0FA02 		.word	50000000
 4444 02fc 2F750000 		.word	29999
 4445 0300 409C0000 		.word	40000
 4446 0304 BFC62D00 		.word	2999999
 4447 0308 0048E801 		.word	32000000
 4448 030c 00127A00 		.word	8000000
 4449 0310 D0121300 		.word	1250000
 4450 0314 A0252600 		.word	2500000
 4451 0318 404B4C00 		.word	5000000
 4452 031c 80969800 		.word	10000000
 4453 0320 002D3101 		.word	20000000
 4454 0324 0F270000 		.word	9999
 4455 0328 CF070000 		.word	1999
 4456              		.cfi_endproc
 4457              	.LFE15:
 4459              		.section	.text.fbi_blpi,"ax",%progbits
 4460              		.align	2
 4461              		.global	fbi_blpi
 4462              		.code	16
 4463              		.thumb_func
 4465              	fbi_blpi:
 4466              	.LFB16:
1092:../Sources/TFC/TFC_CrystalClock.c **** 
1093:../Sources/TFC/TFC_CrystalClock.c **** 
1094:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
1095:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : fbi_blpi
1096:../Sources/TFC/TFC_CrystalClock.c ****  *
1097:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: FBI to BLPI mode
1098:../Sources/TFC/TFC_CrystalClock.c ****  *
1099:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from FBI mode to BLPI mode. This is
1100:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by setting the MCG_C2[LP] bit. There is no status bit to 
1101:../Sources/TFC/TFC_CrystalClock.c ****  * check so 0 is always returned if the function was called with the MCG
1102:../Sources/TFC/TFC_CrystalClock.c ****  * in FBI mode. 
1103:../Sources/TFC/TFC_CrystalClock.c ****  *
1104:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: irc_freq - internal reference clock frequency
1105:../Sources/TFC/TFC_CrystalClock.c ****  *             ircs_select - 0 if slow irc, 1 if fast irc
1106:../Sources/TFC/TFC_CrystalClock.c ****  *
1107:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGOUT frequency or error code 0x13
1108:../Sources/TFC/TFC_CrystalClock.c ****  */
1109:../Sources/TFC/TFC_CrystalClock.c **** int fbi_blpi(int irc_freq, unsigned char irc_select)
1110:../Sources/TFC/TFC_CrystalClock.c **** {
 4467              		.loc 1 1110 0
 4468              		.cfi_startproc
 4469 0000 80B5     		push	{r7, lr}
 4470              	.LCFI48:
 4471              		.cfi_def_cfa_offset 8
 4472              		.cfi_offset 7, -8
 4473              		.cfi_offset 14, -4
 4474 0002 84B0     		sub	sp, sp, #16
 4475              	.LCFI49:
 4476              		.cfi_def_cfa_offset 24
 4477 0004 00AF     		add	r7, sp, #0
 4478              	.LCFI50:
 4479              		.cfi_def_cfa_register 7
 4480 0006 7860     		str	r0, [r7, #4]
 4481 0008 0A1C     		mov	r2, r1
 4482 000a FB1C     		add	r3, r7, #3
 4483 000c 1A70     		strb	r2, [r3]
1111:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
1112:../Sources/TFC/TFC_CrystalClock.c ****   
1113:../Sources/TFC/TFC_CrystalClock.c **** // check if in FBI mode
1114:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4484              		.loc 1 1114 0
 4485 000e 234B     		ldr	r3, .L350
 4486 0010 9B79     		ldrb	r3, [r3, #6]
 4487 0012 DBB2     		uxtb	r3, r3
 4488 0014 1A1C     		mov	r2, r3
 4489 0016 0C23     		mov	r3, #12
 4490 0018 1340     		and	r3, r2
 4491 001a 9B08     		lsr	r3, r3, #2
 4492 001c 012B     		cmp	r3, #1
 4493 001e 14D1     		bne	.L346
1115:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4494              		.loc 1 1115 0
 4495 0020 1E4B     		ldr	r3, .L350
 4496 0022 9B79     		ldrb	r3, [r3, #6]
 4497 0024 DBB2     		uxtb	r3, r3
 4498 0026 1A1C     		mov	r2, r3
 4499 0028 1023     		mov	r3, #16
 4500 002a 1340     		and	r3, r2
1114:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4501              		.loc 1 1114 0
 4502 002c 0DD0     		beq	.L346
1116:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 4503              		.loc 1 1116 0
 4504 002e 1B4B     		ldr	r3, .L350
 4505 0030 9B79     		ldrb	r3, [r3, #6]
 4506 0032 DBB2     		uxtb	r3, r3
 4507 0034 1A1C     		mov	r2, r3
 4508 0036 2023     		mov	r3, #32
 4509 0038 1340     		and	r3, r2
1115:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4510              		.loc 1 1115 0
 4511 003a 06D1     		bne	.L346
1117:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
 4512              		.loc 1 1117 0
 4513 003c 174B     		ldr	r3, .L350
 4514 003e 5B78     		ldrb	r3, [r3, #1]
 4515 0040 DBB2     		uxtb	r3, r3
 4516 0042 1A1C     		mov	r2, r3
 4517 0044 0223     		mov	r3, #2
 4518 0046 1340     		and	r3, r2
1114:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4519              		.loc 1 1114 0
 4520 0048 01D0     		beq	.L347
 4521              	.L346:
1118:../Sources/TFC/TFC_CrystalClock.c ****   {  
1119:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3;                                                       // MCG not in correct mode re
 4522              		.loc 1 1119 0
 4523 004a 0323     		mov	r3, #3
 4524 004c 21E0     		b	.L348
 4525              	.L347:
1120:../Sources/TFC/TFC_CrystalClock.c ****   }
1121:../Sources/TFC/TFC_CrystalClock.c **** 
1122:../Sources/TFC/TFC_CrystalClock.c **** // Set LP bit to disable the FLL and enter BLPI
1123:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 |= MCG_C2_LP_MASK;
 4526              		.loc 1 1123 0
 4527 004e 134B     		ldr	r3, .L350
 4528 0050 124A     		ldr	r2, .L350
 4529 0052 5278     		ldrb	r2, [r2, #1]
 4530 0054 D2B2     		uxtb	r2, r2
 4531 0056 0221     		mov	r1, #2
 4532 0058 0A43     		orr	r2, r1
 4533 005a D2B2     		uxtb	r2, r2
 4534 005c 5A70     		strb	r2, [r3, #1]
1124:../Sources/TFC/TFC_CrystalClock.c ****   
1125:../Sources/TFC/TFC_CrystalClock.c **** // Now in BLPI
1126:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 4535              		.loc 1 1126 0
 4536 005e FB1C     		add	r3, r7, #3
 4537 0060 1B78     		ldrb	r3, [r3]
 4538 0062 002B     		cmp	r3, #0
 4539 0064 14D0     		beq	.L349
1127:../Sources/TFC/TFC_CrystalClock.c ****   {
1128:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 4540              		.loc 1 1128 0
 4541 0066 0D4B     		ldr	r3, .L350
 4542 0068 1B7A     		ldrb	r3, [r3, #8]
 4543 006a DBB2     		uxtb	r3, r3
 4544 006c 1A1C     		mov	r2, r3
 4545 006e 0E23     		mov	r3, #14
 4546 0070 1340     		and	r3, r2
 4547 0072 5B08     		lsr	r3, r3, #1
 4548 0074 0122     		mov	r2, #1
 4549 0076 9A40     		lsl	r2, r2, r3
 4550 0078 3B1C     		mov	r3, r7
 4551 007a 0F33     		add	r3, r3, #15
 4552 007c 1A70     		strb	r2, [r3]
1129:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
 4553              		.loc 1 1129 0
 4554 007e 3B1C     		mov	r3, r7
 4555 0080 0F33     		add	r3, r3, #15
 4556 0082 1B78     		ldrb	r3, [r3]
 4557 0084 7868     		ldr	r0, [r7, #4]
 4558 0086 191C     		mov	r1, r3
 4559 0088 FFF7FEFF 		bl	__aeabi_idiv
 4560 008c 031C     		mov	r3, r0
 4561 008e 00E0     		b	.L348
 4562              	.L349:
1130:../Sources/TFC/TFC_CrystalClock.c ****   }
1131:../Sources/TFC/TFC_CrystalClock.c ****   else
1132:../Sources/TFC/TFC_CrystalClock.c ****   {
1133:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 4563              		.loc 1 1133 0
 4564 0090 7B68     		ldr	r3, [r7, #4]
 4565              	.L348:
1134:../Sources/TFC/TFC_CrystalClock.c ****   }   
1135:../Sources/TFC/TFC_CrystalClock.c **** } // fbi_blpi
 4566              		.loc 1 1135 0
 4567 0092 181C     		mov	r0, r3
 4568 0094 BD46     		mov	sp, r7
 4569 0096 04B0     		add	sp, sp, #16
 4570              		@ sp needed for prologue
 4571 0098 80BD     		pop	{r7, pc}
 4572              	.L351:
 4573 009a C046     		.align	2
 4574              	.L350:
 4575 009c 00400640 		.word	1074151424
 4576              		.cfi_endproc
 4577              	.LFE16:
 4579              		.section	.text.blpi_fbi,"ax",%progbits
 4580              		.align	2
 4581              		.global	blpi_fbi
 4582              		.code	16
 4583              		.thumb_func
 4585              	blpi_fbi:
 4586              	.LFB17:
1136:../Sources/TFC/TFC_CrystalClock.c **** 
1137:../Sources/TFC/TFC_CrystalClock.c **** 
1138:../Sources/TFC/TFC_CrystalClock.c **** 
1139:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
1140:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : blpi_fbi
1141:../Sources/TFC/TFC_CrystalClock.c ****  *
1142:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: BLPI to FBI mode
1143:../Sources/TFC/TFC_CrystalClock.c ****  *
1144:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from BLPI mode to FBI mode. This is
1145:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by clearing the MCG_C2[LP] bit. There is no status bit to 
1146:../Sources/TFC/TFC_CrystalClock.c ****  * check so 0 is always returned if the function was called with the MCG
1147:../Sources/TFC/TFC_CrystalClock.c ****  * in BLPI mode. 
1148:../Sources/TFC/TFC_CrystalClock.c ****  *
1149:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: irc_freq - internal reference clock frequency
1150:../Sources/TFC/TFC_CrystalClock.c ****  *             ircs_select - 0 if slow irc, 1 if fast irc
1151:../Sources/TFC/TFC_CrystalClock.c ****  *
1152:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGOUT frequency or error code 0x15
1153:../Sources/TFC/TFC_CrystalClock.c ****  */
1154:../Sources/TFC/TFC_CrystalClock.c **** int blpi_fbi(int irc_freq, unsigned char irc_select)
1155:../Sources/TFC/TFC_CrystalClock.c **** {
 4587              		.loc 1 1155 0
 4588              		.cfi_startproc
 4589 0000 80B5     		push	{r7, lr}
 4590              	.LCFI51:
 4591              		.cfi_def_cfa_offset 8
 4592              		.cfi_offset 7, -8
 4593              		.cfi_offset 14, -4
 4594 0002 84B0     		sub	sp, sp, #16
 4595              	.LCFI52:
 4596              		.cfi_def_cfa_offset 24
 4597 0004 00AF     		add	r7, sp, #0
 4598              	.LCFI53:
 4599              		.cfi_def_cfa_register 7
 4600 0006 7860     		str	r0, [r7, #4]
 4601 0008 0A1C     		mov	r2, r1
 4602 000a FB1C     		add	r3, r7, #3
 4603 000c 1A70     		strb	r2, [r3]
1156:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
1157:../Sources/TFC/TFC_CrystalClock.c ****   // check if in BLPI mode
1158:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4604              		.loc 1 1158 0
 4605 000e 234B     		ldr	r3, .L357
 4606 0010 9B79     		ldrb	r3, [r3, #6]
 4607 0012 DBB2     		uxtb	r3, r3
 4608 0014 1A1C     		mov	r2, r3
 4609 0016 0C23     		mov	r3, #12
 4610 0018 1340     		and	r3, r2
 4611 001a 9B08     		lsr	r3, r3, #2
 4612 001c 012B     		cmp	r3, #1
 4613 001e 14D1     		bne	.L353
1159:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4614              		.loc 1 1159 0
 4615 0020 1E4B     		ldr	r3, .L357
 4616 0022 9B79     		ldrb	r3, [r3, #6]
 4617 0024 DBB2     		uxtb	r3, r3
 4618 0026 1A1C     		mov	r2, r3
 4619 0028 1023     		mov	r3, #16
 4620 002a 1340     		and	r3, r2
1158:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4621              		.loc 1 1158 0
 4622 002c 0DD0     		beq	.L353
1160:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 4623              		.loc 1 1160 0
 4624 002e 1B4B     		ldr	r3, .L357
 4625 0030 9B79     		ldrb	r3, [r3, #6]
 4626 0032 DBB2     		uxtb	r3, r3
 4627 0034 1A1C     		mov	r2, r3
 4628 0036 2023     		mov	r3, #32
 4629 0038 1340     		and	r3, r2
1159:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4630              		.loc 1 1159 0
 4631 003a 06D1     		bne	.L353
1161:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_C2 & MCG_C2_LP_MASK)))                                     // check LP bit is set
 4632              		.loc 1 1161 0
 4633 003c 174B     		ldr	r3, .L357
 4634 003e 5B78     		ldrb	r3, [r3, #1]
 4635 0040 DBB2     		uxtb	r3, r3
 4636 0042 1A1C     		mov	r2, r3
 4637 0044 0223     		mov	r3, #2
 4638 0046 1340     		and	r3, r2
1158:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4639              		.loc 1 1158 0
 4640 0048 01D1     		bne	.L354
 4641              	.L353:
1162:../Sources/TFC/TFC_CrystalClock.c ****   {
1163:../Sources/TFC/TFC_CrystalClock.c ****     return 0x5;                                                       // MCG not in correct mode re
 4642              		.loc 1 1163 0
 4643 004a 0523     		mov	r3, #5
 4644 004c 21E0     		b	.L355
 4645              	.L354:
1164:../Sources/TFC/TFC_CrystalClock.c ****   }
1165:../Sources/TFC/TFC_CrystalClock.c **** 
1166:../Sources/TFC/TFC_CrystalClock.c **** // Clear LP bit to enable the FLL and enter FBI mode   
1167:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 &= ~MCG_C2_LP_MASK;
 4646              		.loc 1 1167 0
 4647 004e 134B     		ldr	r3, .L357
 4648 0050 124A     		ldr	r2, .L357
 4649 0052 5278     		ldrb	r2, [r2, #1]
 4650 0054 D2B2     		uxtb	r2, r2
 4651 0056 0221     		mov	r1, #2
 4652 0058 8A43     		bic	r2, r1
 4653 005a D2B2     		uxtb	r2, r2
 4654 005c 5A70     		strb	r2, [r3, #1]
1168:../Sources/TFC/TFC_CrystalClock.c ****   
1169:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBI mode
1170:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 4655              		.loc 1 1170 0
 4656 005e FB1C     		add	r3, r7, #3
 4657 0060 1B78     		ldrb	r3, [r3]
 4658 0062 002B     		cmp	r3, #0
 4659 0064 14D0     		beq	.L356
1171:../Sources/TFC/TFC_CrystalClock.c ****   {
1172:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 4660              		.loc 1 1172 0
 4661 0066 0D4B     		ldr	r3, .L357
 4662 0068 1B7A     		ldrb	r3, [r3, #8]
 4663 006a DBB2     		uxtb	r3, r3
 4664 006c 1A1C     		mov	r2, r3
 4665 006e 0E23     		mov	r3, #14
 4666 0070 1340     		and	r3, r2
 4667 0072 5B08     		lsr	r3, r3, #1
 4668 0074 0122     		mov	r2, #1
 4669 0076 9A40     		lsl	r2, r2, r3
 4670 0078 3B1C     		mov	r3, r7
 4671 007a 0F33     		add	r3, r3, #15
 4672 007c 1A70     		strb	r2, [r3]
1173:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
 4673              		.loc 1 1173 0
 4674 007e 3B1C     		mov	r3, r7
 4675 0080 0F33     		add	r3, r3, #15
 4676 0082 1B78     		ldrb	r3, [r3]
 4677 0084 7868     		ldr	r0, [r7, #4]
 4678 0086 191C     		mov	r1, r3
 4679 0088 FFF7FEFF 		bl	__aeabi_idiv
 4680 008c 031C     		mov	r3, r0
 4681 008e 00E0     		b	.L355
 4682              	.L356:
1174:../Sources/TFC/TFC_CrystalClock.c ****   }
1175:../Sources/TFC/TFC_CrystalClock.c ****   else
1176:../Sources/TFC/TFC_CrystalClock.c ****   {
1177:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 4683              		.loc 1 1177 0
 4684 0090 7B68     		ldr	r3, [r7, #4]
 4685              	.L355:
1178:../Sources/TFC/TFC_CrystalClock.c ****   }
1179:../Sources/TFC/TFC_CrystalClock.c **** } // blpi_fbi
 4686              		.loc 1 1179 0
 4687 0092 181C     		mov	r0, r3
 4688 0094 BD46     		mov	sp, r7
 4689 0096 04B0     		add	sp, sp, #16
 4690              		@ sp needed for prologue
 4691 0098 80BD     		pop	{r7, pc}
 4692              	.L358:
 4693 009a C046     		.align	2
 4694              	.L357:
 4695 009c 00400640 		.word	1074151424
 4696              		.cfi_endproc
 4697              	.LFE17:
 4699              		.section	.text.fbi_fee,"ax",%progbits
 4700              		.align	2
 4701              		.global	fbi_fee
 4702              		.code	16
 4703              		.thumb_func
 4705              	fbi_fee:
 4706              	.LFB18:
1180:../Sources/TFC/TFC_CrystalClock.c **** 
1181:../Sources/TFC/TFC_CrystalClock.c **** 
1182:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fee(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
1183:../Sources/TFC/TFC_CrystalClock.c **** {
 4707              		.loc 1 1183 0
 4708              		.cfi_startproc
 4709 0000 80B5     		push	{r7, lr}
 4710              	.LCFI54:
 4711              		.cfi_def_cfa_offset 8
 4712              		.cfi_offset 7, -8
 4713              		.cfi_offset 14, -4
 4714 0002 86B0     		sub	sp, sp, #24
 4715              	.LCFI55:
 4716              		.cfi_def_cfa_offset 32
 4717 0004 00AF     		add	r7, sp, #0
 4718              	.LCFI56:
 4719              		.cfi_def_cfa_register 7
 4720 0006 7860     		str	r0, [r7, #4]
 4721 0008 FB1C     		add	r3, r7, #3
 4722 000a 1970     		strb	r1, [r3]
 4723 000c BB1C     		add	r3, r7, #2
 4724 000e 1A70     		strb	r2, [r3]
1184:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
1185:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
1186:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1187:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out, fll_ref_freq;
1188:../Sources/TFC/TFC_CrystalClock.c **** 
1189:../Sources/TFC/TFC_CrystalClock.c **** // check if in FBI mode
1190:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4725              		.loc 1 1190 0
 4726 0010 C64B     		ldr	r3, .L398
 4727 0012 9B79     		ldrb	r3, [r3, #6]
 4728 0014 DBB2     		uxtb	r3, r3
 4729 0016 1A1C     		mov	r2, r3
 4730 0018 0C23     		mov	r3, #12
 4731 001a 1340     		and	r3, r2
 4732 001c 9B08     		lsr	r3, r3, #2
 4733 001e 012B     		cmp	r3, #1
 4734 0020 14D1     		bne	.L360
1191:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4735              		.loc 1 1191 0
 4736 0022 C24B     		ldr	r3, .L398
 4737 0024 9B79     		ldrb	r3, [r3, #6]
 4738 0026 DBB2     		uxtb	r3, r3
 4739 0028 1A1C     		mov	r2, r3
 4740 002a 1023     		mov	r3, #16
 4741 002c 1340     		and	r3, r2
1190:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4742              		.loc 1 1190 0
 4743 002e 0DD0     		beq	.L360
1192:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 4744              		.loc 1 1192 0
 4745 0030 BE4B     		ldr	r3, .L398
 4746 0032 9B79     		ldrb	r3, [r3, #6]
 4747 0034 DBB2     		uxtb	r3, r3
 4748 0036 1A1C     		mov	r2, r3
 4749 0038 2023     		mov	r3, #32
 4750 003a 1340     		and	r3, r2
1191:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4751              		.loc 1 1191 0
 4752 003c 06D1     		bne	.L360
1193:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
 4753              		.loc 1 1193 0
 4754 003e BB4B     		ldr	r3, .L398
 4755 0040 5B78     		ldrb	r3, [r3, #1]
 4756 0042 DBB2     		uxtb	r3, r3
 4757 0044 1A1C     		mov	r2, r3
 4758 0046 0223     		mov	r3, #2
 4759 0048 1340     		and	r3, r2
1190:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4760              		.loc 1 1190 0
 4761 004a 01D0     		beq	.L361
 4762              	.L360:
1194:../Sources/TFC/TFC_CrystalClock.c ****   {  
1195:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3;                                                       // MCG not in correct mode re
 4763              		.loc 1 1195 0
 4764 004c 0323     		mov	r3, #3
 4765 004e 92E1     		b	.L362
 4766              	.L361:
1196:../Sources/TFC/TFC_CrystalClock.c ****   }
1197:../Sources/TFC/TFC_CrystalClock.c ****   
1198:../Sources/TFC/TFC_CrystalClock.c **** // check external frequency is less than the maximum frequency
1199:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 4767              		.loc 1 1199 0
 4768 0050 7A68     		ldr	r2, [r7, #4]
 4769 0052 B74B     		ldr	r3, .L398+4
 4770 0054 9A42     		cmp	r2, r3
 4771 0056 01DD     		ble	.L363
 4772              		.loc 1 1199 0 is_stmt 0
 4773 0058 2123     		mov	r3, #33
 4774 005a 8CE1     		b	.L362
 4775              	.L363:
1200:../Sources/TFC/TFC_CrystalClock.c ****   
1201:../Sources/TFC/TFC_CrystalClock.c **** // check crystal frequency is within spec. if crystal osc is being used
1202:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 4776              		.loc 1 1202 0 is_stmt 1
 4777 005c BB1C     		add	r3, r7, #2
 4778 005e 1B78     		ldrb	r3, [r3]
 4779 0060 002B     		cmp	r3, #0
 4780 0062 11D0     		beq	.L364
1203:../Sources/TFC/TFC_CrystalClock.c ****   {
1204:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 30000) ||
 4781              		.loc 1 1204 0
 4782 0064 7A68     		ldr	r2, [r7, #4]
 4783 0066 B34B     		ldr	r3, .L398+8
 4784 0068 9A42     		cmp	r2, r3
 4785 006a 0BDD     		ble	.L365
 4786              		.loc 1 1204 0 is_stmt 0
 4787 006c 7A68     		ldr	r2, [r7, #4]
 4788 006e B24B     		ldr	r3, .L398+12
 4789 0070 9A42     		cmp	r2, r3
 4790 0072 03DD     		ble	.L366
1205:../Sources/TFC/TFC_CrystalClock.c ****         ((crystal_val > 40000) && (crystal_val < 3000000)) ||
 4791              		.loc 1 1205 0 is_stmt 1
 4792 0074 7A68     		ldr	r2, [r7, #4]
 4793 0076 B14B     		ldr	r3, .L398+16
 4794 0078 9A42     		cmp	r2, r3
 4795 007a 03DD     		ble	.L365
 4796              	.L366:
 4797              		.loc 1 1205 0 is_stmt 0
 4798 007c 7A68     		ldr	r2, [r7, #4]
 4799 007e B04B     		ldr	r3, .L398+20
 4800 0080 9A42     		cmp	r2, r3
 4801 0082 01DD     		ble	.L364
 4802              	.L365:
1206:../Sources/TFC/TFC_CrystalClock.c ****         (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal op
 4803              		.loc 1 1206 0 is_stmt 1
 4804 0084 2223     		mov	r3, #34
 4805 0086 76E1     		b	.L362
 4806              	.L364:
1207:../Sources/TFC/TFC_CrystalClock.c ****   }
1208:../Sources/TFC/TFC_CrystalClock.c **** 
1209:../Sources/TFC/TFC_CrystalClock.c **** // make sure HGO will never be greater than 1. Could return an error instead if desired.  
1210:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 4807              		.loc 1 1210 0
 4808 0088 FB1C     		add	r3, r7, #3
 4809 008a 1B78     		ldrb	r3, [r3]
 4810 008c 002B     		cmp	r3, #0
 4811 008e 02D0     		beq	.L367
1211:../Sources/TFC/TFC_CrystalClock.c ****   {
1212:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 4812              		.loc 1 1212 0
 4813 0090 FB1C     		add	r3, r7, #3
 4814 0092 0122     		mov	r2, #1
 4815 0094 1A70     		strb	r2, [r3]
 4816              	.L367:
1213:../Sources/TFC/TFC_CrystalClock.c ****   }
1214:../Sources/TFC/TFC_CrystalClock.c **** 
1215:../Sources/TFC/TFC_CrystalClock.c **** // configure the MCG_C2 register
1216:../Sources/TFC/TFC_CrystalClock.c **** // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the F
1217:../Sources/TFC/TFC_CrystalClock.c **** // it still needs to be set correctly even if the oscillator is not being used
1218:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 4817              		.loc 1 1218 0
 4818 0096 A54A     		ldr	r2, .L398
 4819 0098 3B1C     		mov	r3, r7
 4820 009a 1733     		add	r3, r3, #23
 4821 009c 5278     		ldrb	r2, [r2, #1]
 4822 009e 1A70     		strb	r2, [r3]
1219:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 4823              		.loc 1 1219 0
 4824 00a0 3B1C     		mov	r3, r7
 4825 00a2 1733     		add	r3, r3, #23
 4826 00a4 3A1C     		mov	r2, r7
 4827 00a6 1732     		add	r2, r2, #23
 4828 00a8 1278     		ldrb	r2, [r2]
 4829 00aa 3C21     		mov	r1, #60
 4830 00ac 8A43     		bic	r2, r1
 4831 00ae 1A70     		strb	r2, [r3]
1220:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 40000)
 4832              		.loc 1 1220 0
 4833 00b0 7A68     		ldr	r2, [r7, #4]
 4834 00b2 A14B     		ldr	r3, .L398+12
 4835 00b4 9A42     		cmp	r2, r3
 4836 00b6 11DC     		bgt	.L368
1221:../Sources/TFC/TFC_CrystalClock.c ****   {
1222:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4837              		.loc 1 1222 0
 4838 00b8 FB1C     		add	r3, r7, #3
 4839 00ba 1B78     		ldrb	r3, [r3]
 4840 00bc DB00     		lsl	r3, r3, #3
 4841 00be DAB2     		uxtb	r2, r3
 4842 00c0 BB1C     		add	r3, r7, #2
 4843 00c2 1B78     		ldrb	r3, [r3]
 4844 00c4 9B00     		lsl	r3, r3, #2
 4845 00c6 DBB2     		uxtb	r3, r3
 4846 00c8 1343     		orr	r3, r2
 4847 00ca D9B2     		uxtb	r1, r3
 4848 00cc 3B1C     		mov	r3, r7
 4849 00ce 1733     		add	r3, r3, #23
 4850 00d0 3A1C     		mov	r2, r7
 4851 00d2 1732     		add	r2, r2, #23
 4852 00d4 1278     		ldrb	r2, [r2]
 4853 00d6 0A43     		orr	r2, r1
 4854 00d8 1A70     		strb	r2, [r3]
 4855 00da 2CE0     		b	.L369
 4856              	.L368:
1223:../Sources/TFC/TFC_CrystalClock.c ****   }
1224:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 8000000)
 4857              		.loc 1 1224 0
 4858 00dc 7A68     		ldr	r2, [r7, #4]
 4859 00de 994B     		ldr	r3, .L398+24
 4860 00e0 9A42     		cmp	r2, r3
 4861 00e2 14DC     		bgt	.L370
1225:../Sources/TFC/TFC_CrystalClock.c ****   {
1226:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4862              		.loc 1 1226 0
 4863 00e4 FB1C     		add	r3, r7, #3
 4864 00e6 1B78     		ldrb	r3, [r3]
 4865 00e8 DB00     		lsl	r3, r3, #3
 4866 00ea DAB2     		uxtb	r2, r3
 4867 00ec BB1C     		add	r3, r7, #2
 4868 00ee 1B78     		ldrb	r3, [r3]
 4869 00f0 9B00     		lsl	r3, r3, #2
 4870 00f2 DBB2     		uxtb	r3, r3
 4871 00f4 1343     		orr	r3, r2
 4872 00f6 DAB2     		uxtb	r2, r3
 4873 00f8 3B1C     		mov	r3, r7
 4874 00fa 1733     		add	r3, r3, #23
 4875 00fc 1B78     		ldrb	r3, [r3]
 4876 00fe 1343     		orr	r3, r2
 4877 0100 DAB2     		uxtb	r2, r3
 4878 0102 3B1C     		mov	r3, r7
 4879 0104 1733     		add	r3, r3, #23
 4880 0106 1021     		mov	r1, #16
 4881 0108 0A43     		orr	r2, r1
 4882 010a 1A70     		strb	r2, [r3]
 4883 010c 13E0     		b	.L369
 4884              	.L370:
1227:../Sources/TFC/TFC_CrystalClock.c ****   }
1228:../Sources/TFC/TFC_CrystalClock.c ****   else
1229:../Sources/TFC/TFC_CrystalClock.c ****   {
1230:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4885              		.loc 1 1230 0
 4886 010e FB1C     		add	r3, r7, #3
 4887 0110 1B78     		ldrb	r3, [r3]
 4888 0112 DB00     		lsl	r3, r3, #3
 4889 0114 DAB2     		uxtb	r2, r3
 4890 0116 BB1C     		add	r3, r7, #2
 4891 0118 1B78     		ldrb	r3, [r3]
 4892 011a 9B00     		lsl	r3, r3, #2
 4893 011c DBB2     		uxtb	r3, r3
 4894 011e 1343     		orr	r3, r2
 4895 0120 DAB2     		uxtb	r2, r3
 4896 0122 3B1C     		mov	r3, r7
 4897 0124 1733     		add	r3, r3, #23
 4898 0126 1B78     		ldrb	r3, [r3]
 4899 0128 1343     		orr	r3, r2
 4900 012a DAB2     		uxtb	r2, r3
 4901 012c 3B1C     		mov	r3, r7
 4902 012e 1733     		add	r3, r3, #23
 4903 0130 2021     		mov	r1, #32
 4904 0132 0A43     		orr	r2, r1
 4905 0134 1A70     		strb	r2, [r3]
 4906              	.L369:
1231:../Sources/TFC/TFC_CrystalClock.c ****   }
1232:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 4907              		.loc 1 1232 0
 4908 0136 7D4B     		ldr	r3, .L398
 4909 0138 3A1C     		mov	r2, r7
 4910 013a 1732     		add	r2, r2, #23
 4911 013c 1278     		ldrb	r2, [r2]
 4912 013e 5A70     		strb	r2, [r3, #1]
1233:../Sources/TFC/TFC_CrystalClock.c **** 
1234:../Sources/TFC/TFC_CrystalClock.c **** // determine FRDIV based on reference clock frequency
1235:../Sources/TFC/TFC_CrystalClock.c **** // since the external frequency has already been checked only the maximum frequency for each FRDIV 
1236:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 4913              		.loc 1 1236 0
 4914 0140 7A68     		ldr	r2, [r7, #4]
 4915 0142 814B     		ldr	r3, .L398+28
 4916 0144 9A42     		cmp	r2, r3
 4917 0146 04DC     		bgt	.L371
 4918              		.loc 1 1236 0 is_stmt 0
 4919 0148 3B1C     		mov	r3, r7
 4920 014a 1633     		add	r3, r3, #22
 4921 014c 0022     		mov	r2, #0
 4922 014e 1A70     		strb	r2, [r3]
 4923 0150 27E0     		b	.L372
 4924              	.L371:
1237:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 4925              		.loc 1 1237 0 is_stmt 1
 4926 0152 7A68     		ldr	r2, [r7, #4]
 4927 0154 7D4B     		ldr	r3, .L398+32
 4928 0156 9A42     		cmp	r2, r3
 4929 0158 04DC     		bgt	.L373
 4930              		.loc 1 1237 0 is_stmt 0
 4931 015a 3B1C     		mov	r3, r7
 4932 015c 1633     		add	r3, r3, #22
 4933 015e 0122     		mov	r2, #1
 4934 0160 1A70     		strb	r2, [r3]
 4935 0162 1EE0     		b	.L372
 4936              	.L373:
1238:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 4937              		.loc 1 1238 0 is_stmt 1
 4938 0164 7A68     		ldr	r2, [r7, #4]
 4939 0166 7A4B     		ldr	r3, .L398+36
 4940 0168 9A42     		cmp	r2, r3
 4941 016a 04DC     		bgt	.L374
 4942              		.loc 1 1238 0 is_stmt 0
 4943 016c 3B1C     		mov	r3, r7
 4944 016e 1633     		add	r3, r3, #22
 4945 0170 0222     		mov	r2, #2
 4946 0172 1A70     		strb	r2, [r3]
 4947 0174 15E0     		b	.L372
 4948              	.L374:
1239:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 4949              		.loc 1 1239 0 is_stmt 1
 4950 0176 7A68     		ldr	r2, [r7, #4]
 4951 0178 764B     		ldr	r3, .L398+40
 4952 017a 9A42     		cmp	r2, r3
 4953 017c 04DC     		bgt	.L375
 4954              		.loc 1 1239 0 is_stmt 0
 4955 017e 3B1C     		mov	r3, r7
 4956 0180 1633     		add	r3, r3, #22
 4957 0182 0322     		mov	r2, #3
 4958 0184 1A70     		strb	r2, [r3]
 4959 0186 0CE0     		b	.L372
 4960              	.L375:
1240:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 4961              		.loc 1 1240 0 is_stmt 1
 4962 0188 7A68     		ldr	r2, [r7, #4]
 4963 018a 734B     		ldr	r3, .L398+44
 4964 018c 9A42     		cmp	r2, r3
 4965 018e 04DC     		bgt	.L376
 4966              		.loc 1 1240 0 is_stmt 0
 4967 0190 3B1C     		mov	r3, r7
 4968 0192 1633     		add	r3, r3, #22
 4969 0194 0422     		mov	r2, #4
 4970 0196 1A70     		strb	r2, [r3]
 4971 0198 03E0     		b	.L372
 4972              	.L376:
1241:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 4973              		.loc 1 1241 0 is_stmt 1
 4974 019a 3B1C     		mov	r3, r7
 4975 019c 1633     		add	r3, r3, #22
 4976 019e 0522     		mov	r2, #5
 4977 01a0 1A70     		strb	r2, [r3]
 4978              	.L372:
1242:../Sources/TFC/TFC_CrystalClock.c **** // The FLL ref clk divide value depends on FRDIV and the RANGE value
1243:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT) > 0)
 4979              		.loc 1 1243 0
 4980 01a2 624B     		ldr	r3, .L398
 4981 01a4 5B78     		ldrb	r3, [r3, #1]
 4982 01a6 DBB2     		uxtb	r3, r3
 4983 01a8 1A1C     		mov	r2, r3
 4984 01aa 3023     		mov	r3, #48
 4985 01ac 1340     		and	r3, r2
 4986 01ae 1B09     		lsr	r3, r3, #4
 4987 01b0 0DD0     		beq	.L377
1244:../Sources/TFC/TFC_CrystalClock.c ****   {
1245:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (32 << frdiv_val));
 4988              		.loc 1 1245 0
 4989 01b2 3B1C     		mov	r3, r7
 4990 01b4 1633     		add	r3, r3, #22
 4991 01b6 1B78     		ldrb	r3, [r3]
 4992 01b8 2022     		mov	r2, #32
 4993 01ba 111C     		mov	r1, r2
 4994 01bc 9940     		lsl	r1, r1, r3
 4995 01be 0B1C     		mov	r3, r1
 4996 01c0 7868     		ldr	r0, [r7, #4]
 4997 01c2 191C     		mov	r1, r3
 4998 01c4 FFF7FEFF 		bl	__aeabi_idiv
 4999 01c8 031C     		mov	r3, r0
 5000 01ca 3B61     		str	r3, [r7, #16]
 5001 01cc 0CE0     		b	.L378
 5002              	.L377:
1246:../Sources/TFC/TFC_CrystalClock.c ****   }
1247:../Sources/TFC/TFC_CrystalClock.c ****   else
1248:../Sources/TFC/TFC_CrystalClock.c ****   {
1249:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (1 << frdiv_val));
 5003              		.loc 1 1249 0
 5004 01ce 3B1C     		mov	r3, r7
 5005 01d0 1633     		add	r3, r3, #22
 5006 01d2 1B78     		ldrb	r3, [r3]
 5007 01d4 0122     		mov	r2, #1
 5008 01d6 111C     		mov	r1, r2
 5009 01d8 9940     		lsl	r1, r1, r3
 5010 01da 0B1C     		mov	r3, r1
 5011 01dc 7868     		ldr	r0, [r7, #4]
 5012 01de 191C     		mov	r1, r3
 5013 01e0 FFF7FEFF 		bl	__aeabi_idiv
 5014 01e4 031C     		mov	r3, r0
 5015 01e6 3B61     		str	r3, [r7, #16]
 5016              	.L378:
1250:../Sources/TFC/TFC_CrystalClock.c ****   }
1251:../Sources/TFC/TFC_CrystalClock.c ****   
1252:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
1253:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(fll_ref_freq); // FLL reference frequency calculated from ext ref freq and FRD
 5017              		.loc 1 1253 0
 5018 01e8 3B69     		ldr	r3, [r7, #16]
 5019 01ea 181C     		mov	r0, r3
 5020 01ec FFF7FEFF 		bl	fll_freq
 5021 01f0 031C     		mov	r3, r0
 5022 01f2 FB60     		str	r3, [r7, #12]
1254:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 5023              		.loc 1 1254 0
 5024 01f4 FB68     		ldr	r3, [r7, #12]
 5025 01f6 3B2B     		cmp	r3, #59
 5026 01f8 01DC     		bgt	.L379
 5027              		.loc 1 1254 0 is_stmt 0
 5028 01fa FB68     		ldr	r3, [r7, #12]
 5029 01fc BBE0     		b	.L362
 5030              	.L379:
1255:../Sources/TFC/TFC_CrystalClock.c ****   
1256:../Sources/TFC/TFC_CrystalClock.c **** // Select external oscilator and Reference Divider and clear IREFS to start ext osc
1257:../Sources/TFC/TFC_CrystalClock.c **** // If IRCLK is required it must be enabled outside of this driver, existing state will be maintaine
1258:../Sources/TFC/TFC_CrystalClock.c **** // CLKS=0, FRDIV=frdiv_val, IREFS=0, IRCLKEN=?, IREFSTEN=?
1259:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 5031              		.loc 1 1259 0 is_stmt 1
 5032 01fe 4B4A     		ldr	r2, .L398
 5033 0200 3B1C     		mov	r3, r7
 5034 0202 1733     		add	r3, r3, #23
 5035 0204 1278     		ldrb	r2, [r2]
 5036 0206 1A70     		strb	r2, [r3]
1260:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear CLKS, FRDIV and
 5037              		.loc 1 1260 0
 5038 0208 3B1C     		mov	r3, r7
 5039 020a 1733     		add	r3, r3, #23
 5040 020c 3A1C     		mov	r2, r7
 5041 020e 1732     		add	r2, r2, #23
 5042 0210 1178     		ldrb	r1, [r2]
 5043 0212 0322     		mov	r2, #3
 5044 0214 0A40     		and	r2, r1
 5045 0216 1A70     		strb	r2, [r3]
1261:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(0) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 5046              		.loc 1 1261 0
 5047 0218 3B1C     		mov	r3, r7
 5048 021a 1633     		add	r3, r3, #22
 5049 021c 1B78     		ldrb	r3, [r3]
 5050 021e DB00     		lsl	r3, r3, #3
 5051 0220 DAB2     		uxtb	r2, r3
 5052 0222 3823     		mov	r3, #56
 5053 0224 1340     		and	r3, r2
 5054 0226 D9B2     		uxtb	r1, r3
 5055 0228 3B1C     		mov	r3, r7
 5056 022a 1733     		add	r3, r3, #23
 5057 022c 3A1C     		mov	r2, r7
 5058 022e 1732     		add	r2, r2, #23
 5059 0230 1278     		ldrb	r2, [r2]
 5060 0232 0A43     		orr	r2, r1
 5061 0234 1A70     		strb	r2, [r3]
1262:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 5062              		.loc 1 1262 0
 5063 0236 3D4B     		ldr	r3, .L398
 5064 0238 3A1C     		mov	r2, r7
 5065 023a 1732     		add	r2, r2, #23
 5066 023c 1278     		ldrb	r2, [r2]
 5067 023e 1A70     		strb	r2, [r3]
1263:../Sources/TFC/TFC_CrystalClock.c **** 
1264:../Sources/TFC/TFC_CrystalClock.c **** // if the external oscillator is used need to wait for OSCINIT to set
1265:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 5068              		.loc 1 1265 0
 5069 0240 BB1C     		add	r3, r7, #2
 5070 0242 1B78     		ldrb	r3, [r3]
 5071 0244 002B     		cmp	r3, #0
 5072 0246 24D0     		beq	.L380
1266:../Sources/TFC/TFC_CrystalClock.c ****   {
1267:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 5073              		.loc 1 1267 0
 5074 0248 3B1C     		mov	r3, r7
 5075 024a 1433     		add	r3, r3, #20
 5076 024c 0022     		mov	r2, #0
 5077 024e 1A80     		strh	r2, [r3]
 5078 0250 0DE0     		b	.L381
 5079              	.L384:
1268:../Sources/TFC/TFC_CrystalClock.c ****     {
1269:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 5080              		.loc 1 1269 0
 5081 0252 364B     		ldr	r3, .L398
 5082 0254 9B79     		ldrb	r3, [r3, #6]
 5083 0256 DBB2     		uxtb	r3, r3
 5084 0258 1A1C     		mov	r2, r3
 5085 025a 0223     		mov	r3, #2
 5086 025c 1340     		and	r3, r2
 5087 025e 0ED1     		bne	.L395
 5088              	.L382:
1267:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 5089              		.loc 1 1267 0
 5090 0260 3B1C     		mov	r3, r7
 5091 0262 1433     		add	r3, r3, #20
 5092 0264 3A1C     		mov	r2, r7
 5093 0266 1432     		add	r2, r2, #20
 5094 0268 1288     		ldrh	r2, [r2]
 5095 026a 0132     		add	r2, r2, #1
 5096 026c 1A80     		strh	r2, [r3]
 5097              	.L381:
1267:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 5098              		.loc 1 1267 0 is_stmt 0
 5099 026e 3B1C     		mov	r3, r7
 5100 0270 1433     		add	r3, r3, #20
 5101 0272 0021     		mov	r1, #0
 5102 0274 5A5E     		ldrsh	r2, [r3, r1]
 5103 0276 394B     		ldr	r3, .L398+48
 5104 0278 9A42     		cmp	r2, r3
 5105 027a EADD     		ble	.L384
 5106 027c 00E0     		b	.L383
 5107              	.L395:
 5108              		.loc 1 1269 0 is_stmt 1
 5109 027e C046     		mov	r8, r8
 5110              	.L383:
1270:../Sources/TFC/TFC_CrystalClock.c ****     }
1271:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with err
 5111              		.loc 1 1271 0
 5112 0280 2A4B     		ldr	r3, .L398
 5113 0282 9B79     		ldrb	r3, [r3, #6]
 5114 0284 DBB2     		uxtb	r3, r3
 5115 0286 1A1C     		mov	r2, r3
 5116 0288 0223     		mov	r3, #2
 5117 028a 1340     		and	r3, r2
 5118 028c 01D1     		bne	.L380
 5119              		.loc 1 1271 0 is_stmt 0
 5120 028e 2323     		mov	r3, #35
 5121 0290 71E0     		b	.L362
 5122              	.L380:
1272:../Sources/TFC/TFC_CrystalClock.c ****   }
1273:../Sources/TFC/TFC_CrystalClock.c **** 
1274:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
1275:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5123              		.loc 1 1275 0 is_stmt 1
 5124 0292 3B1C     		mov	r3, r7
 5125 0294 1433     		add	r3, r3, #20
 5126 0296 0022     		mov	r2, #0
 5127 0298 1A80     		strh	r2, [r3]
 5128 029a 0DE0     		b	.L385
 5129              	.L388:
1276:../Sources/TFC/TFC_CrystalClock.c ****   {
1277:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 5130              		.loc 1 1277 0
 5131 029c 234B     		ldr	r3, .L398
 5132 029e 9B79     		ldrb	r3, [r3, #6]
 5133 02a0 DBB2     		uxtb	r3, r3
 5134 02a2 1A1C     		mov	r2, r3
 5135 02a4 1023     		mov	r3, #16
 5136 02a6 1340     		and	r3, r2
 5137 02a8 0ED0     		beq	.L396
 5138              	.L386:
1275:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5139              		.loc 1 1275 0
 5140 02aa 3B1C     		mov	r3, r7
 5141 02ac 1433     		add	r3, r3, #20
 5142 02ae 3A1C     		mov	r2, r7
 5143 02b0 1432     		add	r2, r2, #20
 5144 02b2 1288     		ldrh	r2, [r2]
 5145 02b4 0132     		add	r2, r2, #1
 5146 02b6 1A80     		strh	r2, [r3]
 5147              	.L385:
1275:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5148              		.loc 1 1275 0 is_stmt 0
 5149 02b8 3B1C     		mov	r3, r7
 5150 02ba 1433     		add	r3, r3, #20
 5151 02bc 0021     		mov	r1, #0
 5152 02be 5A5E     		ldrsh	r2, [r3, r1]
 5153 02c0 274B     		ldr	r3, .L398+52
 5154 02c2 9A42     		cmp	r2, r3
 5155 02c4 EADD     		ble	.L388
 5156 02c6 00E0     		b	.L387
 5157              	.L396:
 5158              		.loc 1 1277 0 is_stmt 1
 5159 02c8 C046     		mov	r8, r8
 5160              	.L387:
1278:../Sources/TFC/TFC_CrystalClock.c ****   }
1279:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 5161              		.loc 1 1279 0
 5162 02ca 184B     		ldr	r3, .L398
 5163 02cc 9B79     		ldrb	r3, [r3, #6]
 5164 02ce DBB2     		uxtb	r3, r3
 5165 02d0 1A1C     		mov	r2, r3
 5166 02d2 1023     		mov	r3, #16
 5167 02d4 1340     		and	r3, r2
 5168 02d6 01D0     		beq	.L389
 5169              		.loc 1 1279 0 is_stmt 0
 5170 02d8 1123     		mov	r3, #17
 5171 02da 4CE0     		b	.L362
 5172              	.L389:
1280:../Sources/TFC/TFC_CrystalClock.c ****   
1281:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
1282:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5173              		.loc 1 1282 0 is_stmt 1
 5174 02dc 3B1C     		mov	r3, r7
 5175 02de 1433     		add	r3, r3, #20
 5176 02e0 0022     		mov	r2, #0
 5177 02e2 1A80     		strh	r2, [r3]
 5178 02e4 0EE0     		b	.L390
 5179              	.L393:
1283:../Sources/TFC/TFC_CrystalClock.c ****   {
1284:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST
 5180              		.loc 1 1284 0
 5181 02e6 114B     		ldr	r3, .L398
 5182 02e8 9B79     		ldrb	r3, [r3, #6]
 5183 02ea DBB2     		uxtb	r3, r3
 5184 02ec 1A1C     		mov	r2, r3
 5185 02ee 0C23     		mov	r3, #12
 5186 02f0 1340     		and	r3, r2
 5187 02f2 9B08     		lsr	r3, r3, #2
 5188 02f4 0ED0     		beq	.L397
 5189              	.L391:
1282:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5190              		.loc 1 1282 0
 5191 02f6 3B1C     		mov	r3, r7
 5192 02f8 1433     		add	r3, r3, #20
 5193 02fa 3A1C     		mov	r2, r7
 5194 02fc 1432     		add	r2, r2, #20
 5195 02fe 1288     		ldrh	r2, [r2]
 5196 0300 0132     		add	r2, r2, #1
 5197 0302 1A80     		strh	r2, [r3]
 5198              	.L390:
1282:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5199              		.loc 1 1282 0 is_stmt 0
 5200 0304 3B1C     		mov	r3, r7
 5201 0306 1433     		add	r3, r3, #20
 5202 0308 0021     		mov	r1, #0
 5203 030a 5A5E     		ldrsh	r2, [r3, r1]
 5204 030c 144B     		ldr	r3, .L398+52
 5205 030e 9A42     		cmp	r2, r3
 5206 0310 E9DD     		ble	.L393
 5207 0312 00E0     		b	.L392
 5208              	.L397:
 5209              		.loc 1 1284 0 is_stmt 1
 5210 0314 C046     		mov	r8, r8
 5211              	.L392:
1285:../Sources/TFC/TFC_CrystalClock.c ****   }
1286:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check FLLK is reall
 5212              		.loc 1 1286 0
 5213 0316 054B     		ldr	r3, .L398
 5214 0318 9B79     		ldrb	r3, [r3, #6]
 5215 031a DBB2     		uxtb	r3, r3
 5216 031c 1A1C     		mov	r2, r3
 5217 031e 0C23     		mov	r3, #12
 5218 0320 1340     		and	r3, r2
 5219 0322 9B08     		lsr	r3, r3, #2
 5220 0324 1ED0     		beq	.L394
 5221              		.loc 1 1286 0 is_stmt 0
 5222 0326 1823     		mov	r3, #24
 5223 0328 25E0     		b	.L362
 5224              	.L399:
 5225 032a C046     		.align	2
 5226              	.L398:
 5227 032c 00400640 		.word	1074151424
 5228 0330 80F0FA02 		.word	50000000
 5229 0334 2F750000 		.word	29999
 5230 0338 409C0000 		.word	40000
 5231 033c BFC62D00 		.word	2999999
 5232 0340 0048E801 		.word	32000000
 5233 0344 00127A00 		.word	8000000
 5234 0348 D0121300 		.word	1250000
 5235 034c A0252600 		.word	2500000
 5236 0350 404B4C00 		.word	5000000
 5237 0354 80969800 		.word	10000000
 5238 0358 002D3101 		.word	20000000
 5239 035c 0F270000 		.word	9999
 5240 0360 CF070000 		.word	1999
 5241              	.L394:
1287:../Sources/TFC/TFC_CrystalClock.c ****  
1288:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEE  
1289:../Sources/TFC/TFC_CrystalClock.c **** // It is recommended that the clock monitor is enabled when using an external clock as the clock so
1290:../Sources/TFC/TFC_CrystalClock.c **** // It is enabled here but can be removed if this is not required.
1291:../Sources/TFC/TFC_CrystalClock.c **** // The clock monitor MUST be disabled when returning to a non-external clock mode (FEI, FBI and BLP
1292:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 5242              		.loc 1 1292 0 is_stmt 1
 5243 0364 064B     		ldr	r3, .L400
 5244 0366 064A     		ldr	r2, .L400
 5245 0368 5279     		ldrb	r2, [r2, #5]
 5246 036a D2B2     		uxtb	r2, r2
 5247 036c 2021     		mov	r1, #32
 5248 036e 0A43     		orr	r2, r1
 5249 0370 D2B2     		uxtb	r2, r2
 5250 0372 5A71     		strb	r2, [r3, #5]
1293:../Sources/TFC/TFC_CrystalClock.c ****   
1294:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out; // MCGOUT frequency equals FLL frequency
 5251              		.loc 1 1294 0
 5252 0374 FB68     		ldr	r3, [r7, #12]
 5253              	.L362:
1295:../Sources/TFC/TFC_CrystalClock.c **** } //fbi_fee
 5254              		.loc 1 1295 0
 5255 0376 181C     		mov	r0, r3
 5256 0378 BD46     		mov	sp, r7
 5257 037a 06B0     		add	sp, sp, #24
 5258              		@ sp needed for prologue
 5259 037c 80BD     		pop	{r7, pc}
 5260              	.L401:
 5261 037e C046     		.align	2
 5262              	.L400:
 5263 0380 00400640 		.word	1074151424
 5264              		.cfi_endproc
 5265              	.LFE18:
 5267              		.section	.text.fee_fbi,"ax",%progbits
 5268              		.align	2
 5269              		.global	fee_fbi
 5270              		.code	16
 5271              		.thumb_func
 5273              	fee_fbi:
 5274              	.LFB19:
1296:../Sources/TFC/TFC_CrystalClock.c **** 
1297:../Sources/TFC/TFC_CrystalClock.c **** 
1298:../Sources/TFC/TFC_CrystalClock.c **** int fee_fbi(int irc_freq, unsigned char irc_select)
1299:../Sources/TFC/TFC_CrystalClock.c **** { 
 5275              		.loc 1 1299 0
 5276              		.cfi_startproc
 5277 0000 80B5     		push	{r7, lr}
 5278              	.LCFI57:
 5279              		.cfi_def_cfa_offset 8
 5280              		.cfi_offset 7, -8
 5281              		.cfi_offset 14, -4
 5282 0002 84B0     		sub	sp, sp, #16
 5283              	.LCFI58:
 5284              		.cfi_def_cfa_offset 24
 5285 0004 00AF     		add	r7, sp, #0
 5286              	.LCFI59:
 5287              		.cfi_def_cfa_register 7
 5288 0006 7860     		str	r0, [r7, #4]
 5289 0008 0A1C     		mov	r2, r1
 5290 000a FB1C     		add	r3, r7, #3
 5291 000c 1A70     		strb	r2, [r3]
1300:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
1301:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1302:../Sources/TFC/TFC_CrystalClock.c ****   
1303:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FEE mode
1304:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5292              		.loc 1 1304 0
 5293 000e 874B     		ldr	r3, .L437
 5294 0010 9B79     		ldrb	r3, [r3, #6]
 5295 0012 DBB2     		uxtb	r3, r3
 5296 0014 1A1C     		mov	r2, r3
 5297 0016 0C23     		mov	r3, #12
 5298 0018 1340     		and	r3, r2
 5299 001a 9B08     		lsr	r3, r3, #2
 5300 001c 0DD1     		bne	.L403
1305:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                             // check FLL ref is external re
 5301              		.loc 1 1305 0
 5302 001e 834B     		ldr	r3, .L437
 5303 0020 9B79     		ldrb	r3, [r3, #6]
 5304 0022 DBB2     		uxtb	r3, r3
 5305 0024 1A1C     		mov	r2, r3
 5306 0026 1023     		mov	r3, #16
 5307 0028 1340     		and	r3, r2
1304:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5308              		.loc 1 1304 0
 5309 002a 06D1     		bne	.L403
1306:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                               // check PLLS mux has selected 
 5310              		.loc 1 1306 0
 5311 002c 7F4B     		ldr	r3, .L437
 5312 002e 9B79     		ldrb	r3, [r3, #6]
 5313 0030 DBB2     		uxtb	r3, r3
 5314 0032 1A1C     		mov	r2, r3
 5315 0034 2023     		mov	r3, #32
 5316 0036 1340     		and	r3, r2
1304:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5317              		.loc 1 1304 0
 5318 0038 01D0     		beq	.L404
 5319              	.L403:
1307:../Sources/TFC/TFC_CrystalClock.c ****   {
1308:../Sources/TFC/TFC_CrystalClock.c ****     return 0x2;                                                     // return error code
 5320              		.loc 1 1308 0
 5321 003a 0223     		mov	r3, #2
 5322 003c F2E0     		b	.L405
 5323              	.L404:
1309:../Sources/TFC/TFC_CrystalClock.c ****   }
1310:../Sources/TFC/TFC_CrystalClock.c ****   
1311:../Sources/TFC/TFC_CrystalClock.c ****   // Check that the irc frequency matches the selected IRC 
1312:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 5324              		.loc 1 1312 0
 5325 003e FB1C     		add	r3, r7, #3
 5326 0040 1B78     		ldrb	r3, [r3]
 5327 0042 002B     		cmp	r3, #0
 5328 0044 09D1     		bne	.L406
1313:../Sources/TFC/TFC_CrystalClock.c ****   {    
1314:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 31250) || (irc_freq > 39063)) {return 0x31;}
 5329              		.loc 1 1314 0
 5330 0046 7A68     		ldr	r2, [r7, #4]
 5331 0048 794B     		ldr	r3, .L437+4
 5332 004a 9A42     		cmp	r2, r3
 5333 004c 03DD     		ble	.L407
 5334              		.loc 1 1314 0 is_stmt 0
 5335 004e 7A68     		ldr	r2, [r7, #4]
 5336 0050 784B     		ldr	r3, .L437+8
 5337 0052 9A42     		cmp	r2, r3
 5338 0054 0BDD     		ble	.L408
 5339              	.L407:
 5340              		.loc 1 1314 0
 5341 0056 3123     		mov	r3, #49
 5342 0058 E4E0     		b	.L405
 5343              	.L406:
1315:../Sources/TFC/TFC_CrystalClock.c ****   }
1316:../Sources/TFC/TFC_CrystalClock.c ****   else
1317:../Sources/TFC/TFC_CrystalClock.c ****   {
1318:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 3000000) || (irc_freq > 5000000)) {return 0x32;} // Fast IRC freq
 5344              		.loc 1 1318 0 is_stmt 1
 5345 005a 7A68     		ldr	r2, [r7, #4]
 5346 005c 764B     		ldr	r3, .L437+12
 5347 005e 9A42     		cmp	r2, r3
 5348 0060 03DD     		ble	.L409
 5349              		.loc 1 1318 0 is_stmt 0
 5350 0062 7A68     		ldr	r2, [r7, #4]
 5351 0064 754B     		ldr	r3, .L437+16
 5352 0066 9A42     		cmp	r2, r3
 5353 0068 01DD     		ble	.L408
 5354              	.L409:
 5355              		.loc 1 1318 0
 5356 006a 3223     		mov	r3, #50
 5357 006c DAE0     		b	.L405
 5358              	.L408:
1319:../Sources/TFC/TFC_CrystalClock.c ****   }
1320:../Sources/TFC/TFC_CrystalClock.c ****   
1321:../Sources/TFC/TFC_CrystalClock.c **** // Select the required IRC
1322:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 5359              		.loc 1 1322 0 is_stmt 1
 5360 006e FB1C     		add	r3, r7, #3
 5361 0070 1B78     		ldrb	r3, [r3]
 5362 0072 002B     		cmp	r3, #0
 5363 0074 08D0     		beq	.L410
1323:../Sources/TFC/TFC_CrystalClock.c ****   {
1324:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 |= MCG_C2_IRCS_MASK; // select fast IRC by setting IRCS
 5364              		.loc 1 1324 0
 5365 0076 6D4B     		ldr	r3, .L437
 5366 0078 6C4A     		ldr	r2, .L437
 5367 007a 5278     		ldrb	r2, [r2, #1]
 5368 007c D2B2     		uxtb	r2, r2
 5369 007e 0121     		mov	r1, #1
 5370 0080 0A43     		orr	r2, r1
 5371 0082 D2B2     		uxtb	r2, r2
 5372 0084 5A70     		strb	r2, [r3, #1]
 5373 0086 07E0     		b	.L411
 5374              	.L410:
1325:../Sources/TFC/TFC_CrystalClock.c ****   }
1326:../Sources/TFC/TFC_CrystalClock.c ****   else
1327:../Sources/TFC/TFC_CrystalClock.c ****   {
1328:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 &= ~MCG_C2_IRCS_MASK; // select slow IRC by clearing IRCS
 5375              		.loc 1 1328 0
 5376 0088 684B     		ldr	r3, .L437
 5377 008a 684A     		ldr	r2, .L437
 5378 008c 5278     		ldrb	r2, [r2, #1]
 5379 008e D2B2     		uxtb	r2, r2
 5380 0090 0121     		mov	r1, #1
 5381 0092 8A43     		bic	r2, r1
 5382 0094 D2B2     		uxtb	r2, r2
 5383 0096 5A70     		strb	r2, [r3, #1]
 5384              	.L411:
1329:../Sources/TFC/TFC_CrystalClock.c ****   }
1330:../Sources/TFC/TFC_CrystalClock.c ****   
1331:../Sources/TFC/TFC_CrystalClock.c **** // Make sure the clock monitor is disabled before switching modes otherwise it will trigger
1332:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_CME0_MASK;
 5385              		.loc 1 1332 0
 5386 0098 644B     		ldr	r3, .L437
 5387 009a 644A     		ldr	r2, .L437
 5388 009c 5279     		ldrb	r2, [r2, #5]
 5389 009e D2B2     		uxtb	r2, r2
 5390 00a0 2021     		mov	r1, #32
 5391 00a2 8A43     		bic	r2, r1
 5392 00a4 D2B2     		uxtb	r2, r2
 5393 00a6 5A71     		strb	r2, [r3, #5]
1333:../Sources/TFC/TFC_CrystalClock.c ****   
1334:../Sources/TFC/TFC_CrystalClock.c **** // Select the IRC as the CLKS mux selection
1335:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 |= MCG_C1_CLKS(1) | MCG_C1_IREFS_MASK; // set IREFS and select IRC as MCGOUT
 5394              		.loc 1 1335 0
 5395 00a8 604B     		ldr	r3, .L437
 5396 00aa 604A     		ldr	r2, .L437
 5397 00ac 1278     		ldrb	r2, [r2]
 5398 00ae D2B2     		uxtb	r2, r2
 5399 00b0 4421     		mov	r1, #68
 5400 00b2 0A43     		orr	r2, r1
 5401 00b4 D2B2     		uxtb	r2, r2
 5402 00b6 1A70     		strb	r2, [r3]
1336:../Sources/TFC/TFC_CrystalClock.c ****  
1337:../Sources/TFC/TFC_CrystalClock.c **** // wait until internal reference switches to requested irc.
1338:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 5403              		.loc 1 1338 0
 5404 00b8 FB1C     		add	r3, r7, #3
 5405 00ba 1B78     		ldrb	r3, [r3]
 5406 00bc 002B     		cmp	r3, #0
 5407 00be 24D1     		bne	.L412
1339:../Sources/TFC/TFC_CrystalClock.c ****   {
1340:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5408              		.loc 1 1340 0
 5409 00c0 3B1C     		mov	r3, r7
 5410 00c2 0E33     		add	r3, r3, #14
 5411 00c4 0022     		mov	r2, #0
 5412 00c6 1A80     		strh	r2, [r3]
 5413 00c8 0DE0     		b	.L413
 5414              	.L416:
1341:../Sources/TFC/TFC_CrystalClock.c ****     {
1342:../Sources/TFC/TFC_CrystalClock.c ****       if (!(MCG_S & MCG_S_IRCST_MASK)) break; // jump out early if IRCST clears before loop finishe
 5415              		.loc 1 1342 0
 5416 00ca 584B     		ldr	r3, .L437
 5417 00cc 9B79     		ldrb	r3, [r3, #6]
 5418 00ce DBB2     		uxtb	r3, r3
 5419 00d0 1A1C     		mov	r2, r3
 5420 00d2 0123     		mov	r3, #1
 5421 00d4 1340     		and	r3, r2
 5422 00d6 0ED0     		beq	.L433
 5423              	.L414:
1340:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5424              		.loc 1 1340 0
 5425 00d8 3B1C     		mov	r3, r7
 5426 00da 0E33     		add	r3, r3, #14
 5427 00dc 3A1C     		mov	r2, r7
 5428 00de 0E32     		add	r2, r2, #14
 5429 00e0 1288     		ldrh	r2, [r2]
 5430 00e2 0132     		add	r2, r2, #1
 5431 00e4 1A80     		strh	r2, [r3]
 5432              	.L413:
1340:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5433              		.loc 1 1340 0 is_stmt 0
 5434 00e6 3B1C     		mov	r3, r7
 5435 00e8 0E33     		add	r3, r3, #14
 5436 00ea 0021     		mov	r1, #0
 5437 00ec 5A5E     		ldrsh	r2, [r3, r1]
 5438 00ee 544B     		ldr	r3, .L437+20
 5439 00f0 9A42     		cmp	r2, r3
 5440 00f2 EADD     		ble	.L416
 5441 00f4 00E0     		b	.L415
 5442              	.L433:
 5443              		.loc 1 1342 0 is_stmt 1
 5444 00f6 C046     		mov	r8, r8
 5445              	.L415:
1343:../Sources/TFC/TFC_CrystalClock.c ****     }
1344:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IRCST_MASK) return 0x13; // check bit is really clear and return with error i
 5446              		.loc 1 1344 0
 5447 00f8 4C4B     		ldr	r3, .L437
 5448 00fa 9B79     		ldrb	r3, [r3, #6]
 5449 00fc DBB2     		uxtb	r3, r3
 5450 00fe 1A1C     		mov	r2, r3
 5451 0100 0123     		mov	r3, #1
 5452 0102 1340     		and	r3, r2
 5453 0104 26D0     		beq	.L417
 5454              		.loc 1 1344 0 is_stmt 0
 5455 0106 1323     		mov	r3, #19
 5456 0108 8CE0     		b	.L405
 5457              	.L412:
1345:../Sources/TFC/TFC_CrystalClock.c ****   }
1346:../Sources/TFC/TFC_CrystalClock.c ****   else
1347:../Sources/TFC/TFC_CrystalClock.c ****   {
1348:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5458              		.loc 1 1348 0 is_stmt 1
 5459 010a 3B1C     		mov	r3, r7
 5460 010c 0E33     		add	r3, r3, #14
 5461 010e 0022     		mov	r2, #0
 5462 0110 1A80     		strh	r2, [r3]
 5463 0112 0DE0     		b	.L418
 5464              	.L421:
1349:../Sources/TFC/TFC_CrystalClock.c ****     {
1350:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_IRCST_MASK) break; // jump out early if IRCST sets before loop finishes
 5465              		.loc 1 1350 0
 5466 0114 454B     		ldr	r3, .L437
 5467 0116 9B79     		ldrb	r3, [r3, #6]
 5468 0118 DBB2     		uxtb	r3, r3
 5469 011a 1A1C     		mov	r2, r3
 5470 011c 0123     		mov	r3, #1
 5471 011e 1340     		and	r3, r2
 5472 0120 0ED1     		bne	.L434
 5473              	.L419:
1348:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5474              		.loc 1 1348 0
 5475 0122 3B1C     		mov	r3, r7
 5476 0124 0E33     		add	r3, r3, #14
 5477 0126 3A1C     		mov	r2, r7
 5478 0128 0E32     		add	r2, r2, #14
 5479 012a 1288     		ldrh	r2, [r2]
 5480 012c 0132     		add	r2, r2, #1
 5481 012e 1A80     		strh	r2, [r3]
 5482              	.L418:
1348:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5483              		.loc 1 1348 0 is_stmt 0
 5484 0130 3B1C     		mov	r3, r7
 5485 0132 0E33     		add	r3, r3, #14
 5486 0134 0021     		mov	r1, #0
 5487 0136 5A5E     		ldrsh	r2, [r3, r1]
 5488 0138 414B     		ldr	r3, .L437+20
 5489 013a 9A42     		cmp	r2, r3
 5490 013c EADD     		ble	.L421
 5491 013e 00E0     		b	.L420
 5492              	.L434:
 5493              		.loc 1 1350 0 is_stmt 1
 5494 0140 C046     		mov	r8, r8
 5495              	.L420:
1351:../Sources/TFC/TFC_CrystalClock.c ****     }
1352:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IRCST_MASK)) return 0x14; // check bit is really set and return with error 
 5496              		.loc 1 1352 0
 5497 0142 3A4B     		ldr	r3, .L437
 5498 0144 9B79     		ldrb	r3, [r3, #6]
 5499 0146 DBB2     		uxtb	r3, r3
 5500 0148 1A1C     		mov	r2, r3
 5501 014a 0123     		mov	r3, #1
 5502 014c 1340     		and	r3, r2
 5503 014e 01D1     		bne	.L417
 5504              		.loc 1 1352 0 is_stmt 0
 5505 0150 1423     		mov	r3, #20
 5506 0152 67E0     		b	.L405
 5507              	.L417:
1353:../Sources/TFC/TFC_CrystalClock.c ****   }
1354:../Sources/TFC/TFC_CrystalClock.c ****   
1355:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to update
1356:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5508              		.loc 1 1356 0 is_stmt 1
 5509 0154 3B1C     		mov	r3, r7
 5510 0156 0E33     		add	r3, r3, #14
 5511 0158 0022     		mov	r2, #0
 5512 015a 1A80     		strh	r2, [r3]
 5513 015c 0FE0     		b	.L422
 5514              	.L425:
1357:../Sources/TFC/TFC_CrystalClock.c ****   {
1358:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) break; // jump out early if CLKST
 5515              		.loc 1 1358 0
 5516 015e 334B     		ldr	r3, .L437
 5517 0160 9B79     		ldrb	r3, [r3, #6]
 5518 0162 DBB2     		uxtb	r3, r3
 5519 0164 1A1C     		mov	r2, r3
 5520 0166 0C23     		mov	r3, #12
 5521 0168 1340     		and	r3, r2
 5522 016a 9B08     		lsr	r3, r3, #2
 5523 016c 012B     		cmp	r3, #1
 5524 016e 0ED0     		beq	.L435
 5525              	.L423:
1356:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5526              		.loc 1 1356 0
 5527 0170 3B1C     		mov	r3, r7
 5528 0172 0E33     		add	r3, r3, #14
 5529 0174 3A1C     		mov	r2, r7
 5530 0176 0E32     		add	r2, r2, #14
 5531 0178 1288     		ldrh	r2, [r2]
 5532 017a 0132     		add	r2, r2, #1
 5533 017c 1A80     		strh	r2, [r3]
 5534              	.L422:
1356:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5535              		.loc 1 1356 0 is_stmt 0
 5536 017e 3B1C     		mov	r3, r7
 5537 0180 0E33     		add	r3, r3, #14
 5538 0182 0021     		mov	r1, #0
 5539 0184 5A5E     		ldrsh	r2, [r3, r1]
 5540 0186 2E4B     		ldr	r3, .L437+20
 5541 0188 9A42     		cmp	r2, r3
 5542 018a E8DD     		ble	.L425
 5543 018c 00E0     		b	.L424
 5544              	.L435:
 5545              		.loc 1 1358 0 is_stmt 1
 5546 018e C046     		mov	r8, r8
 5547              	.L424:
1359:../Sources/TFC/TFC_CrystalClock.c ****   }
1360:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) return 0x19; // check IRC is really
 5548              		.loc 1 1360 0
 5549 0190 264B     		ldr	r3, .L437
 5550 0192 9B79     		ldrb	r3, [r3, #6]
 5551 0194 DBB2     		uxtb	r3, r3
 5552 0196 1A1C     		mov	r2, r3
 5553 0198 0C23     		mov	r3, #12
 5554 019a 1340     		and	r3, r2
 5555 019c 9B08     		lsr	r3, r3, #2
 5556 019e 012B     		cmp	r3, #1
 5557 01a0 01D0     		beq	.L426
 5558              		.loc 1 1360 0 is_stmt 0
 5559 01a2 1923     		mov	r3, #25
 5560 01a4 3EE0     		b	.L405
 5561              	.L426:
1361:../Sources/TFC/TFC_CrystalClock.c ****   
1362:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to set
1363:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5562              		.loc 1 1363 0 is_stmt 1
 5563 01a6 3B1C     		mov	r3, r7
 5564 01a8 0E33     		add	r3, r3, #14
 5565 01aa 0022     		mov	r2, #0
 5566 01ac 1A80     		strh	r2, [r3]
 5567 01ae 0DE0     		b	.L427
 5568              	.L430:
1364:../Sources/TFC/TFC_CrystalClock.c ****   {
1365:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
 5569              		.loc 1 1365 0
 5570 01b0 1E4B     		ldr	r3, .L437
 5571 01b2 9B79     		ldrb	r3, [r3, #6]
 5572 01b4 DBB2     		uxtb	r3, r3
 5573 01b6 1A1C     		mov	r2, r3
 5574 01b8 1023     		mov	r3, #16
 5575 01ba 1340     		and	r3, r2
 5576 01bc 0ED1     		bne	.L436
 5577              	.L428:
1363:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5578              		.loc 1 1363 0
 5579 01be 3B1C     		mov	r3, r7
 5580 01c0 0E33     		add	r3, r3, #14
 5581 01c2 3A1C     		mov	r2, r7
 5582 01c4 0E32     		add	r2, r2, #14
 5583 01c6 1288     		ldrh	r2, [r2]
 5584 01c8 0132     		add	r2, r2, #1
 5585 01ca 1A80     		strh	r2, [r3]
 5586              	.L427:
1363:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5587              		.loc 1 1363 0 is_stmt 0
 5588 01cc 3B1C     		mov	r3, r7
 5589 01ce 0E33     		add	r3, r3, #14
 5590 01d0 0021     		mov	r1, #0
 5591 01d2 5A5E     		ldrsh	r2, [r3, r1]
 5592 01d4 1A4B     		ldr	r3, .L437+20
 5593 01d6 9A42     		cmp	r2, r3
 5594 01d8 EADD     		ble	.L430
 5595 01da 00E0     		b	.L429
 5596              	.L436:
 5597              		.loc 1 1365 0 is_stmt 1
 5598 01dc C046     		mov	r8, r8
 5599              	.L429:
1366:../Sources/TFC/TFC_CrystalClock.c ****   }
1367:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 5600              		.loc 1 1367 0
 5601 01de 134B     		ldr	r3, .L437
 5602 01e0 9B79     		ldrb	r3, [r3, #6]
 5603 01e2 DBB2     		uxtb	r3, r3
 5604 01e4 1A1C     		mov	r2, r3
 5605 01e6 1023     		mov	r3, #16
 5606 01e8 1340     		and	r3, r2
 5607 01ea 01D1     		bne	.L431
 5608              		.loc 1 1367 0 is_stmt 0
 5609 01ec 1223     		mov	r3, #18
 5610 01ee 19E0     		b	.L405
 5611              	.L431:
1368:../Sources/TFC/TFC_CrystalClock.c ****   
1369:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBI mode
1370:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 5612              		.loc 1 1370 0 is_stmt 1
 5613 01f0 FB1C     		add	r3, r7, #3
 5614 01f2 1B78     		ldrb	r3, [r3]
 5615 01f4 002B     		cmp	r3, #0
 5616 01f6 14D0     		beq	.L432
1371:../Sources/TFC/TFC_CrystalClock.c ****   {
1372:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 5617              		.loc 1 1372 0
 5618 01f8 0C4B     		ldr	r3, .L437
 5619 01fa 1B7A     		ldrb	r3, [r3, #8]
 5620 01fc DBB2     		uxtb	r3, r3
 5621 01fe 1A1C     		mov	r2, r3
 5622 0200 0E23     		mov	r3, #14
 5623 0202 1340     		and	r3, r2
 5624 0204 5B08     		lsr	r3, r3, #1
 5625 0206 0122     		mov	r2, #1
 5626 0208 9A40     		lsl	r2, r2, r3
 5627 020a 3B1C     		mov	r3, r7
 5628 020c 0D33     		add	r3, r3, #13
 5629 020e 1A70     		strb	r2, [r3]
1373:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
 5630              		.loc 1 1373 0
 5631 0210 3B1C     		mov	r3, r7
 5632 0212 0D33     		add	r3, r3, #13
 5633 0214 1B78     		ldrb	r3, [r3]
 5634 0216 7868     		ldr	r0, [r7, #4]
 5635 0218 191C     		mov	r1, r3
 5636 021a FFF7FEFF 		bl	__aeabi_idiv
 5637 021e 031C     		mov	r3, r0
 5638 0220 00E0     		b	.L405
 5639              	.L432:
1374:../Sources/TFC/TFC_CrystalClock.c ****   }
1375:../Sources/TFC/TFC_CrystalClock.c ****   else
1376:../Sources/TFC/TFC_CrystalClock.c ****   {
1377:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 5640              		.loc 1 1377 0
 5641 0222 7B68     		ldr	r3, [r7, #4]
 5642              	.L405:
1378:../Sources/TFC/TFC_CrystalClock.c ****   }
1379:../Sources/TFC/TFC_CrystalClock.c **** } // fee_fbi 
 5643              		.loc 1 1379 0
 5644 0224 181C     		mov	r0, r3
 5645 0226 BD46     		mov	sp, r7
 5646 0228 04B0     		add	sp, sp, #16
 5647              		@ sp needed for prologue
 5648 022a 80BD     		pop	{r7, pc}
 5649              	.L438:
 5650              		.align	2
 5651              	.L437:
 5652 022c 00400640 		.word	1074151424
 5653 0230 117A0000 		.word	31249
 5654 0234 97980000 		.word	39063
 5655 0238 BFC62D00 		.word	2999999
 5656 023c 404B4C00 		.word	5000000
 5657 0240 CF070000 		.word	1999
 5658              		.cfi_endproc
 5659              	.LFE19:
 5661              		.section	.text.fbi_fei,"ax",%progbits
 5662              		.align	2
 5663              		.global	fbi_fei
 5664              		.code	16
 5665              		.thumb_func
 5667              	fbi_fei:
 5668              	.LFB20:
1380:../Sources/TFC/TFC_CrystalClock.c **** 
1381:../Sources/TFC/TFC_CrystalClock.c **** 
1382:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fei(int slow_irc_freq)
1383:../Sources/TFC/TFC_CrystalClock.c **** {
 5669              		.loc 1 1383 0
 5670              		.cfi_startproc
 5671 0000 80B5     		push	{r7, lr}
 5672              	.LCFI60:
 5673              		.cfi_def_cfa_offset 8
 5674              		.cfi_offset 7, -8
 5675              		.cfi_offset 14, -4
 5676 0002 86B0     		sub	sp, sp, #24
 5677              	.LCFI61:
 5678              		.cfi_def_cfa_offset 32
 5679 0004 00AF     		add	r7, sp, #0
 5680              	.LCFI62:
 5681              		.cfi_def_cfa_register 7
 5682 0006 7860     		str	r0, [r7, #4]
1384:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
1385:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1386:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out;
1387:../Sources/TFC/TFC_CrystalClock.c **** 
1388:../Sources/TFC/TFC_CrystalClock.c **** // check if in FBI mode
1389:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 5683              		.loc 1 1389 0
 5684 0008 524B     		ldr	r3, .L458
 5685 000a 9B79     		ldrb	r3, [r3, #6]
 5686 000c DBB2     		uxtb	r3, r3
 5687 000e 1A1C     		mov	r2, r3
 5688 0010 0C23     		mov	r3, #12
 5689 0012 1340     		and	r3, r2
 5690 0014 9B08     		lsr	r3, r3, #2
 5691 0016 012B     		cmp	r3, #1
 5692 0018 14D1     		bne	.L440
1390:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 5693              		.loc 1 1390 0
 5694 001a 4E4B     		ldr	r3, .L458
 5695 001c 9B79     		ldrb	r3, [r3, #6]
 5696 001e DBB2     		uxtb	r3, r3
 5697 0020 1A1C     		mov	r2, r3
 5698 0022 1023     		mov	r3, #16
 5699 0024 1340     		and	r3, r2
1389:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 5700              		.loc 1 1389 0
 5701 0026 0DD0     		beq	.L440
1391:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 5702              		.loc 1 1391 0
 5703 0028 4A4B     		ldr	r3, .L458
 5704 002a 9B79     		ldrb	r3, [r3, #6]
 5705 002c DBB2     		uxtb	r3, r3
 5706 002e 1A1C     		mov	r2, r3
 5707 0030 2023     		mov	r3, #32
 5708 0032 1340     		and	r3, r2
1390:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 5709              		.loc 1 1390 0
 5710 0034 06D1     		bne	.L440
1392:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
 5711              		.loc 1 1392 0
 5712 0036 474B     		ldr	r3, .L458
 5713 0038 5B78     		ldrb	r3, [r3, #1]
 5714 003a DBB2     		uxtb	r3, r3
 5715 003c 1A1C     		mov	r2, r3
 5716 003e 0223     		mov	r3, #2
 5717 0040 1340     		and	r3, r2
1389:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 5718              		.loc 1 1389 0
 5719 0042 01D0     		beq	.L441
 5720              	.L440:
1393:../Sources/TFC/TFC_CrystalClock.c ****   {  
1394:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3;                                                       // MCG not in correct mode re
 5721              		.loc 1 1394 0
 5722 0044 0323     		mov	r3, #3
 5723 0046 81E0     		b	.L442
 5724              	.L441:
1395:../Sources/TFC/TFC_CrystalClock.c ****   }
1396:../Sources/TFC/TFC_CrystalClock.c **** 
1397:../Sources/TFC/TFC_CrystalClock.c **** // Check IRC frequency is within spec.
1398:../Sources/TFC/TFC_CrystalClock.c ****   if ((slow_irc_freq < 31250) || (slow_irc_freq > 39063))
 5725              		.loc 1 1398 0
 5726 0048 7A68     		ldr	r2, [r7, #4]
 5727 004a 434B     		ldr	r3, .L458+4
 5728 004c 9A42     		cmp	r2, r3
 5729 004e 03DD     		ble	.L443
 5730              		.loc 1 1398 0 is_stmt 0
 5731 0050 7A68     		ldr	r2, [r7, #4]
 5732 0052 424B     		ldr	r3, .L458+8
 5733 0054 9A42     		cmp	r2, r3
 5734 0056 01DD     		ble	.L444
 5735              	.L443:
1399:../Sources/TFC/TFC_CrystalClock.c ****   {
1400:../Sources/TFC/TFC_CrystalClock.c ****     return 0x31;
 5736              		.loc 1 1400 0 is_stmt 1
 5737 0058 3123     		mov	r3, #49
 5738 005a 77E0     		b	.L442
 5739              	.L444:
1401:../Sources/TFC/TFC_CrystalClock.c ****   }
1402:../Sources/TFC/TFC_CrystalClock.c **** 
1403:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
1404:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(slow_irc_freq); 
 5740              		.loc 1 1404 0
 5741 005c 7B68     		ldr	r3, [r7, #4]
 5742 005e 181C     		mov	r0, r3
 5743 0060 FFF7FEFF 		bl	fll_freq
 5744 0064 031C     		mov	r3, r0
 5745 0066 3B61     		str	r3, [r7, #16]
1405:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 5746              		.loc 1 1405 0
 5747 0068 3B69     		ldr	r3, [r7, #16]
 5748 006a 3B2B     		cmp	r3, #59
 5749 006c 01DC     		bgt	.L445
 5750              		.loc 1 1405 0 is_stmt 0
 5751 006e 3B69     		ldr	r3, [r7, #16]
 5752 0070 6CE0     		b	.L442
 5753              	.L445:
1406:../Sources/TFC/TFC_CrystalClock.c ****   
1407:../Sources/TFC/TFC_CrystalClock.c **** // Change the CLKS mux to select the FLL output as MCGOUT  
1408:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 5754              		.loc 1 1408 0 is_stmt 1
 5755 0072 384A     		ldr	r2, .L458
 5756 0074 3B1C     		mov	r3, r7
 5757 0076 0F33     		add	r3, r3, #15
 5758 0078 1278     		ldrb	r2, [r2]
 5759 007a 1A70     		strb	r2, [r3]
1409:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C1_CLKS_MASK; // clear CLKS field
 5760              		.loc 1 1409 0
 5761 007c 3B1C     		mov	r3, r7
 5762 007e 0F33     		add	r3, r3, #15
 5763 0080 3A1C     		mov	r2, r7
 5764 0082 0F32     		add	r2, r2, #15
 5765 0084 1178     		ldrb	r1, [r2]
 5766 0086 3F22     		mov	r2, #63
 5767 0088 0A40     		and	r2, r1
 5768 008a 1A70     		strb	r2, [r3]
1410:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C1_CLKS(0); // select FLL as MCGOUT
 5769              		.loc 1 1410 0
 5770 008c 3B1C     		mov	r3, r7
 5771 008e 0F33     		add	r3, r3, #15
 5772 0090 3A1C     		mov	r2, r7
 5773 0092 0F32     		add	r2, r2, #15
 5774 0094 1278     		ldrb	r2, [r2]
 5775 0096 1A70     		strb	r2, [r3]
1411:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C1_IREFS_MASK; // make sure IRC is FLL reference
 5776              		.loc 1 1411 0
 5777 0098 3B1C     		mov	r3, r7
 5778 009a 0F33     		add	r3, r3, #15
 5779 009c 3A1C     		mov	r2, r7
 5780 009e 0F32     		add	r2, r2, #15
 5781 00a0 1278     		ldrb	r2, [r2]
 5782 00a2 0421     		mov	r1, #4
 5783 00a4 0A43     		orr	r2, r1
 5784 00a6 1A70     		strb	r2, [r3]
1412:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg; // update MCG_C1
 5785              		.loc 1 1412 0
 5786 00a8 2A4B     		ldr	r3, .L458
 5787 00aa 3A1C     		mov	r2, r7
 5788 00ac 0F32     		add	r2, r2, #15
 5789 00ae 1278     		ldrb	r2, [r2]
 5790 00b0 1A70     		strb	r2, [r3]
1413:../Sources/TFC/TFC_CrystalClock.c ****   
1414:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
1415:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5791              		.loc 1 1415 0
 5792 00b2 3B1C     		mov	r3, r7
 5793 00b4 1633     		add	r3, r3, #22
 5794 00b6 0022     		mov	r2, #0
 5795 00b8 1A80     		strh	r2, [r3]
 5796 00ba 0DE0     		b	.L446
 5797              	.L449:
1416:../Sources/TFC/TFC_CrystalClock.c ****   {
1417:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST clears before loop finishes
 5798              		.loc 1 1417 0
 5799 00bc 254B     		ldr	r3, .L458
 5800 00be 9B79     		ldrb	r3, [r3, #6]
 5801 00c0 DBB2     		uxtb	r3, r3
 5802 00c2 1A1C     		mov	r2, r3
 5803 00c4 1023     		mov	r3, #16
 5804 00c6 1340     		and	r3, r2
 5805 00c8 0ED1     		bne	.L456
 5806              	.L447:
1415:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5807              		.loc 1 1415 0
 5808 00ca 3B1C     		mov	r3, r7
 5809 00cc 1633     		add	r3, r3, #22
 5810 00ce 3A1C     		mov	r2, r7
 5811 00d0 1632     		add	r2, r2, #22
 5812 00d2 1288     		ldrh	r2, [r2]
 5813 00d4 0132     		add	r2, r2, #1
 5814 00d6 1A80     		strh	r2, [r3]
 5815              	.L446:
1415:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5816              		.loc 1 1415 0 is_stmt 0
 5817 00d8 3B1C     		mov	r3, r7
 5818 00da 1633     		add	r3, r3, #22
 5819 00dc 0021     		mov	r1, #0
 5820 00de 5A5E     		ldrsh	r2, [r3, r1]
 5821 00e0 1F4B     		ldr	r3, .L458+12
 5822 00e2 9A42     		cmp	r2, r3
 5823 00e4 EADD     		ble	.L449
 5824 00e6 00E0     		b	.L448
 5825              	.L456:
 5826              		.loc 1 1417 0 is_stmt 1
 5827 00e8 C046     		mov	r8, r8
 5828              	.L448:
1418:../Sources/TFC/TFC_CrystalClock.c ****   }
1419:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 5829              		.loc 1 1419 0
 5830 00ea 1A4B     		ldr	r3, .L458
 5831 00ec 9B79     		ldrb	r3, [r3, #6]
 5832 00ee DBB2     		uxtb	r3, r3
 5833 00f0 1A1C     		mov	r2, r3
 5834 00f2 1023     		mov	r3, #16
 5835 00f4 1340     		and	r3, r2
 5836 00f6 01D1     		bne	.L450
 5837              		.loc 1 1419 0 is_stmt 0
 5838 00f8 1223     		mov	r3, #18
 5839 00fa 27E0     		b	.L442
 5840              	.L450:
1420:../Sources/TFC/TFC_CrystalClock.c ****   
1421:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
1422:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5841              		.loc 1 1422 0 is_stmt 1
 5842 00fc 3B1C     		mov	r3, r7
 5843 00fe 1633     		add	r3, r3, #22
 5844 0100 0022     		mov	r2, #0
 5845 0102 1A80     		strh	r2, [r3]
 5846 0104 0EE0     		b	.L451
 5847              	.L454:
1423:../Sources/TFC/TFC_CrystalClock.c ****   {
1424:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST
 5848              		.loc 1 1424 0
 5849 0106 134B     		ldr	r3, .L458
 5850 0108 9B79     		ldrb	r3, [r3, #6]
 5851 010a DBB2     		uxtb	r3, r3
 5852 010c 1A1C     		mov	r2, r3
 5853 010e 0C23     		mov	r3, #12
 5854 0110 1340     		and	r3, r2
 5855 0112 9B08     		lsr	r3, r3, #2
 5856 0114 0ED0     		beq	.L457
 5857              	.L452:
1422:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5858              		.loc 1 1422 0
 5859 0116 3B1C     		mov	r3, r7
 5860 0118 1633     		add	r3, r3, #22
 5861 011a 3A1C     		mov	r2, r7
 5862 011c 1632     		add	r2, r2, #22
 5863 011e 1288     		ldrh	r2, [r2]
 5864 0120 0132     		add	r2, r2, #1
 5865 0122 1A80     		strh	r2, [r3]
 5866              	.L451:
1422:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5867              		.loc 1 1422 0 is_stmt 0
 5868 0124 3B1C     		mov	r3, r7
 5869 0126 1633     		add	r3, r3, #22
 5870 0128 0021     		mov	r1, #0
 5871 012a 5A5E     		ldrsh	r2, [r3, r1]
 5872 012c 0C4B     		ldr	r3, .L458+12
 5873 012e 9A42     		cmp	r2, r3
 5874 0130 E9DD     		ble	.L454
 5875 0132 00E0     		b	.L453
 5876              	.L457:
 5877              		.loc 1 1424 0 is_stmt 1
 5878 0134 C046     		mov	r8, r8
 5879              	.L453:
1425:../Sources/TFC/TFC_CrystalClock.c ****   }
1426:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check FLL is really
 5880              		.loc 1 1426 0
 5881 0136 074B     		ldr	r3, .L458
 5882 0138 9B79     		ldrb	r3, [r3, #6]
 5883 013a DBB2     		uxtb	r3, r3
 5884 013c 1A1C     		mov	r2, r3
 5885 013e 0C23     		mov	r3, #12
 5886 0140 1340     		and	r3, r2
 5887 0142 9B08     		lsr	r3, r3, #2
 5888 0144 01D0     		beq	.L455
 5889              		.loc 1 1426 0 is_stmt 0
 5890 0146 1823     		mov	r3, #24
 5891 0148 00E0     		b	.L442
 5892              	.L455:
1427:../Sources/TFC/TFC_CrystalClock.c **** 
1428:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEI mode
1429:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out;  
 5893              		.loc 1 1429 0 is_stmt 1
 5894 014a 3B69     		ldr	r3, [r7, #16]
 5895              	.L442:
1430:../Sources/TFC/TFC_CrystalClock.c **** } // fbi_fei
 5896              		.loc 1 1430 0
 5897 014c 181C     		mov	r0, r3
 5898 014e BD46     		mov	sp, r7
 5899 0150 06B0     		add	sp, sp, #24
 5900              		@ sp needed for prologue
 5901 0152 80BD     		pop	{r7, pc}
 5902              	.L459:
 5903              		.align	2
 5904              	.L458:
 5905 0154 00400640 		.word	1074151424
 5906 0158 117A0000 		.word	31249
 5907 015c 97980000 		.word	39063
 5908 0160 CF070000 		.word	1999
 5909              		.cfi_endproc
 5910              	.LFE20:
 5912              		.section	.text.fei_fbi,"ax",%progbits
 5913              		.align	2
 5914              		.global	fei_fbi
 5915              		.code	16
 5916              		.thumb_func
 5918              	fei_fbi:
 5919              	.LFB21:
1431:../Sources/TFC/TFC_CrystalClock.c **** 
1432:../Sources/TFC/TFC_CrystalClock.c **** 
1433:../Sources/TFC/TFC_CrystalClock.c **** int fei_fbi(int irc_freq, unsigned char irc_select)
1434:../Sources/TFC/TFC_CrystalClock.c **** {
 5920              		.loc 1 1434 0
 5921              		.cfi_startproc
 5922 0000 80B5     		push	{r7, lr}
 5923              	.LCFI63:
 5924              		.cfi_def_cfa_offset 8
 5925              		.cfi_offset 7, -8
 5926              		.cfi_offset 14, -4
 5927 0002 84B0     		sub	sp, sp, #16
 5928              	.LCFI64:
 5929              		.cfi_def_cfa_offset 24
 5930 0004 00AF     		add	r7, sp, #0
 5931              	.LCFI65:
 5932              		.cfi_def_cfa_register 7
 5933 0006 7860     		str	r0, [r7, #4]
 5934 0008 0A1C     		mov	r2, r1
 5935 000a FB1C     		add	r3, r7, #3
 5936 000c 1A70     		strb	r2, [r3]
1435:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
1436:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
1437:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1438:../Sources/TFC/TFC_CrystalClock.c ****   
1439:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FEI mode
1440:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5937              		.loc 1 1440 0
 5938 000e 7A4B     		ldr	r3, .L489
 5939 0010 9B79     		ldrb	r3, [r3, #6]
 5940 0012 DBB2     		uxtb	r3, r3
 5941 0014 1A1C     		mov	r2, r3
 5942 0016 0C23     		mov	r3, #12
 5943 0018 1340     		and	r3, r2
 5944 001a 9B08     		lsr	r3, r3, #2
 5945 001c 0DD1     		bne	.L461
1441:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 5946              		.loc 1 1441 0
 5947 001e 764B     		ldr	r3, .L489
 5948 0020 9B79     		ldrb	r3, [r3, #6]
 5949 0022 DBB2     		uxtb	r3, r3
 5950 0024 1A1C     		mov	r2, r3
 5951 0026 1023     		mov	r3, #16
 5952 0028 1340     		and	r3, r2
1440:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5953              		.loc 1 1440 0
 5954 002a 06D0     		beq	.L461
1442:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 5955              		.loc 1 1442 0
 5956 002c 724B     		ldr	r3, .L489
 5957 002e 9B79     		ldrb	r3, [r3, #6]
 5958 0030 DBB2     		uxtb	r3, r3
 5959 0032 1A1C     		mov	r2, r3
 5960 0034 2023     		mov	r3, #32
 5961 0036 1340     		and	r3, r2
1440:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5962              		.loc 1 1440 0
 5963 0038 01D0     		beq	.L462
 5964              	.L461:
1443:../Sources/TFC/TFC_CrystalClock.c ****   {
1444:../Sources/TFC/TFC_CrystalClock.c ****     return 0x1;                                                       // return error code
 5965              		.loc 1 1444 0
 5966 003a 0123     		mov	r3, #1
 5967 003c D7E0     		b	.L463
 5968              	.L462:
1445:../Sources/TFC/TFC_CrystalClock.c ****   } 
1446:../Sources/TFC/TFC_CrystalClock.c **** 
1447:../Sources/TFC/TFC_CrystalClock.c **** // Check that the irc frequency matches the selected IRC 
1448:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 5969              		.loc 1 1448 0
 5970 003e FB1C     		add	r3, r7, #3
 5971 0040 1B78     		ldrb	r3, [r3]
 5972 0042 002B     		cmp	r3, #0
 5973 0044 09D1     		bne	.L464
1449:../Sources/TFC/TFC_CrystalClock.c ****   {    
1450:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 31250) || (irc_freq > 39063)) {return 0x31;}
 5974              		.loc 1 1450 0
 5975 0046 7A68     		ldr	r2, [r7, #4]
 5976 0048 6C4B     		ldr	r3, .L489+4
 5977 004a 9A42     		cmp	r2, r3
 5978 004c 03DD     		ble	.L465
 5979              		.loc 1 1450 0 is_stmt 0
 5980 004e 7A68     		ldr	r2, [r7, #4]
 5981 0050 6B4B     		ldr	r3, .L489+8
 5982 0052 9A42     		cmp	r2, r3
 5983 0054 0BDD     		ble	.L466
 5984              	.L465:
 5985              		.loc 1 1450 0
 5986 0056 3123     		mov	r3, #49
 5987 0058 C9E0     		b	.L463
 5988              	.L464:
1451:../Sources/TFC/TFC_CrystalClock.c ****   }
1452:../Sources/TFC/TFC_CrystalClock.c ****   else
1453:../Sources/TFC/TFC_CrystalClock.c ****   {
1454:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 3000000) || (irc_freq > 5000000)) {return 0x32;} // Fast IRC freq
 5989              		.loc 1 1454 0 is_stmt 1
 5990 005a 7A68     		ldr	r2, [r7, #4]
 5991 005c 694B     		ldr	r3, .L489+12
 5992 005e 9A42     		cmp	r2, r3
 5993 0060 03DD     		ble	.L467
 5994              		.loc 1 1454 0 is_stmt 0
 5995 0062 7A68     		ldr	r2, [r7, #4]
 5996 0064 684B     		ldr	r3, .L489+16
 5997 0066 9A42     		cmp	r2, r3
 5998 0068 01DD     		ble	.L466
 5999              	.L467:
 6000              		.loc 1 1454 0
 6001 006a 3223     		mov	r3, #50
 6002 006c BFE0     		b	.L463
 6003              	.L466:
1455:../Sources/TFC/TFC_CrystalClock.c ****   }
1456:../Sources/TFC/TFC_CrystalClock.c ****   
1457:../Sources/TFC/TFC_CrystalClock.c **** // Select the desired IRC
1458:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 6004              		.loc 1 1458 0 is_stmt 1
 6005 006e FB1C     		add	r3, r7, #3
 6006 0070 1B78     		ldrb	r3, [r3]
 6007 0072 002B     		cmp	r3, #0
 6008 0074 08D0     		beq	.L468
1459:../Sources/TFC/TFC_CrystalClock.c ****   {
1460:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 |= MCG_C2_IRCS_MASK; // select fast IRCS
 6009              		.loc 1 1460 0
 6010 0076 604B     		ldr	r3, .L489
 6011 0078 5F4A     		ldr	r2, .L489
 6012 007a 5278     		ldrb	r2, [r2, #1]
 6013 007c D2B2     		uxtb	r2, r2
 6014 007e 0121     		mov	r1, #1
 6015 0080 0A43     		orr	r2, r1
 6016 0082 D2B2     		uxtb	r2, r2
 6017 0084 5A70     		strb	r2, [r3, #1]
 6018 0086 07E0     		b	.L469
 6019              	.L468:
1461:../Sources/TFC/TFC_CrystalClock.c ****   }
1462:../Sources/TFC/TFC_CrystalClock.c ****   else
1463:../Sources/TFC/TFC_CrystalClock.c ****   {
1464:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 &= ~MCG_C2_IRCS_MASK; // select slow IRCS
 6020              		.loc 1 1464 0
 6021 0088 5B4B     		ldr	r3, .L489
 6022 008a 5B4A     		ldr	r2, .L489
 6023 008c 5278     		ldrb	r2, [r2, #1]
 6024 008e D2B2     		uxtb	r2, r2
 6025 0090 0121     		mov	r1, #1
 6026 0092 8A43     		bic	r2, r1
 6027 0094 D2B2     		uxtb	r2, r2
 6028 0096 5A70     		strb	r2, [r3, #1]
 6029              	.L469:
1465:../Sources/TFC/TFC_CrystalClock.c ****   }
1466:../Sources/TFC/TFC_CrystalClock.c ****   
1467:../Sources/TFC/TFC_CrystalClock.c **** // Change the CLKS mux to select the IRC as the MCGOUT
1468:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 6030              		.loc 1 1468 0
 6031 0098 574A     		ldr	r2, .L489
 6032 009a 3B1C     		mov	r3, r7
 6033 009c 0D33     		add	r3, r3, #13
 6034 009e 1278     		ldrb	r2, [r2]
 6035 00a0 1A70     		strb	r2, [r3]
1469:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C1_CLKS_MASK; // clear CLKS
 6036              		.loc 1 1469 0
 6037 00a2 3B1C     		mov	r3, r7
 6038 00a4 0D33     		add	r3, r3, #13
 6039 00a6 3A1C     		mov	r2, r7
 6040 00a8 0D32     		add	r2, r2, #13
 6041 00aa 1178     		ldrb	r1, [r2]
 6042 00ac 3F22     		mov	r2, #63
 6043 00ae 0A40     		and	r2, r1
 6044 00b0 1A70     		strb	r2, [r3]
1470:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C1_CLKS(1); // select IRC as the MCG clock sourse
 6045              		.loc 1 1470 0
 6046 00b2 3B1C     		mov	r3, r7
 6047 00b4 0D33     		add	r3, r3, #13
 6048 00b6 3A1C     		mov	r2, r7
 6049 00b8 0D32     		add	r2, r2, #13
 6050 00ba 1278     		ldrb	r2, [r2]
 6051 00bc 4021     		mov	r1, #64
 6052 00be 0A43     		orr	r2, r1
 6053 00c0 1A70     		strb	r2, [r3]
1471:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 6054              		.loc 1 1471 0
 6055 00c2 4D4B     		ldr	r3, .L489
 6056 00c4 3A1C     		mov	r2, r7
 6057 00c6 0D32     		add	r2, r2, #13
 6058 00c8 1278     		ldrb	r2, [r2]
 6059 00ca 1A70     		strb	r2, [r3]
1472:../Sources/TFC/TFC_CrystalClock.c **** 
1473:../Sources/TFC/TFC_CrystalClock.c **** // wait until internal reference switches to requested irc.
1474:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 6060              		.loc 1 1474 0
 6061 00cc FB1C     		add	r3, r7, #3
 6062 00ce 1B78     		ldrb	r3, [r3]
 6063 00d0 002B     		cmp	r3, #0
 6064 00d2 24D1     		bne	.L470
1475:../Sources/TFC/TFC_CrystalClock.c ****   {
1476:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6065              		.loc 1 1476 0
 6066 00d4 3B1C     		mov	r3, r7
 6067 00d6 0E33     		add	r3, r3, #14
 6068 00d8 0022     		mov	r2, #0
 6069 00da 1A80     		strh	r2, [r3]
 6070 00dc 0DE0     		b	.L471
 6071              	.L474:
1477:../Sources/TFC/TFC_CrystalClock.c ****     {
1478:../Sources/TFC/TFC_CrystalClock.c ****       if (!(MCG_S & MCG_S_IRCST_MASK)) break; // jump out early if IRCST clears before loop finishe
 6072              		.loc 1 1478 0
 6073 00de 464B     		ldr	r3, .L489
 6074 00e0 9B79     		ldrb	r3, [r3, #6]
 6075 00e2 DBB2     		uxtb	r3, r3
 6076 00e4 1A1C     		mov	r2, r3
 6077 00e6 0123     		mov	r3, #1
 6078 00e8 1340     		and	r3, r2
 6079 00ea 0ED0     		beq	.L486
 6080              	.L472:
1476:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6081              		.loc 1 1476 0
 6082 00ec 3B1C     		mov	r3, r7
 6083 00ee 0E33     		add	r3, r3, #14
 6084 00f0 3A1C     		mov	r2, r7
 6085 00f2 0E32     		add	r2, r2, #14
 6086 00f4 1288     		ldrh	r2, [r2]
 6087 00f6 0132     		add	r2, r2, #1
 6088 00f8 1A80     		strh	r2, [r3]
 6089              	.L471:
1476:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6090              		.loc 1 1476 0 is_stmt 0
 6091 00fa 3B1C     		mov	r3, r7
 6092 00fc 0E33     		add	r3, r3, #14
 6093 00fe 0021     		mov	r1, #0
 6094 0100 5A5E     		ldrsh	r2, [r3, r1]
 6095 0102 424B     		ldr	r3, .L489+20
 6096 0104 9A42     		cmp	r2, r3
 6097 0106 EADD     		ble	.L474
 6098 0108 00E0     		b	.L473
 6099              	.L486:
 6100              		.loc 1 1478 0 is_stmt 1
 6101 010a C046     		mov	r8, r8
 6102              	.L473:
1479:../Sources/TFC/TFC_CrystalClock.c ****     }
1480:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IRCST_MASK) return 0x13; // check bit is really clear and return with error i
 6103              		.loc 1 1480 0
 6104 010c 3A4B     		ldr	r3, .L489
 6105 010e 9B79     		ldrb	r3, [r3, #6]
 6106 0110 DBB2     		uxtb	r3, r3
 6107 0112 1A1C     		mov	r2, r3
 6108 0114 0123     		mov	r3, #1
 6109 0116 1340     		and	r3, r2
 6110 0118 26D0     		beq	.L475
 6111              		.loc 1 1480 0 is_stmt 0
 6112 011a 1323     		mov	r3, #19
 6113 011c 67E0     		b	.L463
 6114              	.L470:
1481:../Sources/TFC/TFC_CrystalClock.c ****   }
1482:../Sources/TFC/TFC_CrystalClock.c ****   else
1483:../Sources/TFC/TFC_CrystalClock.c ****   {
1484:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6115              		.loc 1 1484 0 is_stmt 1
 6116 011e 3B1C     		mov	r3, r7
 6117 0120 0E33     		add	r3, r3, #14
 6118 0122 0022     		mov	r2, #0
 6119 0124 1A80     		strh	r2, [r3]
 6120 0126 0DE0     		b	.L476
 6121              	.L479:
1485:../Sources/TFC/TFC_CrystalClock.c ****     {
1486:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_IRCST_MASK) break; // jump out early if IRCST sets before loop finishes
 6122              		.loc 1 1486 0
 6123 0128 334B     		ldr	r3, .L489
 6124 012a 9B79     		ldrb	r3, [r3, #6]
 6125 012c DBB2     		uxtb	r3, r3
 6126 012e 1A1C     		mov	r2, r3
 6127 0130 0123     		mov	r3, #1
 6128 0132 1340     		and	r3, r2
 6129 0134 0ED1     		bne	.L487
 6130              	.L477:
1484:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6131              		.loc 1 1484 0
 6132 0136 3B1C     		mov	r3, r7
 6133 0138 0E33     		add	r3, r3, #14
 6134 013a 3A1C     		mov	r2, r7
 6135 013c 0E32     		add	r2, r2, #14
 6136 013e 1288     		ldrh	r2, [r2]
 6137 0140 0132     		add	r2, r2, #1
 6138 0142 1A80     		strh	r2, [r3]
 6139              	.L476:
1484:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6140              		.loc 1 1484 0 is_stmt 0
 6141 0144 3B1C     		mov	r3, r7
 6142 0146 0E33     		add	r3, r3, #14
 6143 0148 0021     		mov	r1, #0
 6144 014a 5A5E     		ldrsh	r2, [r3, r1]
 6145 014c 2F4B     		ldr	r3, .L489+20
 6146 014e 9A42     		cmp	r2, r3
 6147 0150 EADD     		ble	.L479
 6148 0152 00E0     		b	.L478
 6149              	.L487:
 6150              		.loc 1 1486 0 is_stmt 1
 6151 0154 C046     		mov	r8, r8
 6152              	.L478:
1487:../Sources/TFC/TFC_CrystalClock.c ****     }
1488:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IRCST_MASK)) return 0x14; // check bit is really set and return with error 
 6153              		.loc 1 1488 0
 6154 0156 284B     		ldr	r3, .L489
 6155 0158 9B79     		ldrb	r3, [r3, #6]
 6156 015a DBB2     		uxtb	r3, r3
 6157 015c 1A1C     		mov	r2, r3
 6158 015e 0123     		mov	r3, #1
 6159 0160 1340     		and	r3, r2
 6160 0162 01D1     		bne	.L475
 6161              		.loc 1 1488 0 is_stmt 0
 6162 0164 1423     		mov	r3, #20
 6163 0166 42E0     		b	.L463
 6164              	.L475:
1489:../Sources/TFC/TFC_CrystalClock.c ****   }
1490:../Sources/TFC/TFC_CrystalClock.c ****   
1491:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to update
1492:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6165              		.loc 1 1492 0 is_stmt 1
 6166 0168 3B1C     		mov	r3, r7
 6167 016a 0E33     		add	r3, r3, #14
 6168 016c 0022     		mov	r2, #0
 6169 016e 1A80     		strh	r2, [r3]
 6170 0170 0FE0     		b	.L480
 6171              	.L483:
1493:../Sources/TFC/TFC_CrystalClock.c ****   {
1494:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) break; // jump out early if CLKST
 6172              		.loc 1 1494 0
 6173 0172 214B     		ldr	r3, .L489
 6174 0174 9B79     		ldrb	r3, [r3, #6]
 6175 0176 DBB2     		uxtb	r3, r3
 6176 0178 1A1C     		mov	r2, r3
 6177 017a 0C23     		mov	r3, #12
 6178 017c 1340     		and	r3, r2
 6179 017e 9B08     		lsr	r3, r3, #2
 6180 0180 012B     		cmp	r3, #1
 6181 0182 0ED0     		beq	.L488
 6182              	.L481:
1492:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6183              		.loc 1 1492 0
 6184 0184 3B1C     		mov	r3, r7
 6185 0186 0E33     		add	r3, r3, #14
 6186 0188 3A1C     		mov	r2, r7
 6187 018a 0E32     		add	r2, r2, #14
 6188 018c 1288     		ldrh	r2, [r2]
 6189 018e 0132     		add	r2, r2, #1
 6190 0190 1A80     		strh	r2, [r3]
 6191              	.L480:
1492:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6192              		.loc 1 1492 0 is_stmt 0
 6193 0192 3B1C     		mov	r3, r7
 6194 0194 0E33     		add	r3, r3, #14
 6195 0196 0021     		mov	r1, #0
 6196 0198 5A5E     		ldrsh	r2, [r3, r1]
 6197 019a 1C4B     		ldr	r3, .L489+20
 6198 019c 9A42     		cmp	r2, r3
 6199 019e E8DD     		ble	.L483
 6200 01a0 00E0     		b	.L482
 6201              	.L488:
 6202              		.loc 1 1494 0 is_stmt 1
 6203 01a2 C046     		mov	r8, r8
 6204              	.L482:
1495:../Sources/TFC/TFC_CrystalClock.c ****   }
1496:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) return 0x19; // check IRC is really
 6205              		.loc 1 1496 0
 6206 01a4 144B     		ldr	r3, .L489
 6207 01a6 9B79     		ldrb	r3, [r3, #6]
 6208 01a8 DBB2     		uxtb	r3, r3
 6209 01aa 1A1C     		mov	r2, r3
 6210 01ac 0C23     		mov	r3, #12
 6211 01ae 1340     		and	r3, r2
 6212 01b0 9B08     		lsr	r3, r3, #2
 6213 01b2 012B     		cmp	r3, #1
 6214 01b4 01D0     		beq	.L484
 6215              		.loc 1 1496 0 is_stmt 0
 6216 01b6 1923     		mov	r3, #25
 6217 01b8 19E0     		b	.L463
 6218              	.L484:
1497:../Sources/TFC/TFC_CrystalClock.c ****   
1498:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBI mode
1499:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 6219              		.loc 1 1499 0 is_stmt 1
 6220 01ba FB1C     		add	r3, r7, #3
 6221 01bc 1B78     		ldrb	r3, [r3]
 6222 01be 002B     		cmp	r3, #0
 6223 01c0 14D0     		beq	.L485
1500:../Sources/TFC/TFC_CrystalClock.c ****   {
1501:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 6224              		.loc 1 1501 0
 6225 01c2 0D4B     		ldr	r3, .L489
 6226 01c4 1B7A     		ldrb	r3, [r3, #8]
 6227 01c6 DBB2     		uxtb	r3, r3
 6228 01c8 1A1C     		mov	r2, r3
 6229 01ca 0E23     		mov	r3, #14
 6230 01cc 1340     		and	r3, r2
 6231 01ce 5B08     		lsr	r3, r3, #1
 6232 01d0 0122     		mov	r2, #1
 6233 01d2 9A40     		lsl	r2, r2, r3
 6234 01d4 3B1C     		mov	r3, r7
 6235 01d6 0C33     		add	r3, r3, #12
 6236 01d8 1A70     		strb	r2, [r3]
1502:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
 6237              		.loc 1 1502 0
 6238 01da 3B1C     		mov	r3, r7
 6239 01dc 0C33     		add	r3, r3, #12
 6240 01de 1B78     		ldrb	r3, [r3]
 6241 01e0 7868     		ldr	r0, [r7, #4]
 6242 01e2 191C     		mov	r1, r3
 6243 01e4 FFF7FEFF 		bl	__aeabi_idiv
 6244 01e8 031C     		mov	r3, r0
 6245 01ea 00E0     		b	.L463
 6246              	.L485:
1503:../Sources/TFC/TFC_CrystalClock.c ****   }
1504:../Sources/TFC/TFC_CrystalClock.c ****   else
1505:../Sources/TFC/TFC_CrystalClock.c ****   {
1506:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 6247              		.loc 1 1506 0
 6248 01ec 7B68     		ldr	r3, [r7, #4]
 6249              	.L463:
1507:../Sources/TFC/TFC_CrystalClock.c ****   }   
1508:../Sources/TFC/TFC_CrystalClock.c **** } // fei_fbi
 6250              		.loc 1 1508 0
 6251 01ee 181C     		mov	r0, r3
 6252 01f0 BD46     		mov	sp, r7
 6253 01f2 04B0     		add	sp, sp, #16
 6254              		@ sp needed for prologue
 6255 01f4 80BD     		pop	{r7, pc}
 6256              	.L490:
 6257 01f6 C046     		.align	2
 6258              	.L489:
 6259 01f8 00400640 		.word	1074151424
 6260 01fc 117A0000 		.word	31249
 6261 0200 97980000 		.word	39063
 6262 0204 BFC62D00 		.word	2999999
 6263 0208 404B4C00 		.word	5000000
 6264 020c CF070000 		.word	1999
 6265              		.cfi_endproc
 6266              	.LFE21:
 6268              		.section	.text.fei_fee,"ax",%progbits
 6269              		.align	2
 6270              		.global	fei_fee
 6271              		.code	16
 6272              		.thumb_func
 6274              	fei_fee:
 6275              	.LFB22:
1509:../Sources/TFC/TFC_CrystalClock.c **** 
1510:../Sources/TFC/TFC_CrystalClock.c **** 
1511:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
1512:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : fei_fee
1513:../Sources/TFC/TFC_CrystalClock.c ****  *
1514:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: FEI to FEE mode
1515:../Sources/TFC/TFC_CrystalClock.c ****  *
1516:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from FEI mode to FEE mode. This is
1517:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by setting the MCG_C2[LP] bit. There is no status bit to 
1518:../Sources/TFC/TFC_CrystalClock.c ****  * check so 0 is always returned if the function was called with the MCG
1519:../Sources/TFC/TFC_CrystalClock.c ****  * in FBI mode. The MCGCLKOUT frequency does not change
1520:../Sources/TFC/TFC_CrystalClock.c ****  *
1521:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: crystal_val - external clock frequency in Hz
1522:../Sources/TFC/TFC_CrystalClock.c ****  *             hgo_val     - selects whether low power or high gain mode is selected
1523:../Sources/TFC/TFC_CrystalClock.c ****  *                           for the crystal oscillator. This has no meaning if an 
1524:../Sources/TFC/TFC_CrystalClock.c ****  *                           external clock is used.
1525:../Sources/TFC/TFC_CrystalClock.c ****  *             erefs_val   - selects external clock (=0) or crystal osc (=1)
1526:../Sources/TFC/TFC_CrystalClock.c ****  *
1527:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGCLKOUT frequency (Hz) or error code
1528:../Sources/TFC/TFC_CrystalClock.c ****  */
1529:../Sources/TFC/TFC_CrystalClock.c **** int fei_fee(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
1530:../Sources/TFC/TFC_CrystalClock.c **** {
 6276              		.loc 1 1530 0
 6277              		.cfi_startproc
 6278 0000 80B5     		push	{r7, lr}
 6279              	.LCFI66:
 6280              		.cfi_def_cfa_offset 8
 6281              		.cfi_offset 7, -8
 6282              		.cfi_offset 14, -4
 6283 0002 86B0     		sub	sp, sp, #24
 6284              	.LCFI67:
 6285              		.cfi_def_cfa_offset 32
 6286 0004 00AF     		add	r7, sp, #0
 6287              	.LCFI68:
 6288              		.cfi_def_cfa_register 7
 6289 0006 7860     		str	r0, [r7, #4]
 6290 0008 FB1C     		add	r3, r7, #3
 6291 000a 1970     		strb	r1, [r3]
 6292 000c BB1C     		add	r3, r7, #2
 6293 000e 1A70     		strb	r2, [r3]
1531:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
1532:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
1533:../Sources/TFC/TFC_CrystalClock.c ****  // short i;
1534:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out, fll_ref_freq, i;
1535:../Sources/TFC/TFC_CrystalClock.c ****   
1536:../Sources/TFC/TFC_CrystalClock.c **** // check if in FEI mode
1537:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6294              		.loc 1 1537 0
 6295 0010 AC4B     		ldr	r3, .L524
 6296 0012 9B79     		ldrb	r3, [r3, #6]
 6297 0014 DBB2     		uxtb	r3, r3
 6298 0016 1A1C     		mov	r2, r3
 6299 0018 0C23     		mov	r3, #12
 6300 001a 1340     		and	r3, r2
 6301 001c 9B08     		lsr	r3, r3, #2
 6302 001e 0DD1     		bne	.L492
1538:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 6303              		.loc 1 1538 0
 6304 0020 A84B     		ldr	r3, .L524
 6305 0022 9B79     		ldrb	r3, [r3, #6]
 6306 0024 DBB2     		uxtb	r3, r3
 6307 0026 1A1C     		mov	r2, r3
 6308 0028 1023     		mov	r3, #16
 6309 002a 1340     		and	r3, r2
1537:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6310              		.loc 1 1537 0
 6311 002c 06D0     		beq	.L492
1539:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 6312              		.loc 1 1539 0
 6313 002e A54B     		ldr	r3, .L524
 6314 0030 9B79     		ldrb	r3, [r3, #6]
 6315 0032 DBB2     		uxtb	r3, r3
 6316 0034 1A1C     		mov	r2, r3
 6317 0036 2023     		mov	r3, #32
 6318 0038 1340     		and	r3, r2
1537:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6319              		.loc 1 1537 0
 6320 003a 01D0     		beq	.L493
 6321              	.L492:
1540:../Sources/TFC/TFC_CrystalClock.c ****   {
1541:../Sources/TFC/TFC_CrystalClock.c ****     return 0x1;                                                     // return error code
 6322              		.loc 1 1541 0
 6323 003c 0123     		mov	r3, #1
 6324 003e 3CE1     		b	.L494
 6325              	.L493:
1542:../Sources/TFC/TFC_CrystalClock.c ****   }
1543:../Sources/TFC/TFC_CrystalClock.c **** 
1544:../Sources/TFC/TFC_CrystalClock.c **** // check external frequency is less than the maximum frequency
1545:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 6326              		.loc 1 1545 0
 6327 0040 7A68     		ldr	r2, [r7, #4]
 6328 0042 A14B     		ldr	r3, .L524+4
 6329 0044 9A42     		cmp	r2, r3
 6330 0046 01DD     		ble	.L495
 6331              		.loc 1 1545 0 is_stmt 0
 6332 0048 2123     		mov	r3, #33
 6333 004a 36E1     		b	.L494
 6334              	.L495:
1546:../Sources/TFC/TFC_CrystalClock.c ****   
1547:../Sources/TFC/TFC_CrystalClock.c **** // check crystal frequency is within spec. if crystal osc is being used
1548:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 6335              		.loc 1 1548 0 is_stmt 1
 6336 004c BB1C     		add	r3, r7, #2
 6337 004e 1B78     		ldrb	r3, [r3]
 6338 0050 002B     		cmp	r3, #0
 6339 0052 11D0     		beq	.L496
1549:../Sources/TFC/TFC_CrystalClock.c ****   {
1550:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 30000) ||
 6340              		.loc 1 1550 0
 6341 0054 7A68     		ldr	r2, [r7, #4]
 6342 0056 9D4B     		ldr	r3, .L524+8
 6343 0058 9A42     		cmp	r2, r3
 6344 005a 0BDD     		ble	.L497
 6345              		.loc 1 1550 0 is_stmt 0
 6346 005c 7A68     		ldr	r2, [r7, #4]
 6347 005e 9C4B     		ldr	r3, .L524+12
 6348 0060 9A42     		cmp	r2, r3
 6349 0062 03DD     		ble	.L498
1551:../Sources/TFC/TFC_CrystalClock.c ****         ((crystal_val > 40000) && (crystal_val < 3000000)) ||
 6350              		.loc 1 1551 0 is_stmt 1
 6351 0064 7A68     		ldr	r2, [r7, #4]
 6352 0066 9B4B     		ldr	r3, .L524+16
 6353 0068 9A42     		cmp	r2, r3
 6354 006a 03DD     		ble	.L497
 6355              	.L498:
 6356              		.loc 1 1551 0 is_stmt 0
 6357 006c 7A68     		ldr	r2, [r7, #4]
 6358 006e 9A4B     		ldr	r3, .L524+20
 6359 0070 9A42     		cmp	r2, r3
 6360 0072 01DD     		ble	.L496
 6361              	.L497:
1552:../Sources/TFC/TFC_CrystalClock.c ****         (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal op
 6362              		.loc 1 1552 0 is_stmt 1
 6363 0074 2223     		mov	r3, #34
 6364 0076 20E1     		b	.L494
 6365              	.L496:
1553:../Sources/TFC/TFC_CrystalClock.c ****   }
1554:../Sources/TFC/TFC_CrystalClock.c **** 
1555:../Sources/TFC/TFC_CrystalClock.c **** // make sure HGO will never be greater than 1. Could return an error instead if desired.  
1556:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 6366              		.loc 1 1556 0
 6367 0078 FB1C     		add	r3, r7, #3
 6368 007a 1B78     		ldrb	r3, [r3]
 6369 007c 002B     		cmp	r3, #0
 6370 007e 02D0     		beq	.L499
1557:../Sources/TFC/TFC_CrystalClock.c ****   {
1558:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 6371              		.loc 1 1558 0
 6372 0080 FB1C     		add	r3, r7, #3
 6373 0082 0122     		mov	r2, #1
 6374 0084 1A70     		strb	r2, [r3]
 6375              	.L499:
1559:../Sources/TFC/TFC_CrystalClock.c ****   }
1560:../Sources/TFC/TFC_CrystalClock.c **** 
1561:../Sources/TFC/TFC_CrystalClock.c **** // configure the MCG_C2 register
1562:../Sources/TFC/TFC_CrystalClock.c **** // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the F
1563:../Sources/TFC/TFC_CrystalClock.c **** // it still needs to be set correctly even if the oscillator is not being used
1564:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 6376              		.loc 1 1564 0
 6377 0086 8F4A     		ldr	r2, .L524
 6378 0088 3B1C     		mov	r3, r7
 6379 008a 1633     		add	r3, r3, #22
 6380 008c 5278     		ldrb	r2, [r2, #1]
 6381 008e 1A70     		strb	r2, [r3]
1565:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 6382              		.loc 1 1565 0
 6383 0090 3B1C     		mov	r3, r7
 6384 0092 1633     		add	r3, r3, #22
 6385 0094 3A1C     		mov	r2, r7
 6386 0096 1632     		add	r2, r2, #22
 6387 0098 1278     		ldrb	r2, [r2]
 6388 009a 3C21     		mov	r1, #60
 6389 009c 8A43     		bic	r2, r1
 6390 009e 1A70     		strb	r2, [r3]
1566:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 40000)
 6391              		.loc 1 1566 0
 6392 00a0 7A68     		ldr	r2, [r7, #4]
 6393 00a2 8B4B     		ldr	r3, .L524+12
 6394 00a4 9A42     		cmp	r2, r3
 6395 00a6 11DC     		bgt	.L500
1567:../Sources/TFC/TFC_CrystalClock.c ****   {
1568:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 6396              		.loc 1 1568 0
 6397 00a8 FB1C     		add	r3, r7, #3
 6398 00aa 1B78     		ldrb	r3, [r3]
 6399 00ac DB00     		lsl	r3, r3, #3
 6400 00ae DAB2     		uxtb	r2, r3
 6401 00b0 BB1C     		add	r3, r7, #2
 6402 00b2 1B78     		ldrb	r3, [r3]
 6403 00b4 9B00     		lsl	r3, r3, #2
 6404 00b6 DBB2     		uxtb	r3, r3
 6405 00b8 1343     		orr	r3, r2
 6406 00ba D9B2     		uxtb	r1, r3
 6407 00bc 3B1C     		mov	r3, r7
 6408 00be 1633     		add	r3, r3, #22
 6409 00c0 3A1C     		mov	r2, r7
 6410 00c2 1632     		add	r2, r2, #22
 6411 00c4 1278     		ldrb	r2, [r2]
 6412 00c6 0A43     		orr	r2, r1
 6413 00c8 1A70     		strb	r2, [r3]
 6414 00ca 2CE0     		b	.L501
 6415              	.L500:
1569:../Sources/TFC/TFC_CrystalClock.c ****   }
1570:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 8000000)
 6416              		.loc 1 1570 0
 6417 00cc 7A68     		ldr	r2, [r7, #4]
 6418 00ce 834B     		ldr	r3, .L524+24
 6419 00d0 9A42     		cmp	r2, r3
 6420 00d2 14DC     		bgt	.L502
1571:../Sources/TFC/TFC_CrystalClock.c ****   {
1572:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 6421              		.loc 1 1572 0
 6422 00d4 FB1C     		add	r3, r7, #3
 6423 00d6 1B78     		ldrb	r3, [r3]
 6424 00d8 DB00     		lsl	r3, r3, #3
 6425 00da DAB2     		uxtb	r2, r3
 6426 00dc BB1C     		add	r3, r7, #2
 6427 00de 1B78     		ldrb	r3, [r3]
 6428 00e0 9B00     		lsl	r3, r3, #2
 6429 00e2 DBB2     		uxtb	r3, r3
 6430 00e4 1343     		orr	r3, r2
 6431 00e6 DAB2     		uxtb	r2, r3
 6432 00e8 3B1C     		mov	r3, r7
 6433 00ea 1633     		add	r3, r3, #22
 6434 00ec 1B78     		ldrb	r3, [r3]
 6435 00ee 1343     		orr	r3, r2
 6436 00f0 DAB2     		uxtb	r2, r3
 6437 00f2 3B1C     		mov	r3, r7
 6438 00f4 1633     		add	r3, r3, #22
 6439 00f6 1021     		mov	r1, #16
 6440 00f8 0A43     		orr	r2, r1
 6441 00fa 1A70     		strb	r2, [r3]
 6442 00fc 13E0     		b	.L501
 6443              	.L502:
1573:../Sources/TFC/TFC_CrystalClock.c ****   }
1574:../Sources/TFC/TFC_CrystalClock.c ****   else
1575:../Sources/TFC/TFC_CrystalClock.c ****   {
1576:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 6444              		.loc 1 1576 0
 6445 00fe FB1C     		add	r3, r7, #3
 6446 0100 1B78     		ldrb	r3, [r3]
 6447 0102 DB00     		lsl	r3, r3, #3
 6448 0104 DAB2     		uxtb	r2, r3
 6449 0106 BB1C     		add	r3, r7, #2
 6450 0108 1B78     		ldrb	r3, [r3]
 6451 010a 9B00     		lsl	r3, r3, #2
 6452 010c DBB2     		uxtb	r3, r3
 6453 010e 1343     		orr	r3, r2
 6454 0110 DAB2     		uxtb	r2, r3
 6455 0112 3B1C     		mov	r3, r7
 6456 0114 1633     		add	r3, r3, #22
 6457 0116 1B78     		ldrb	r3, [r3]
 6458 0118 1343     		orr	r3, r2
 6459 011a DAB2     		uxtb	r2, r3
 6460 011c 3B1C     		mov	r3, r7
 6461 011e 1633     		add	r3, r3, #22
 6462 0120 2021     		mov	r1, #32
 6463 0122 0A43     		orr	r2, r1
 6464 0124 1A70     		strb	r2, [r3]
 6465              	.L501:
1577:../Sources/TFC/TFC_CrystalClock.c ****   }
1578:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 6466              		.loc 1 1578 0
 6467 0126 674B     		ldr	r3, .L524
 6468 0128 3A1C     		mov	r2, r7
 6469 012a 1632     		add	r2, r2, #22
 6470 012c 1278     		ldrb	r2, [r2]
 6471 012e 5A70     		strb	r2, [r3, #1]
1579:../Sources/TFC/TFC_CrystalClock.c **** 
1580:../Sources/TFC/TFC_CrystalClock.c **** // determine FRDIV based on reference clock frequency
1581:../Sources/TFC/TFC_CrystalClock.c **** // since the external frequency has already been checked only the maximum frequency for each FRDIV 
1582:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 6472              		.loc 1 1582 0
 6473 0130 7A68     		ldr	r2, [r7, #4]
 6474 0132 6B4B     		ldr	r3, .L524+28
 6475 0134 9A42     		cmp	r2, r3
 6476 0136 04DC     		bgt	.L503
 6477              		.loc 1 1582 0 is_stmt 0
 6478 0138 3B1C     		mov	r3, r7
 6479 013a 1733     		add	r3, r3, #23
 6480 013c 0022     		mov	r2, #0
 6481 013e 1A70     		strb	r2, [r3]
 6482 0140 27E0     		b	.L504
 6483              	.L503:
1583:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 6484              		.loc 1 1583 0 is_stmt 1
 6485 0142 7A68     		ldr	r2, [r7, #4]
 6486 0144 674B     		ldr	r3, .L524+32
 6487 0146 9A42     		cmp	r2, r3
 6488 0148 04DC     		bgt	.L505
 6489              		.loc 1 1583 0 is_stmt 0
 6490 014a 3B1C     		mov	r3, r7
 6491 014c 1733     		add	r3, r3, #23
 6492 014e 0122     		mov	r2, #1
 6493 0150 1A70     		strb	r2, [r3]
 6494 0152 1EE0     		b	.L504
 6495              	.L505:
1584:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 6496              		.loc 1 1584 0 is_stmt 1
 6497 0154 7A68     		ldr	r2, [r7, #4]
 6498 0156 644B     		ldr	r3, .L524+36
 6499 0158 9A42     		cmp	r2, r3
 6500 015a 04DC     		bgt	.L506
 6501              		.loc 1 1584 0 is_stmt 0
 6502 015c 3B1C     		mov	r3, r7
 6503 015e 1733     		add	r3, r3, #23
 6504 0160 0222     		mov	r2, #2
 6505 0162 1A70     		strb	r2, [r3]
 6506 0164 15E0     		b	.L504
 6507              	.L506:
1585:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 6508              		.loc 1 1585 0 is_stmt 1
 6509 0166 7A68     		ldr	r2, [r7, #4]
 6510 0168 604B     		ldr	r3, .L524+40
 6511 016a 9A42     		cmp	r2, r3
 6512 016c 04DC     		bgt	.L507
 6513              		.loc 1 1585 0 is_stmt 0
 6514 016e 3B1C     		mov	r3, r7
 6515 0170 1733     		add	r3, r3, #23
 6516 0172 0322     		mov	r2, #3
 6517 0174 1A70     		strb	r2, [r3]
 6518 0176 0CE0     		b	.L504
 6519              	.L507:
1586:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 6520              		.loc 1 1586 0 is_stmt 1
 6521 0178 7A68     		ldr	r2, [r7, #4]
 6522 017a 5D4B     		ldr	r3, .L524+44
 6523 017c 9A42     		cmp	r2, r3
 6524 017e 04DC     		bgt	.L508
 6525              		.loc 1 1586 0 is_stmt 0
 6526 0180 3B1C     		mov	r3, r7
 6527 0182 1733     		add	r3, r3, #23
 6528 0184 0422     		mov	r2, #4
 6529 0186 1A70     		strb	r2, [r3]
 6530 0188 03E0     		b	.L504
 6531              	.L508:
1587:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 6532              		.loc 1 1587 0 is_stmt 1
 6533 018a 3B1C     		mov	r3, r7
 6534 018c 1733     		add	r3, r3, #23
 6535 018e 0522     		mov	r2, #5
 6536 0190 1A70     		strb	r2, [r3]
 6537              	.L504:
1588:../Sources/TFC/TFC_CrystalClock.c ****    
1589:../Sources/TFC/TFC_CrystalClock.c ****   // The FLL ref clk divide value depends on FRDIV and the RANGE value
1590:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT) > 0)
 6538              		.loc 1 1590 0
 6539 0192 4C4B     		ldr	r3, .L524
 6540 0194 5B78     		ldrb	r3, [r3, #1]
 6541 0196 DBB2     		uxtb	r3, r3
 6542 0198 1A1C     		mov	r2, r3
 6543 019a 3023     		mov	r3, #48
 6544 019c 1340     		and	r3, r2
 6545 019e 1B09     		lsr	r3, r3, #4
 6546 01a0 0DD0     		beq	.L509
1591:../Sources/TFC/TFC_CrystalClock.c ****   {
1592:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (32 << frdiv_val));
 6547              		.loc 1 1592 0
 6548 01a2 3B1C     		mov	r3, r7
 6549 01a4 1733     		add	r3, r3, #23
 6550 01a6 1B78     		ldrb	r3, [r3]
 6551 01a8 2022     		mov	r2, #32
 6552 01aa 111C     		mov	r1, r2
 6553 01ac 9940     		lsl	r1, r1, r3
 6554 01ae 0B1C     		mov	r3, r1
 6555 01b0 7868     		ldr	r0, [r7, #4]
 6556 01b2 191C     		mov	r1, r3
 6557 01b4 FFF7FEFF 		bl	__aeabi_idiv
 6558 01b8 031C     		mov	r3, r0
 6559 01ba 3B61     		str	r3, [r7, #16]
 6560 01bc 0CE0     		b	.L510
 6561              	.L509:
1593:../Sources/TFC/TFC_CrystalClock.c ****   }
1594:../Sources/TFC/TFC_CrystalClock.c ****   else
1595:../Sources/TFC/TFC_CrystalClock.c ****   {
1596:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (1 << frdiv_val));
 6562              		.loc 1 1596 0
 6563 01be 3B1C     		mov	r3, r7
 6564 01c0 1733     		add	r3, r3, #23
 6565 01c2 1B78     		ldrb	r3, [r3]
 6566 01c4 0122     		mov	r2, #1
 6567 01c6 111C     		mov	r1, r2
 6568 01c8 9940     		lsl	r1, r1, r3
 6569 01ca 0B1C     		mov	r3, r1
 6570 01cc 7868     		ldr	r0, [r7, #4]
 6571 01ce 191C     		mov	r1, r3
 6572 01d0 FFF7FEFF 		bl	__aeabi_idiv
 6573 01d4 031C     		mov	r3, r0
 6574 01d6 3B61     		str	r3, [r7, #16]
 6575              	.L510:
1597:../Sources/TFC/TFC_CrystalClock.c ****   }
1598:../Sources/TFC/TFC_CrystalClock.c ****   
1599:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
1600:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(fll_ref_freq); // FLL reference frequency calculated from ext ref freq and FRD
 6576              		.loc 1 1600 0
 6577 01d8 3B69     		ldr	r3, [r7, #16]
 6578 01da 181C     		mov	r0, r3
 6579 01dc FFF7FEFF 		bl	fll_freq
 6580 01e0 031C     		mov	r3, r0
 6581 01e2 BB60     		str	r3, [r7, #8]
1601:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 6582              		.loc 1 1601 0
 6583 01e4 BB68     		ldr	r3, [r7, #8]
 6584 01e6 3B2B     		cmp	r3, #59
 6585 01e8 01DC     		bgt	.L511
 6586              		.loc 1 1601 0 is_stmt 0
 6587 01ea BB68     		ldr	r3, [r7, #8]
 6588 01ec 65E0     		b	.L494
 6589              	.L511:
1602:../Sources/TFC/TFC_CrystalClock.c ****   
1603:../Sources/TFC/TFC_CrystalClock.c **** // Select external oscilator and Reference Divider and clear IREFS to start ext osc
1604:../Sources/TFC/TFC_CrystalClock.c **** // If IRCLK is required it must be enabled outside of this driver, existing state will be maintaine
1605:../Sources/TFC/TFC_CrystalClock.c **** // CLKS=0, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
1606:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 6590              		.loc 1 1606 0 is_stmt 1
 6591 01ee 354A     		ldr	r2, .L524
 6592 01f0 3B1C     		mov	r3, r7
 6593 01f2 1633     		add	r3, r3, #22
 6594 01f4 1278     		ldrb	r2, [r2]
 6595 01f6 1A70     		strb	r2, [r3]
1607:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these
 6596              		.loc 1 1607 0
 6597 01f8 3B1C     		mov	r3, r7
 6598 01fa 1633     		add	r3, r3, #22
 6599 01fc 3A1C     		mov	r2, r7
 6600 01fe 1632     		add	r2, r2, #22
 6601 0200 1178     		ldrb	r1, [r2]
 6602 0202 0322     		mov	r2, #3
 6603 0204 0A40     		and	r2, r1
 6604 0206 1A70     		strb	r2, [r3]
1608:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(0) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 6605              		.loc 1 1608 0
 6606 0208 3B1C     		mov	r3, r7
 6607 020a 1733     		add	r3, r3, #23
 6608 020c 1B78     		ldrb	r3, [r3]
 6609 020e DB00     		lsl	r3, r3, #3
 6610 0210 DAB2     		uxtb	r2, r3
 6611 0212 3823     		mov	r3, #56
 6612 0214 1340     		and	r3, r2
 6613 0216 D9B2     		uxtb	r1, r3
 6614 0218 3B1C     		mov	r3, r7
 6615 021a 1633     		add	r3, r3, #22
 6616 021c 3A1C     		mov	r2, r7
 6617 021e 1632     		add	r2, r2, #22
 6618 0220 1278     		ldrb	r2, [r2]
 6619 0222 0A43     		orr	r2, r1
 6620 0224 1A70     		strb	r2, [r3]
1609:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 6621              		.loc 1 1609 0
 6622 0226 274B     		ldr	r3, .L524
 6623 0228 3A1C     		mov	r2, r7
 6624 022a 1632     		add	r2, r2, #22
 6625 022c 1278     		ldrb	r2, [r2]
 6626 022e 1A70     		strb	r2, [r3]
1610:../Sources/TFC/TFC_CrystalClock.c **** 
1611:../Sources/TFC/TFC_CrystalClock.c **** // if the external oscillator is used need to wait for OSCINIT to set
1612:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 6627              		.loc 1 1612 0
 6628 0230 BB1C     		add	r3, r7, #2
 6629 0232 1B78     		ldrb	r3, [r3]
 6630 0234 002B     		cmp	r3, #0
 6631 0236 1BD0     		beq	.L512
1613:../Sources/TFC/TFC_CrystalClock.c ****   {
1614:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000000 ; i++)
 6632              		.loc 1 1614 0
 6633 0238 0023     		mov	r3, #0
 6634 023a FB60     		str	r3, [r7, #12]
 6635 023c 09E0     		b	.L513
 6636              	.L516:
1615:../Sources/TFC/TFC_CrystalClock.c ****     {
1616:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 6637              		.loc 1 1616 0
 6638 023e 214B     		ldr	r3, .L524
 6639 0240 9B79     		ldrb	r3, [r3, #6]
 6640 0242 DBB2     		uxtb	r3, r3
 6641 0244 1A1C     		mov	r2, r3
 6642 0246 0223     		mov	r3, #2
 6643 0248 1340     		and	r3, r2
 6644 024a 07D1     		bne	.L522
 6645              	.L514:
1614:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000000 ; i++)
 6646              		.loc 1 1614 0
 6647 024c FB68     		ldr	r3, [r7, #12]
 6648 024e 0133     		add	r3, r3, #1
 6649 0250 FB60     		str	r3, [r7, #12]
 6650              	.L513:
1614:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000000 ; i++)
 6651              		.loc 1 1614 0 is_stmt 0
 6652 0252 FA68     		ldr	r2, [r7, #12]
 6653 0254 274B     		ldr	r3, .L524+48
 6654 0256 9A42     		cmp	r2, r3
 6655 0258 F1DD     		ble	.L516
 6656 025a 00E0     		b	.L515
 6657              	.L522:
 6658              		.loc 1 1616 0 is_stmt 1
 6659 025c C046     		mov	r8, r8
 6660              	.L515:
1617:../Sources/TFC/TFC_CrystalClock.c ****     }
1618:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with err
 6661              		.loc 1 1618 0
 6662 025e 194B     		ldr	r3, .L524
 6663 0260 9B79     		ldrb	r3, [r3, #6]
 6664 0262 DBB2     		uxtb	r3, r3
 6665 0264 1A1C     		mov	r2, r3
 6666 0266 0223     		mov	r3, #2
 6667 0268 1340     		and	r3, r2
 6668 026a 01D1     		bne	.L512
 6669              		.loc 1 1618 0 is_stmt 0
 6670 026c 2323     		mov	r3, #35
 6671 026e 24E0     		b	.L494
 6672              	.L512:
1619:../Sources/TFC/TFC_CrystalClock.c ****   }
1620:../Sources/TFC/TFC_CrystalClock.c **** 
1621:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
1622:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6673              		.loc 1 1622 0 is_stmt 1
 6674 0270 0023     		mov	r3, #0
 6675 0272 FB60     		str	r3, [r7, #12]
 6676 0274 09E0     		b	.L517
 6677              	.L520:
1623:../Sources/TFC/TFC_CrystalClock.c ****   {
1624:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 6678              		.loc 1 1624 0
 6679 0276 134B     		ldr	r3, .L524
 6680 0278 9B79     		ldrb	r3, [r3, #6]
 6681 027a DBB2     		uxtb	r3, r3
 6682 027c 1A1C     		mov	r2, r3
 6683 027e 1023     		mov	r3, #16
 6684 0280 1340     		and	r3, r2
 6685 0282 07D0     		beq	.L523
 6686              	.L518:
1622:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6687              		.loc 1 1622 0
 6688 0284 FB68     		ldr	r3, [r7, #12]
 6689 0286 0133     		add	r3, r3, #1
 6690 0288 FB60     		str	r3, [r7, #12]
 6691              	.L517:
1622:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6692              		.loc 1 1622 0 is_stmt 0
 6693 028a FA68     		ldr	r2, [r7, #12]
 6694 028c 1A4B     		ldr	r3, .L524+52
 6695 028e 9A42     		cmp	r2, r3
 6696 0290 F1DD     		ble	.L520
 6697 0292 00E0     		b	.L519
 6698              	.L523:
 6699              		.loc 1 1624 0 is_stmt 1
 6700 0294 C046     		mov	r8, r8
 6701              	.L519:
1625:../Sources/TFC/TFC_CrystalClock.c ****   }
1626:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 6702              		.loc 1 1626 0
 6703 0296 0B4B     		ldr	r3, .L524
 6704 0298 9B79     		ldrb	r3, [r3, #6]
 6705 029a DBB2     		uxtb	r3, r3
 6706 029c 1A1C     		mov	r2, r3
 6707 029e 1023     		mov	r3, #16
 6708 02a0 1340     		and	r3, r2
 6709 02a2 01D0     		beq	.L521
 6710              		.loc 1 1626 0 is_stmt 0
 6711 02a4 1123     		mov	r3, #17
 6712 02a6 08E0     		b	.L494
 6713              	.L521:
1627:../Sources/TFC/TFC_CrystalClock.c ****   
1628:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE  
1629:../Sources/TFC/TFC_CrystalClock.c **** // It is recommended that the clock monitor is enabled when using an external clock as the clock so
1630:../Sources/TFC/TFC_CrystalClock.c **** // It is enabled here but can be removed if this is not required.
1631:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 6714              		.loc 1 1631 0 is_stmt 1
 6715 02a8 064B     		ldr	r3, .L524
 6716 02aa 064A     		ldr	r2, .L524
 6717 02ac 5279     		ldrb	r2, [r2, #5]
 6718 02ae D2B2     		uxtb	r2, r2
 6719 02b0 2021     		mov	r1, #32
 6720 02b2 0A43     		orr	r2, r1
 6721 02b4 D2B2     		uxtb	r2, r2
 6722 02b6 5A71     		strb	r2, [r3, #5]
1632:../Sources/TFC/TFC_CrystalClock.c ****   
1633:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out; // MCGOUT frequency equals FLL frequency
 6723              		.loc 1 1633 0
 6724 02b8 BB68     		ldr	r3, [r7, #8]
 6725              	.L494:
1634:../Sources/TFC/TFC_CrystalClock.c **** } // fei_fee
 6726              		.loc 1 1634 0
 6727 02ba 181C     		mov	r0, r3
 6728 02bc BD46     		mov	sp, r7
 6729 02be 06B0     		add	sp, sp, #24
 6730              		@ sp needed for prologue
 6731 02c0 80BD     		pop	{r7, pc}
 6732              	.L525:
 6733 02c2 C046     		.align	2
 6734              	.L524:
 6735 02c4 00400640 		.word	1074151424
 6736 02c8 80F0FA02 		.word	50000000
 6737 02cc 2F750000 		.word	29999
 6738 02d0 409C0000 		.word	40000
 6739 02d4 BFC62D00 		.word	2999999
 6740 02d8 0048E801 		.word	32000000
 6741 02dc 00127A00 		.word	8000000
 6742 02e0 D0121300 		.word	1250000
 6743 02e4 A0252600 		.word	2500000
 6744 02e8 404B4C00 		.word	5000000
 6745 02ec 80969800 		.word	10000000
 6746 02f0 002D3101 		.word	20000000
 6747 02f4 FF2C3101 		.word	19999999
 6748 02f8 CF070000 		.word	1999
 6749              		.cfi_endproc
 6750              	.LFE22:
 6752              		.section	.text.fee_fei,"ax",%progbits
 6753              		.align	2
 6754              		.global	fee_fei
 6755              		.code	16
 6756              		.thumb_func
 6758              	fee_fei:
 6759              	.LFB23:
1635:../Sources/TFC/TFC_CrystalClock.c **** 
1636:../Sources/TFC/TFC_CrystalClock.c **** 
1637:../Sources/TFC/TFC_CrystalClock.c **** int fee_fei(int slow_irc_freq)
1638:../Sources/TFC/TFC_CrystalClock.c **** {
 6760              		.loc 1 1638 0
 6761              		.cfi_startproc
 6762 0000 80B5     		push	{r7, lr}
 6763              	.LCFI69:
 6764              		.cfi_def_cfa_offset 8
 6765              		.cfi_offset 7, -8
 6766              		.cfi_offset 14, -4
 6767 0002 84B0     		sub	sp, sp, #16
 6768              	.LCFI70:
 6769              		.cfi_def_cfa_offset 24
 6770 0004 00AF     		add	r7, sp, #0
 6771              	.LCFI71:
 6772              		.cfi_def_cfa_register 7
 6773 0006 7860     		str	r0, [r7, #4]
1639:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1640:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out;
1641:../Sources/TFC/TFC_CrystalClock.c **** 
1642:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FEE mode
1643:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6774              		.loc 1 1643 0
 6775 0008 334B     		ldr	r3, .L539
 6776 000a 9B79     		ldrb	r3, [r3, #6]
 6777 000c DBB2     		uxtb	r3, r3
 6778 000e 1A1C     		mov	r2, r3
 6779 0010 0C23     		mov	r3, #12
 6780 0012 1340     		and	r3, r2
 6781 0014 9B08     		lsr	r3, r3, #2
 6782 0016 0DD1     		bne	.L527
1644:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                             // check FLL ref is external re
 6783              		.loc 1 1644 0
 6784 0018 2F4B     		ldr	r3, .L539
 6785 001a 9B79     		ldrb	r3, [r3, #6]
 6786 001c DBB2     		uxtb	r3, r3
 6787 001e 1A1C     		mov	r2, r3
 6788 0020 1023     		mov	r3, #16
 6789 0022 1340     		and	r3, r2
1643:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6790              		.loc 1 1643 0
 6791 0024 06D1     		bne	.L527
1645:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                               // check PLLS mux has selected 
 6792              		.loc 1 1645 0
 6793 0026 2C4B     		ldr	r3, .L539
 6794 0028 9B79     		ldrb	r3, [r3, #6]
 6795 002a DBB2     		uxtb	r3, r3
 6796 002c 1A1C     		mov	r2, r3
 6797 002e 2023     		mov	r3, #32
 6798 0030 1340     		and	r3, r2
1643:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6799              		.loc 1 1643 0
 6800 0032 01D0     		beq	.L528
 6801              	.L527:
1646:../Sources/TFC/TFC_CrystalClock.c ****   {
1647:../Sources/TFC/TFC_CrystalClock.c ****     return 0x2;                                                     // return error code
 6802              		.loc 1 1647 0
 6803 0034 0223     		mov	r3, #2
 6804 0036 4AE0     		b	.L529
 6805              	.L528:
1648:../Sources/TFC/TFC_CrystalClock.c ****   } 
1649:../Sources/TFC/TFC_CrystalClock.c ****       
1650:../Sources/TFC/TFC_CrystalClock.c **** // Check IRC frequency is within spec.
1651:../Sources/TFC/TFC_CrystalClock.c ****   if ((slow_irc_freq < 31250) || (slow_irc_freq > 39063))
 6806              		.loc 1 1651 0
 6807 0038 7A68     		ldr	r2, [r7, #4]
 6808 003a 284B     		ldr	r3, .L539+4
 6809 003c 9A42     		cmp	r2, r3
 6810 003e 03DD     		ble	.L530
 6811              		.loc 1 1651 0 is_stmt 0
 6812 0040 7A68     		ldr	r2, [r7, #4]
 6813 0042 274B     		ldr	r3, .L539+8
 6814 0044 9A42     		cmp	r2, r3
 6815 0046 01DD     		ble	.L531
 6816              	.L530:
1652:../Sources/TFC/TFC_CrystalClock.c ****   {
1653:../Sources/TFC/TFC_CrystalClock.c ****     return 0x31;
 6817              		.loc 1 1653 0 is_stmt 1
 6818 0048 3123     		mov	r3, #49
 6819 004a 40E0     		b	.L529
 6820              	.L531:
1654:../Sources/TFC/TFC_CrystalClock.c ****   }
1655:../Sources/TFC/TFC_CrystalClock.c **** 
1656:../Sources/TFC/TFC_CrystalClock.c ****   // Check resulting FLL frequency 
1657:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(slow_irc_freq); 
 6821              		.loc 1 1657 0
 6822 004c 7B68     		ldr	r3, [r7, #4]
 6823 004e 181C     		mov	r0, r3
 6824 0050 FFF7FEFF 		bl	fll_freq
 6825 0054 031C     		mov	r3, r0
 6826 0056 BB60     		str	r3, [r7, #8]
1658:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 6827              		.loc 1 1658 0
 6828 0058 BB68     		ldr	r3, [r7, #8]
 6829 005a 3B2B     		cmp	r3, #59
 6830 005c 01DC     		bgt	.L532
 6831              		.loc 1 1658 0 is_stmt 0
 6832 005e BB68     		ldr	r3, [r7, #8]
 6833 0060 35E0     		b	.L529
 6834              	.L532:
1659:../Sources/TFC/TFC_CrystalClock.c ****   
1660:../Sources/TFC/TFC_CrystalClock.c **** // Ensure clock monitor is disabled before switching to FEI otherwise a loss of clock will trigger
1661:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_CME0_MASK;
 6835              		.loc 1 1661 0 is_stmt 1
 6836 0062 1D4B     		ldr	r3, .L539
 6837 0064 1C4A     		ldr	r2, .L539
 6838 0066 5279     		ldrb	r2, [r2, #5]
 6839 0068 D2B2     		uxtb	r2, r2
 6840 006a 2021     		mov	r1, #32
 6841 006c 8A43     		bic	r2, r1
 6842 006e D2B2     		uxtb	r2, r2
 6843 0070 5A71     		strb	r2, [r3, #5]
1662:../Sources/TFC/TFC_CrystalClock.c **** 
1663:../Sources/TFC/TFC_CrystalClock.c **** // Change FLL reference clock from external to internal by setting IREFS bit
1664:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 |= MCG_C1_IREFS_MASK; // select internal reference
 6844              		.loc 1 1664 0
 6845 0072 194B     		ldr	r3, .L539
 6846 0074 184A     		ldr	r2, .L539
 6847 0076 1278     		ldrb	r2, [r2]
 6848 0078 D2B2     		uxtb	r2, r2
 6849 007a 0421     		mov	r1, #4
 6850 007c 0A43     		orr	r2, r1
 6851 007e D2B2     		uxtb	r2, r2
 6852 0080 1A70     		strb	r2, [r3]
1665:../Sources/TFC/TFC_CrystalClock.c ****   
1666:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock to switch to internal reference 
1667:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6853              		.loc 1 1667 0
 6854 0082 3B1C     		mov	r3, r7
 6855 0084 0E33     		add	r3, r3, #14
 6856 0086 0022     		mov	r2, #0
 6857 0088 1A80     		strh	r2, [r3]
 6858 008a 0DE0     		b	.L533
 6859              	.L536:
1668:../Sources/TFC/TFC_CrystalClock.c ****   {
1669:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
 6860              		.loc 1 1669 0
 6861 008c 124B     		ldr	r3, .L539
 6862 008e 9B79     		ldrb	r3, [r3, #6]
 6863 0090 DBB2     		uxtb	r3, r3
 6864 0092 1A1C     		mov	r2, r3
 6865 0094 1023     		mov	r3, #16
 6866 0096 1340     		and	r3, r2
 6867 0098 0ED1     		bne	.L538
 6868              	.L534:
1667:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6869              		.loc 1 1667 0
 6870 009a 3B1C     		mov	r3, r7
 6871 009c 0E33     		add	r3, r3, #14
 6872 009e 3A1C     		mov	r2, r7
 6873 00a0 0E32     		add	r2, r2, #14
 6874 00a2 1288     		ldrh	r2, [r2]
 6875 00a4 0132     		add	r2, r2, #1
 6876 00a6 1A80     		strh	r2, [r3]
 6877              	.L533:
1667:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6878              		.loc 1 1667 0 is_stmt 0
 6879 00a8 3B1C     		mov	r3, r7
 6880 00aa 0E33     		add	r3, r3, #14
 6881 00ac 0021     		mov	r1, #0
 6882 00ae 5A5E     		ldrsh	r2, [r3, r1]
 6883 00b0 0C4B     		ldr	r3, .L539+12
 6884 00b2 9A42     		cmp	r2, r3
 6885 00b4 EADD     		ble	.L536
 6886 00b6 00E0     		b	.L535
 6887              	.L538:
 6888              		.loc 1 1669 0 is_stmt 1
 6889 00b8 C046     		mov	r8, r8
 6890              	.L535:
1670:../Sources/TFC/TFC_CrystalClock.c ****   }
1671:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 6891              		.loc 1 1671 0
 6892 00ba 074B     		ldr	r3, .L539
 6893 00bc 9B79     		ldrb	r3, [r3, #6]
 6894 00be DBB2     		uxtb	r3, r3
 6895 00c0 1A1C     		mov	r2, r3
 6896 00c2 1023     		mov	r3, #16
 6897 00c4 1340     		and	r3, r2
 6898 00c6 01D1     		bne	.L537
 6899              		.loc 1 1671 0 is_stmt 0
 6900 00c8 1223     		mov	r3, #18
 6901 00ca 00E0     		b	.L529
 6902              	.L537:
1672:../Sources/TFC/TFC_CrystalClock.c ****   
1673:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEI mode  
1674:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out;  
 6903              		.loc 1 1674 0 is_stmt 1
 6904 00cc BB68     		ldr	r3, [r7, #8]
 6905              	.L529:
1675:../Sources/TFC/TFC_CrystalClock.c **** } // fee_fei
 6906              		.loc 1 1675 0
 6907 00ce 181C     		mov	r0, r3
 6908 00d0 BD46     		mov	sp, r7
 6909 00d2 04B0     		add	sp, sp, #16
 6910              		@ sp needed for prologue
 6911 00d4 80BD     		pop	{r7, pc}
 6912              	.L540:
 6913 00d6 C046     		.align	2
 6914              	.L539:
 6915 00d8 00400640 		.word	1074151424
 6916 00dc 117A0000 		.word	31249
 6917 00e0 97980000 		.word	39063
 6918 00e4 CF070000 		.word	1999
 6919              		.cfi_endproc
 6920              	.LFE23:
 6922              		.global	__aeabi_uidiv
 6923              		.global	__aeabi_i2f
 6924              		.global	__aeabi_fdiv
 6925              		.global	__aeabi_fmul
 6926              		.global	__aeabi_f2uiz
 6927              		.section	.text.atc,"ax",%progbits
 6928              		.align	2
 6929              		.global	atc
 6930              		.code	16
 6931              		.thumb_func
 6933              	atc:
 6934              	.LFB24:
1676:../Sources/TFC/TFC_CrystalClock.c **** 
1677:../Sources/TFC/TFC_CrystalClock.c **** 
1678:../Sources/TFC/TFC_CrystalClock.c **** 
1679:../Sources/TFC/TFC_CrystalClock.c **** unsigned char atc(unsigned char irc_select, int irc_freq, int mcg_out_freq)
1680:../Sources/TFC/TFC_CrystalClock.c **** {
 6935              		.loc 1 1680 0
 6936              		.cfi_startproc
 6937 0000 90B5     		push	{r4, r7, lr}
 6938              	.LCFI72:
 6939              		.cfi_def_cfa_offset 12
 6940              		.cfi_offset 4, -12
 6941              		.cfi_offset 7, -8
 6942              		.cfi_offset 14, -4
 6943 0002 8BB0     		sub	sp, sp, #44
 6944              	.LCFI73:
 6945              		.cfi_def_cfa_offset 56
 6946 0004 00AF     		add	r7, sp, #0
 6947              	.LCFI74:
 6948              		.cfi_def_cfa_register 7
 6949 0006 B960     		str	r1, [r7, #8]
 6950 0008 7A60     		str	r2, [r7, #4]
 6951 000a 3B1C     		mov	r3, r7
 6952 000c 0F33     		add	r3, r3, #15
 6953 000e 021C     		add	r2, r0, #0
 6954 0010 1A70     		strb	r2, [r3]
1681:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char mcg_mode;
1682:../Sources/TFC/TFC_CrystalClock.c ****   unsigned short atcv;
1683:../Sources/TFC/TFC_CrystalClock.c ****   int bus_clock_freq;
1684:../Sources/TFC/TFC_CrystalClock.c ****   int  bus_clk_div_val;
1685:../Sources/TFC/TFC_CrystalClock.c ****   int orig_div;
1686:../Sources/TFC/TFC_CrystalClock.c ****   int temp_reg;
1687:../Sources/TFC/TFC_CrystalClock.c ****   
1688:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select > 0) // force irc to 1 if greater than 0
 6955              		.loc 1 1688 0
 6956 0012 3B1C     		mov	r3, r7
 6957 0014 0F33     		add	r3, r3, #15
 6958 0016 1B78     		ldrb	r3, [r3]
 6959 0018 002B     		cmp	r3, #0
 6960 001a 03D0     		beq	.L542
1689:../Sources/TFC/TFC_CrystalClock.c ****   {
1690:../Sources/TFC/TFC_CrystalClock.c ****     irc_select = 1;
 6961              		.loc 1 1690 0
 6962 001c 3B1C     		mov	r3, r7
 6963 001e 0F33     		add	r3, r3, #15
 6964 0020 0122     		mov	r2, #1
 6965 0022 1A70     		strb	r2, [r3]
 6966              	.L542:
1691:../Sources/TFC/TFC_CrystalClock.c ****   }
1692:../Sources/TFC/TFC_CrystalClock.c ****   
1693:../Sources/TFC/TFC_CrystalClock.c ****   mcg_mode = what_mcg_mode(); // get present MCG mode
 6967              		.loc 1 1693 0
 6968 0024 3C1C     		mov	r4, r7
 6969 0026 2534     		add	r4, r4, #37
 6970 0028 FFF7FEFF 		bl	what_mcg_mode
 6971 002c 031C     		mov	r3, r0
 6972 002e 2370     		strb	r3, [r4]
1694:../Sources/TFC/TFC_CrystalClock.c ****   if ((mcg_mode != PEE) && (mcg_mode != PBE) && (mcg_mode != FBE))
 6973              		.loc 1 1694 0
 6974 0030 3B1C     		mov	r3, r7
 6975 0032 2533     		add	r3, r3, #37
 6976 0034 1B78     		ldrb	r3, [r3]
 6977 0036 082B     		cmp	r3, #8
 6978 0038 0BD0     		beq	.L543
 6979              		.loc 1 1694 0 is_stmt 0
 6980 003a 3B1C     		mov	r3, r7
 6981 003c 2533     		add	r3, r3, #37
 6982 003e 1B78     		ldrb	r3, [r3]
 6983 0040 072B     		cmp	r3, #7
 6984 0042 06D0     		beq	.L543
 6985 0044 3B1C     		mov	r3, r7
 6986 0046 2533     		add	r3, r3, #37
 6987 0048 1B78     		ldrb	r3, [r3]
 6988 004a 052B     		cmp	r3, #5
 6989 004c 01D0     		beq	.L543
1695:../Sources/TFC/TFC_CrystalClock.c ****   {
1696:../Sources/TFC/TFC_CrystalClock.c ****     return 1; // return error code if not in PEE, PBE or FBE modes
 6990              		.loc 1 1696 0 is_stmt 1
 6991 004e 0123     		mov	r3, #1
 6992 0050 11E1     		b	.L544
 6993              	.L543:
1697:../Sources/TFC/TFC_CrystalClock.c ****   }
1698:../Sources/TFC/TFC_CrystalClock.c ****   
1699:../Sources/TFC/TFC_CrystalClock.c ****   orig_div = SIM_CLKDIV1; //store present clock divider values
 6994              		.loc 1 1699 0
 6995 0052 8B4A     		ldr	r2, .L559
 6996 0054 8B4B     		ldr	r3, .L559+4
 6997 0056 D358     		ldr	r3, [r2, r3]
 6998 0058 3B62     		str	r3, [r7, #32]
1700:../Sources/TFC/TFC_CrystalClock.c ****   
1701:../Sources/TFC/TFC_CrystalClock.c ****   bus_clk_div_val = mcg_out_freq / 16000000; // calculate bus clock divider to generate fastest all
 6999              		.loc 1 1701 0
 7000 005a 7B68     		ldr	r3, [r7, #4]
 7001 005c 181C     		mov	r0, r3
 7002 005e 8A49     		ldr	r1, .L559+8
 7003 0060 FFF7FEFF 		bl	__aeabi_idiv
 7004 0064 031C     		mov	r3, r0
 7005 0066 FB61     		str	r3, [r7, #28]
1702:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = SIM_CLKDIV1;
 7006              		.loc 1 1702 0
 7007 0068 854A     		ldr	r2, .L559
 7008 006a 864B     		ldr	r3, .L559+4
 7009 006c D358     		ldr	r3, [r2, r3]
 7010 006e BB61     		str	r3, [r7, #24]
1703:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~SIM_CLKDIV1_OUTDIV4_MASK; // clear dividers except core
 7011              		.loc 1 1703 0
 7012 0070 BA69     		ldr	r2, [r7, #24]
 7013 0072 864B     		ldr	r3, .L559+12
 7014 0074 1340     		and	r3, r2
 7015 0076 BB61     		str	r3, [r7, #24]
1704:../Sources/TFC/TFC_CrystalClock.c ****   // set all bus and flash dividers to same value to ensure clocking restrictions are met
1705:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= SIM_CLKDIV1_OUTDIV4(bus_clk_div_val);
 7016              		.loc 1 1705 0
 7017 0078 FB69     		ldr	r3, [r7, #28]
 7018 007a 1A04     		lsl	r2, r3, #16
 7019 007c E023     		mov	r3, #224
 7020 007e DB02     		lsl	r3, r3, #11
 7021 0080 1A40     		and	r2, r3
 7022 0082 BB69     		ldr	r3, [r7, #24]
 7023 0084 1343     		orr	r3, r2
 7024 0086 BB61     		str	r3, [r7, #24]
1706:../Sources/TFC/TFC_CrystalClock.c ****   SIM_CLKDIV1 = temp_reg; // set actual dividers
 7025              		.loc 1 1706 0
 7026 0088 7D4A     		ldr	r2, .L559
 7027 008a B969     		ldr	r1, [r7, #24]
 7028 008c 7D4B     		ldr	r3, .L559+4
 7029 008e D150     		str	r1, [r2, r3]
1707:../Sources/TFC/TFC_CrystalClock.c ****   
1708:../Sources/TFC/TFC_CrystalClock.c ****   bus_clock_freq = mcg_out_freq / (((SIM_CLKDIV1) >> 16)+ 1);//For KL25, flash and bus use the same
 7030              		.loc 1 1708 0
 7031 0090 7A68     		ldr	r2, [r7, #4]
 7032 0092 7B49     		ldr	r1, .L559
 7033 0094 7B4B     		ldr	r3, .L559+4
 7034 0096 CB58     		ldr	r3, [r1, r3]
 7035 0098 1B0C     		lsr	r3, r3, #16
 7036 009a 0133     		add	r3, r3, #1
 7037 009c 101C     		mov	r0, r2
 7038 009e 191C     		mov	r1, r3
 7039 00a0 FFF7FEFF 		bl	__aeabi_uidiv
 7040 00a4 031C     		mov	r3, r0
 7041 00a6 7B61     		str	r3, [r7, #20]
1709:../Sources/TFC/TFC_CrystalClock.c ****   if ((bus_clock_freq < 8000000) || (bus_clock_freq > 16000000))
 7042              		.loc 1 1709 0
 7043 00a8 7A69     		ldr	r2, [r7, #20]
 7044 00aa 794B     		ldr	r3, .L559+16
 7045 00ac 9A42     		cmp	r2, r3
 7046 00ae 03DD     		ble	.L545
 7047              		.loc 1 1709 0 is_stmt 0
 7048 00b0 7A69     		ldr	r2, [r7, #20]
 7049 00b2 754B     		ldr	r3, .L559+8
 7050 00b4 9A42     		cmp	r2, r3
 7051 00b6 05DD     		ble	.L546
 7052              	.L545:
1710:../Sources/TFC/TFC_CrystalClock.c ****   {
1711:../Sources/TFC/TFC_CrystalClock.c ****     SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7053              		.loc 1 1711 0 is_stmt 1
 7054 00b8 714A     		ldr	r2, .L559
 7055 00ba 396A     		ldr	r1, [r7, #32]
 7056 00bc 714B     		ldr	r3, .L559+4
 7057 00be D150     		str	r1, [r2, r3]
1712:../Sources/TFC/TFC_CrystalClock.c ****     return 3; // error, bus clock frequency is not within 8MHz to 16MHz
 7058              		.loc 1 1712 0
 7059 00c0 0323     		mov	r3, #3
 7060 00c2 D8E0     		b	.L544
 7061              	.L546:
1713:../Sources/TFC/TFC_CrystalClock.c ****   }
1714:../Sources/TFC/TFC_CrystalClock.c ****                 
1715:../Sources/TFC/TFC_CrystalClock.c ****   if(!irc_select) //determine if slow or fast IRC to be trimmed
 7062              		.loc 1 1715 0
 7063 00c4 3B1C     		mov	r3, r7
 7064 00c6 0F33     		add	r3, r3, #15
 7065 00c8 1B78     		ldrb	r3, [r3]
 7066 00ca 002B     		cmp	r3, #0
 7067 00cc 13D1     		bne	.L547
1716:../Sources/TFC/TFC_CrystalClock.c ****   {
1717:../Sources/TFC/TFC_CrystalClock.c ****     if (irc_freq < 31250) // check frequency is above min spec.
 7068              		.loc 1 1717 0
 7069 00ce BA68     		ldr	r2, [r7, #8]
 7070 00d0 704B     		ldr	r3, .L559+20
 7071 00d2 9A42     		cmp	r2, r3
 7072 00d4 05DC     		bgt	.L548
1718:../Sources/TFC/TFC_CrystalClock.c ****     {
1719:../Sources/TFC/TFC_CrystalClock.c ****       SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7073              		.loc 1 1719 0
 7074 00d6 6A4A     		ldr	r2, .L559
 7075 00d8 396A     		ldr	r1, [r7, #32]
 7076 00da 6A4B     		ldr	r3, .L559+4
 7077 00dc D150     		str	r1, [r2, r3]
1720:../Sources/TFC/TFC_CrystalClock.c ****       return 4;
 7078              		.loc 1 1720 0
 7079 00de 0423     		mov	r3, #4
 7080 00e0 C9E0     		b	.L544
 7081              	.L548:
1721:../Sources/TFC/TFC_CrystalClock.c ****     }
1722:../Sources/TFC/TFC_CrystalClock.c ****     if (irc_freq > 39062) // check frequency is below max spec.
 7082              		.loc 1 1722 0
 7083 00e2 BA68     		ldr	r2, [r7, #8]
 7084 00e4 6C4B     		ldr	r3, .L559+24
 7085 00e6 9A42     		cmp	r2, r3
 7086 00e8 19DD     		ble	.L549
1723:../Sources/TFC/TFC_CrystalClock.c ****     {
1724:../Sources/TFC/TFC_CrystalClock.c ****       SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7087              		.loc 1 1724 0
 7088 00ea 654A     		ldr	r2, .L559
 7089 00ec 396A     		ldr	r1, [r7, #32]
 7090 00ee 654B     		ldr	r3, .L559+4
 7091 00f0 D150     		str	r1, [r2, r3]
1725:../Sources/TFC/TFC_CrystalClock.c ****       return 5;
 7092              		.loc 1 1725 0
 7093 00f2 0523     		mov	r3, #5
 7094 00f4 BFE0     		b	.L544
 7095              	.L547:
1726:../Sources/TFC/TFC_CrystalClock.c ****     }         
1727:../Sources/TFC/TFC_CrystalClock.c ****   }
1728:../Sources/TFC/TFC_CrystalClock.c ****   else
1729:../Sources/TFC/TFC_CrystalClock.c ****   {
1730:../Sources/TFC/TFC_CrystalClock.c ****     if (irc_freq < 3000000) // check frequency is above min spec.
 7096              		.loc 1 1730 0
 7097 00f6 BA68     		ldr	r2, [r7, #8]
 7098 00f8 684B     		ldr	r3, .L559+28
 7099 00fa 9A42     		cmp	r2, r3
 7100 00fc 05DC     		bgt	.L550
1731:../Sources/TFC/TFC_CrystalClock.c ****     {
1732:../Sources/TFC/TFC_CrystalClock.c ****       SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7101              		.loc 1 1732 0
 7102 00fe 604A     		ldr	r2, .L559
 7103 0100 396A     		ldr	r1, [r7, #32]
 7104 0102 604B     		ldr	r3, .L559+4
 7105 0104 D150     		str	r1, [r2, r3]
1733:../Sources/TFC/TFC_CrystalClock.c ****       return 6;
 7106              		.loc 1 1733 0
 7107 0106 0623     		mov	r3, #6
 7108 0108 B5E0     		b	.L544
 7109              	.L550:
1734:../Sources/TFC/TFC_CrystalClock.c ****     }
1735:../Sources/TFC/TFC_CrystalClock.c ****     if (irc_freq > 5000000) // check frequency is below max spec.
 7110              		.loc 1 1735 0
 7111 010a BA68     		ldr	r2, [r7, #8]
 7112 010c 644B     		ldr	r3, .L559+32
 7113 010e 9A42     		cmp	r2, r3
 7114 0110 05DD     		ble	.L549
1736:../Sources/TFC/TFC_CrystalClock.c ****     {
1737:../Sources/TFC/TFC_CrystalClock.c ****       SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7115              		.loc 1 1737 0
 7116 0112 5B4A     		ldr	r2, .L559
 7117 0114 396A     		ldr	r1, [r7, #32]
 7118 0116 5B4B     		ldr	r3, .L559+4
 7119 0118 D150     		str	r1, [r2, r3]
1738:../Sources/TFC/TFC_CrystalClock.c ****       return 7;
 7120              		.loc 1 1738 0
 7121 011a 0723     		mov	r3, #7
 7122 011c ABE0     		b	.L544
 7123              	.L549:
1739:../Sources/TFC/TFC_CrystalClock.c ****     }            
1740:../Sources/TFC/TFC_CrystalClock.c ****   } // if
1741:../Sources/TFC/TFC_CrystalClock.c ****         
1742:../Sources/TFC/TFC_CrystalClock.c **** // Set up autocal registers, must use floating point calculation
1743:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select) 
 7124              		.loc 1 1743 0
 7125 011e 3B1C     		mov	r3, r7
 7126 0120 0F33     		add	r3, r3, #15
 7127 0122 1B78     		ldrb	r3, [r3]
 7128 0124 002B     		cmp	r3, #0
 7129 0126 1FD0     		beq	.L551
1744:../Sources/TFC/TFC_CrystalClock.c ****     atcv = (unsigned short)(128.0f * (21.0f * (bus_clock_freq / (float)irc_freq)));
 7130              		.loc 1 1744 0
 7131 0128 7869     		ldr	r0, [r7, #20]
 7132 012a FFF7FEFF 		bl	__aeabi_i2f
 7133 012e 041C     		add	r4, r0, #0
 7134 0130 B868     		ldr	r0, [r7, #8]
 7135 0132 FFF7FEFF 		bl	__aeabi_i2f
 7136 0136 031C     		add	r3, r0, #0
 7137 0138 201C     		add	r0, r4, #0
 7138 013a 191C     		add	r1, r3, #0
 7139 013c FFF7FEFF 		bl	__aeabi_fdiv
 7140 0140 031C     		add	r3, r0, #0
 7141 0142 181C     		add	r0, r3, #0
 7142 0144 5749     		ldr	r1, .L559+36
 7143 0146 FFF7FEFF 		bl	__aeabi_fmul
 7144 014a 031C     		add	r3, r0, #0
 7145 014c 181C     		add	r0, r3, #0
 7146 014e 8621     		mov	r1, #134
 7147 0150 C905     		lsl	r1, r1, #23
 7148 0152 FFF7FEFF 		bl	__aeabi_fmul
 7149 0156 031C     		add	r3, r0, #0
 7150 0158 3C1C     		mov	r4, r7
 7151 015a 2634     		add	r4, r4, #38
 7152 015c 181C     		add	r0, r3, #0
 7153 015e FFF7FEFF 		bl	__aeabi_f2uiz
 7154 0162 031C     		mov	r3, r0
 7155 0164 2380     		strh	r3, [r4]
 7156 0166 18E0     		b	.L552
 7157              	.L551:
1745:../Sources/TFC/TFC_CrystalClock.c ****   else
1746:../Sources/TFC/TFC_CrystalClock.c ****     atcv = (unsigned short)(21.0f * (bus_clock_freq / (float)irc_freq));
 7158              		.loc 1 1746 0
 7159 0168 7869     		ldr	r0, [r7, #20]
 7160 016a FFF7FEFF 		bl	__aeabi_i2f
 7161 016e 041C     		add	r4, r0, #0
 7162 0170 B868     		ldr	r0, [r7, #8]
 7163 0172 FFF7FEFF 		bl	__aeabi_i2f
 7164 0176 031C     		add	r3, r0, #0
 7165 0178 201C     		add	r0, r4, #0
 7166 017a 191C     		add	r1, r3, #0
 7167 017c FFF7FEFF 		bl	__aeabi_fdiv
 7168 0180 031C     		add	r3, r0, #0
 7169 0182 181C     		add	r0, r3, #0
 7170 0184 4749     		ldr	r1, .L559+36
 7171 0186 FFF7FEFF 		bl	__aeabi_fmul
 7172 018a 031C     		add	r3, r0, #0
 7173 018c 3C1C     		mov	r4, r7
 7174 018e 2634     		add	r4, r4, #38
 7175 0190 181C     		add	r0, r3, #0
 7176 0192 FFF7FEFF 		bl	__aeabi_f2uiz
 7177 0196 031C     		mov	r3, r0
 7178 0198 2380     		strh	r3, [r4]
 7179              	.L552:
1747:../Sources/TFC/TFC_CrystalClock.c ****         
1748:../Sources/TFC/TFC_CrystalClock.c ****   MCG_ATCVL = (atcv & 0xFF); //Set ATCVL to lower 8 bits of count value
 7180              		.loc 1 1748 0
 7181 019a 434B     		ldr	r3, .L559+40
 7182 019c 3A1C     		mov	r2, r7
 7183 019e 2632     		add	r2, r2, #38
 7184 01a0 1288     		ldrh	r2, [r2]
 7185 01a2 D2B2     		uxtb	r2, r2
 7186 01a4 DA72     		strb	r2, [r3, #11]
1749:../Sources/TFC/TFC_CrystalClock.c ****   MCG_ATCVH = ((atcv & 0xFF00) >> 8); // Set ATCVH to upper 8 bits of count value
 7187              		.loc 1 1749 0
 7188 01a6 404B     		ldr	r3, .L559+40
 7189 01a8 3A1C     		mov	r2, r7
 7190 01aa 2632     		add	r2, r2, #38
 7191 01ac 1288     		ldrh	r2, [r2]
 7192 01ae 120A     		lsr	r2, r2, #8
 7193 01b0 92B2     		uxth	r2, r2
 7194 01b2 D2B2     		uxtb	r2, r2
 7195 01b4 9A72     		strb	r2, [r3, #10]
1750:../Sources/TFC/TFC_CrystalClock.c **** 
1751:../Sources/TFC/TFC_CrystalClock.c **** // Enable autocal
1752:../Sources/TFC/TFC_CrystalClock.c ****   MCG_SC &= ~(MCG_SC_ATME_MASK | MCG_SC_ATMS_MASK |MCG_SC_ATMF_MASK); // clear auto trim settings
 7196              		.loc 1 1752 0
 7197 01b6 3C4B     		ldr	r3, .L559+40
 7198 01b8 3B4A     		ldr	r2, .L559+40
 7199 01ba 127A     		ldrb	r2, [r2, #8]
 7200 01bc D1B2     		uxtb	r1, r2
 7201 01be 1F22     		mov	r2, #31
 7202 01c0 0A40     		and	r2, r1
 7203 01c2 D2B2     		uxtb	r2, r2
 7204 01c4 1A72     		strb	r2, [r3, #8]
1753:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = (MCG_SC_ATME_MASK | (irc_select << MCG_SC_ATMS_SHIFT)); //Select IRC to trim and enabl
 7205              		.loc 1 1753 0
 7206 01c6 3B1C     		mov	r3, r7
 7207 01c8 0F33     		add	r3, r3, #15
 7208 01ca 1B78     		ldrb	r3, [r3]
 7209 01cc 9B01     		lsl	r3, r3, #6
 7210 01ce 8022     		mov	r2, #128
 7211 01d0 1343     		orr	r3, r2
 7212 01d2 BB61     		str	r3, [r7, #24]
1754:../Sources/TFC/TFC_CrystalClock.c ****   MCG_SC |= temp_reg;
 7213              		.loc 1 1754 0
 7214 01d4 344B     		ldr	r3, .L559+40
 7215 01d6 344A     		ldr	r2, .L559+40
 7216 01d8 127A     		ldrb	r2, [r2, #8]
 7217 01da D2B2     		uxtb	r2, r2
 7218 01dc D1B2     		uxtb	r1, r2
 7219 01de BA69     		ldr	r2, [r7, #24]
 7220 01e0 D2B2     		uxtb	r2, r2
 7221 01e2 0A43     		orr	r2, r1
 7222 01e4 D2B2     		uxtb	r2, r2
 7223 01e6 D2B2     		uxtb	r2, r2
 7224 01e8 1A72     		strb	r2, [r3, #8]
1755:../Sources/TFC/TFC_CrystalClock.c ****         
1756:../Sources/TFC/TFC_CrystalClock.c ****   while (MCG_SC & MCG_SC_ATME_MASK) {}; //poll for ATME bit to clear
 7225              		.loc 1 1756 0
 7226 01ea C046     		mov	r8, r8
 7227              	.L553:
 7228              		.loc 1 1756 0 is_stmt 0
 7229 01ec 2E4B     		ldr	r3, .L559+40
 7230 01ee 1B7A     		ldrb	r3, [r3, #8]
 7231 01f0 DBB2     		uxtb	r3, r3
 7232 01f2 DBB2     		uxtb	r3, r3
 7233 01f4 5BB2     		sxtb	r3, r3
 7234 01f6 002B     		cmp	r3, #0
 7235 01f8 F8DB     		blt	.L553
1757:../Sources/TFC/TFC_CrystalClock.c ****         
1758:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_SC & MCG_SC_ATMF_MASK) // check if error flag set
 7236              		.loc 1 1758 0 is_stmt 1
 7237 01fa 2B4B     		ldr	r3, .L559+40
 7238 01fc 1B7A     		ldrb	r3, [r3, #8]
 7239 01fe DBB2     		uxtb	r3, r3
 7240 0200 1A1C     		mov	r2, r3
 7241 0202 2023     		mov	r3, #32
 7242 0204 1340     		and	r3, r2
 7243 0206 05D0     		beq	.L554
1759:../Sources/TFC/TFC_CrystalClock.c ****   {
1760:../Sources/TFC/TFC_CrystalClock.c ****     SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7244              		.loc 1 1760 0
 7245 0208 1D4A     		ldr	r2, .L559
 7246 020a 396A     		ldr	r1, [r7, #32]
 7247 020c 1D4B     		ldr	r3, .L559+4
 7248 020e D150     		str	r1, [r2, r3]
1761:../Sources/TFC/TFC_CrystalClock.c ****     return 8;
 7249              		.loc 1 1761 0
 7250 0210 0823     		mov	r3, #8
 7251 0212 30E0     		b	.L544
 7252              	.L554:
1762:../Sources/TFC/TFC_CrystalClock.c ****   } 
1763:../Sources/TFC/TFC_CrystalClock.c ****   else 
1764:../Sources/TFC/TFC_CrystalClock.c ****   {      
1765:../Sources/TFC/TFC_CrystalClock.c ****     if (!irc_select)
 7253              		.loc 1 1765 0
 7254 0214 3B1C     		mov	r3, r7
 7255 0216 0F33     		add	r3, r3, #15
 7256 0218 1B78     		ldrb	r3, [r3]
 7257 021a 002B     		cmp	r3, #0
 7258 021c 0FD1     		bne	.L555
1766:../Sources/TFC/TFC_CrystalClock.c ****     {
1767:../Sources/TFC/TFC_CrystalClock.c ****       if ((MCG_C3 == 0xFF) || (MCG_C3 == 0))
 7259              		.loc 1 1767 0
 7260 021e 224B     		ldr	r3, .L559+40
 7261 0220 9B78     		ldrb	r3, [r3, #2]
 7262 0222 DBB2     		uxtb	r3, r3
 7263 0224 FF2B     		cmp	r3, #255
 7264 0226 04D0     		beq	.L556
 7265              		.loc 1 1767 0 is_stmt 0
 7266 0228 1F4B     		ldr	r3, .L559+40
 7267 022a 9B78     		ldrb	r3, [r3, #2]
 7268 022c DBB2     		uxtb	r3, r3
 7269 022e 002B     		cmp	r3, #0
 7270 0230 1CD1     		bne	.L557
 7271              	.L556:
1768:../Sources/TFC/TFC_CrystalClock.c ****       {
1769:../Sources/TFC/TFC_CrystalClock.c ****         SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7272              		.loc 1 1769 0 is_stmt 1
 7273 0232 134A     		ldr	r2, .L559
 7274 0234 396A     		ldr	r1, [r7, #32]
 7275 0236 134B     		ldr	r3, .L559+4
 7276 0238 D150     		str	r1, [r2, r3]
1770:../Sources/TFC/TFC_CrystalClock.c ****         return 9;
 7277              		.loc 1 1770 0
 7278 023a 0923     		mov	r3, #9
 7279 023c 1BE0     		b	.L544
 7280              	.L555:
1771:../Sources/TFC/TFC_CrystalClock.c ****       }
1772:../Sources/TFC/TFC_CrystalClock.c ****     }
1773:../Sources/TFC/TFC_CrystalClock.c ****     else
1774:../Sources/TFC/TFC_CrystalClock.c ****     {
1775:../Sources/TFC/TFC_CrystalClock.c ****       if ((((MCG_C4 & MCG_C4_FCTRIM_MASK) >> MCG_C4_FCTRIM_SHIFT) == 0xF) ||
 7281              		.loc 1 1775 0
 7282 023e 1A4B     		ldr	r3, .L559+40
 7283 0240 DB78     		ldrb	r3, [r3, #3]
 7284 0242 DBB2     		uxtb	r3, r3
 7285 0244 1A1C     		mov	r2, r3
 7286 0246 1E23     		mov	r3, #30
 7287 0248 1340     		and	r3, r2
 7288 024a 5B08     		lsr	r3, r3, #1
 7289 024c 0F2B     		cmp	r3, #15
 7290 024e 07D0     		beq	.L558
1776:../Sources/TFC/TFC_CrystalClock.c ****           (((MCG_C4 & MCG_C4_FCTRIM_MASK) >> MCG_C4_FCTRIM_SHIFT) == 0))
 7291              		.loc 1 1776 0
 7292 0250 154B     		ldr	r3, .L559+40
 7293 0252 DB78     		ldrb	r3, [r3, #3]
 7294 0254 DBB2     		uxtb	r3, r3
 7295 0256 1A1C     		mov	r2, r3
 7296 0258 1E23     		mov	r3, #30
 7297 025a 1340     		and	r3, r2
 7298 025c 5B08     		lsr	r3, r3, #1
1775:../Sources/TFC/TFC_CrystalClock.c ****       if ((((MCG_C4 & MCG_C4_FCTRIM_MASK) >> MCG_C4_FCTRIM_SHIFT) == 0xF) ||
 7299              		.loc 1 1775 0
 7300 025e 05D1     		bne	.L557
 7301              	.L558:
1777:../Sources/TFC/TFC_CrystalClock.c ****       {
1778:../Sources/TFC/TFC_CrystalClock.c ****         SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7302              		.loc 1 1778 0
 7303 0260 074A     		ldr	r2, .L559
 7304 0262 396A     		ldr	r1, [r7, #32]
 7305 0264 074B     		ldr	r3, .L559+4
 7306 0266 D150     		str	r1, [r2, r3]
1779:../Sources/TFC/TFC_CrystalClock.c ****         return 10;
 7307              		.loc 1 1779 0
 7308 0268 0A23     		mov	r3, #10
 7309 026a 04E0     		b	.L544
 7310              	.L557:
1780:../Sources/TFC/TFC_CrystalClock.c ****       }
1781:../Sources/TFC/TFC_CrystalClock.c ****     }
1782:../Sources/TFC/TFC_CrystalClock.c ****   }
1783:../Sources/TFC/TFC_CrystalClock.c ****   SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7311              		.loc 1 1783 0
 7312 026c 044A     		ldr	r2, .L559
 7313 026e 396A     		ldr	r1, [r7, #32]
 7314 0270 044B     		ldr	r3, .L559+4
 7315 0272 D150     		str	r1, [r2, r3]
1784:../Sources/TFC/TFC_CrystalClock.c ****   return 0;
 7316              		.loc 1 1784 0
 7317 0274 0023     		mov	r3, #0
 7318              	.L544:
1785:../Sources/TFC/TFC_CrystalClock.c **** }// atc
 7319              		.loc 1 1785 0
 7320 0276 181C     		mov	r0, r3
 7321 0278 BD46     		mov	sp, r7
 7322 027a 0BB0     		add	sp, sp, #44
 7323              		@ sp needed for prologue
 7324 027c 90BD     		pop	{r4, r7, pc}
 7325              	.L560:
 7326 027e C046     		.align	2
 7327              	.L559:
 7328 0280 00700440 		.word	1074032640
 7329 0284 44100000 		.word	4164
 7330 0288 0024F400 		.word	16000000
 7331 028c FFFFF8FF 		.word	-458753
 7332 0290 FF117A00 		.word	7999999
 7333 0294 117A0000 		.word	31249
 7334 0298 96980000 		.word	39062
 7335 029c BFC62D00 		.word	2999999
 7336 02a0 404B4C00 		.word	5000000
 7337 02a4 0000A841 		.word	1101529088
 7338 02a8 00400640 		.word	1074151424
 7339              		.cfi_endproc
 7340              	.LFE24:
 7342              		.section	.text.fll_freq,"ax",%progbits
 7343              		.align	2
 7344              		.global	fll_freq
 7345              		.code	16
 7346              		.thumb_func
 7348              	fll_freq:
 7349              	.LFB25:
1786:../Sources/TFC/TFC_CrystalClock.c **** 
1787:../Sources/TFC/TFC_CrystalClock.c **** 
1788:../Sources/TFC/TFC_CrystalClock.c **** 
1789:../Sources/TFC/TFC_CrystalClock.c **** 
1790:../Sources/TFC/TFC_CrystalClock.c **** int fll_freq(int fll_ref)
1791:../Sources/TFC/TFC_CrystalClock.c **** {
 7350              		.loc 1 1791 0
 7351              		.cfi_startproc
 7352 0000 80B5     		push	{r7, lr}
 7353              	.LCFI75:
 7354              		.cfi_def_cfa_offset 8
 7355              		.cfi_offset 7, -8
 7356              		.cfi_offset 14, -4
 7357 0002 84B0     		sub	sp, sp, #16
 7358              	.LCFI76:
 7359              		.cfi_def_cfa_offset 24
 7360 0004 00AF     		add	r7, sp, #0
 7361              	.LCFI77:
 7362              		.cfi_def_cfa_register 7
 7363 0006 7860     		str	r0, [r7, #4]
1792:../Sources/TFC/TFC_CrystalClock.c ****   int fll_freq_hz;
1793:../Sources/TFC/TFC_CrystalClock.c ****   
1794:../Sources/TFC/TFC_CrystalClock.c ****   // Check that only allowed ranges have been selected
1795:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_C4 & MCG_C4_DRST_DRS_MASK) >> MCG_C4_DRST_DRS_SHIFT) > 0x1) 
 7364              		.loc 1 1795 0
 7365 0008 684B     		ldr	r3, .L599
 7366 000a DB78     		ldrb	r3, [r3, #3]
 7367 000c DBB2     		uxtb	r3, r3
 7368 000e 1A1C     		mov	r2, r3
 7369 0010 6023     		mov	r3, #96
 7370 0012 1340     		and	r3, r2
 7371 0014 5B09     		lsr	r3, r3, #5
 7372 0016 012B     		cmp	r3, #1
 7373 0018 01D9     		bls	.L562
1796:../Sources/TFC/TFC_CrystalClock.c ****   {
1797:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3B; // return error code if DRS range 2 or 3 selected
 7374              		.loc 1 1797 0
 7375 001a 3B23     		mov	r3, #59
 7376 001c C2E0     		b	.L563
 7377              	.L562:
1798:../Sources/TFC/TFC_CrystalClock.c ****   }
1799:../Sources/TFC/TFC_CrystalClock.c ****   
1800:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_C4 & MCG_C4_DMX32_MASK) // if DMX32 set
 7378              		.loc 1 1800 0
 7379 001e 634B     		ldr	r3, .L599
 7380 0020 DB78     		ldrb	r3, [r3, #3]
 7381 0022 DBB2     		uxtb	r3, r3
 7382 0024 DBB2     		uxtb	r3, r3
 7383 0026 5BB2     		sxtb	r3, r3
 7384 0028 002B     		cmp	r3, #0
 7385 002a 54DA     		bge	.L564
1801:../Sources/TFC/TFC_CrystalClock.c ****   {
1802:../Sources/TFC/TFC_CrystalClock.c ****     switch ((MCG_C4 & MCG_C4_DRST_DRS_MASK) >> MCG_C4_DRST_DRS_SHIFT) // determine multiplier based
 7386              		.loc 1 1802 0
 7387 002c 5F4B     		ldr	r3, .L599
 7388 002e DB78     		ldrb	r3, [r3, #3]
 7389 0030 DBB2     		uxtb	r3, r3
 7390 0032 1A1C     		mov	r2, r3
 7391 0034 6023     		mov	r3, #96
 7392 0036 1340     		and	r3, r2
 7393 0038 5B09     		lsr	r3, r3, #5
 7394 003a 012B     		cmp	r3, #1
 7395 003c 17D0     		beq	.L567
 7396 003e 04D3     		bcc	.L566
 7397 0040 022B     		cmp	r3, #2
 7398 0042 26D0     		beq	.L568
 7399 0044 032B     		cmp	r3, #3
 7400 0046 35D0     		beq	.L569
 7401 0048 ABE0     		b	.L578
 7402              	.L566:
1803:../Sources/TFC/TFC_CrystalClock.c ****     {
1804:../Sources/TFC/TFC_CrystalClock.c ****     case 0:
1805:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 732);
 7403              		.loc 1 1805 0
 7404 004a 7B68     		ldr	r3, [r7, #4]
 7405 004c B722     		mov	r2, #183
 7406 004e 9200     		lsl	r2, r2, #2
 7407 0050 5343     		mul	r3, r2
 7408 0052 FB60     		str	r3, [r7, #12]
1806:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 20000000) {return 0x33;}
 7409              		.loc 1 1806 0
 7410 0054 FA68     		ldr	r2, [r7, #12]
 7411 0056 564B     		ldr	r3, .L599+4
 7412 0058 9A42     		cmp	r2, r3
 7413 005a 01DC     		bgt	.L570
 7414              		.loc 1 1806 0 is_stmt 0
 7415 005c 3323     		mov	r3, #51
 7416 005e A1E0     		b	.L563
 7417              	.L570:
1807:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 25000000) {return 0x34;}
 7418              		.loc 1 1807 0 is_stmt 1
 7419 0060 FA68     		ldr	r2, [r7, #12]
 7420 0062 544B     		ldr	r3, .L599+8
 7421 0064 9A42     		cmp	r2, r3
 7422 0066 00DC     		bgt	.LCB7169
 7423 0068 8CE0     		b	.L591	@long jump
 7424              	.LCB7169:
 7425              		.loc 1 1807 0 is_stmt 0
 7426 006a 3423     		mov	r3, #52
 7427 006c 9AE0     		b	.L563
 7428              	.L567:
1808:../Sources/TFC/TFC_CrystalClock.c ****       break;
1809:../Sources/TFC/TFC_CrystalClock.c ****     case 1:
1810:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 1464);
 7429              		.loc 1 1810 0 is_stmt 1
 7430 006e 7B68     		ldr	r3, [r7, #4]
 7431 0070 B722     		mov	r2, #183
 7432 0072 D200     		lsl	r2, r2, #3
 7433 0074 5343     		mul	r3, r2
 7434 0076 FB60     		str	r3, [r7, #12]
1811:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 40000000) {return 0x35;}
 7435              		.loc 1 1811 0
 7436 0078 FA68     		ldr	r2, [r7, #12]
 7437 007a 4F4B     		ldr	r3, .L599+12
 7438 007c 9A42     		cmp	r2, r3
 7439 007e 01DC     		bgt	.L572
 7440              		.loc 1 1811 0 is_stmt 0
 7441 0080 3523     		mov	r3, #53
 7442 0082 8FE0     		b	.L563
 7443              	.L572:
1812:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 50000000) {return 0x36;}
 7444              		.loc 1 1812 0 is_stmt 1
 7445 0084 FA68     		ldr	r2, [r7, #12]
 7446 0086 4D4B     		ldr	r3, .L599+16
 7447 0088 9A42     		cmp	r2, r3
 7448 008a 00DC     		bgt	.LCB7192
 7449 008c 7CE0     		b	.L592	@long jump
 7450              	.LCB7192:
 7451              		.loc 1 1812 0 is_stmt 0
 7452 008e 3623     		mov	r3, #54
 7453 0090 88E0     		b	.L563
 7454              	.L568:
1813:../Sources/TFC/TFC_CrystalClock.c ****       break;
1814:../Sources/TFC/TFC_CrystalClock.c ****     case 2:
1815:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 2197);
 7455              		.loc 1 1815 0 is_stmt 1
 7456 0092 7B68     		ldr	r3, [r7, #4]
 7457 0094 4A4A     		ldr	r2, .L599+20
 7458 0096 5343     		mul	r3, r2
 7459 0098 FB60     		str	r3, [r7, #12]
1816:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 60000000) {return 0x37;}
 7460              		.loc 1 1816 0
 7461 009a FA68     		ldr	r2, [r7, #12]
 7462 009c 494B     		ldr	r3, .L599+24
 7463 009e 9A42     		cmp	r2, r3
 7464 00a0 01DC     		bgt	.L574
 7465              		.loc 1 1816 0 is_stmt 0
 7466 00a2 3723     		mov	r3, #55
 7467 00a4 7EE0     		b	.L563
 7468              	.L574:
1817:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 75000000) {return 0x38;}
 7469              		.loc 1 1817 0 is_stmt 1
 7470 00a6 FA68     		ldr	r2, [r7, #12]
 7471 00a8 474B     		ldr	r3, .L599+28
 7472 00aa 9A42     		cmp	r2, r3
 7473 00ac 00DC     		bgt	.LCB7214
 7474 00ae 6DE0     		b	.L593	@long jump
 7475              	.LCB7214:
 7476              		.loc 1 1817 0 is_stmt 0
 7477 00b0 3823     		mov	r3, #56
 7478 00b2 77E0     		b	.L563
 7479              	.L569:
1818:../Sources/TFC/TFC_CrystalClock.c ****       break;
1819:../Sources/TFC/TFC_CrystalClock.c ****     case 3:
1820:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 2929);
 7480              		.loc 1 1820 0 is_stmt 1
 7481 00b4 7B68     		ldr	r3, [r7, #4]
 7482 00b6 454A     		ldr	r2, .L599+32
 7483 00b8 5343     		mul	r3, r2
 7484 00ba FB60     		str	r3, [r7, #12]
1821:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 80000000) {return 0x39;}
 7485              		.loc 1 1821 0
 7486 00bc FA68     		ldr	r2, [r7, #12]
 7487 00be 444B     		ldr	r3, .L599+36
 7488 00c0 9A42     		cmp	r2, r3
 7489 00c2 01DC     		bgt	.L576
 7490              		.loc 1 1821 0 is_stmt 0
 7491 00c4 3923     		mov	r3, #57
 7492 00c6 6DE0     		b	.L563
 7493              	.L576:
1822:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 100000000) {return 0x3A;}
 7494              		.loc 1 1822 0 is_stmt 1
 7495 00c8 FA68     		ldr	r2, [r7, #12]
 7496 00ca 424B     		ldr	r3, .L599+40
 7497 00cc 9A42     		cmp	r2, r3
 7498 00ce 00DC     		bgt	.LCB7236
 7499 00d0 5EE0     		b	.L594	@long jump
 7500              	.LCB7236:
 7501              		.loc 1 1822 0 is_stmt 0
 7502 00d2 3A23     		mov	r3, #58
 7503 00d4 66E0     		b	.L563
 7504              	.L564:
1823:../Sources/TFC/TFC_CrystalClock.c ****       break;
1824:../Sources/TFC/TFC_CrystalClock.c ****     }
1825:../Sources/TFC/TFC_CrystalClock.c ****   }
1826:../Sources/TFC/TFC_CrystalClock.c ****   else // if DMX32 = 0
1827:../Sources/TFC/TFC_CrystalClock.c ****   {
1828:../Sources/TFC/TFC_CrystalClock.c ****     switch ((MCG_C4 & MCG_C4_DRST_DRS_MASK) >> MCG_C4_DRST_DRS_SHIFT) // determine multiplier based
 7505              		.loc 1 1828 0 is_stmt 1
 7506 00d6 354B     		ldr	r3, .L599
 7507 00d8 DB78     		ldrb	r3, [r3, #3]
 7508 00da DBB2     		uxtb	r3, r3
 7509 00dc 1A1C     		mov	r2, r3
 7510 00de 6023     		mov	r3, #96
 7511 00e0 1340     		and	r3, r2
 7512 00e2 5B09     		lsr	r3, r3, #5
 7513 00e4 012B     		cmp	r3, #1
 7514 00e6 17D0     		beq	.L580
 7515 00e8 04D3     		bcc	.L579
 7516 00ea 022B     		cmp	r3, #2
 7517 00ec 26D0     		beq	.L581
 7518 00ee 032B     		cmp	r3, #3
 7519 00f0 36D0     		beq	.L582
 7520 00f2 56E0     		b	.L578
 7521              	.L579:
1829:../Sources/TFC/TFC_CrystalClock.c ****     {
1830:../Sources/TFC/TFC_CrystalClock.c ****     case 0:
1831:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 640);
 7522              		.loc 1 1831 0
 7523 00f4 7A68     		ldr	r2, [r7, #4]
 7524 00f6 131C     		mov	r3, r2
 7525 00f8 9B00     		lsl	r3, r3, #2
 7526 00fa 9B18     		add	r3, r3, r2
 7527 00fc DB01     		lsl	r3, r3, #7
 7528 00fe FB60     		str	r3, [r7, #12]
1832:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 20000000) {return 0x33;}
 7529              		.loc 1 1832 0
 7530 0100 FA68     		ldr	r2, [r7, #12]
 7531 0102 2B4B     		ldr	r3, .L599+4
 7532 0104 9A42     		cmp	r2, r3
 7533 0106 01DC     		bgt	.L583
 7534              		.loc 1 1832 0 is_stmt 0
 7535 0108 3323     		mov	r3, #51
 7536 010a 4BE0     		b	.L563
 7537              	.L583:
1833:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 25000000) {return 0x34;}
 7538              		.loc 1 1833 0 is_stmt 1
 7539 010c FA68     		ldr	r2, [r7, #12]
 7540 010e 294B     		ldr	r3, .L599+8
 7541 0110 9A42     		cmp	r2, r3
 7542 0112 3FDD     		ble	.L595
 7543              		.loc 1 1833 0 is_stmt 0
 7544 0114 3423     		mov	r3, #52
 7545 0116 45E0     		b	.L563
 7546              	.L580:
1834:../Sources/TFC/TFC_CrystalClock.c ****       break;
1835:../Sources/TFC/TFC_CrystalClock.c ****     case 1:
1836:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 1280);
 7547              		.loc 1 1836 0 is_stmt 1
 7548 0118 7A68     		ldr	r2, [r7, #4]
 7549 011a 131C     		mov	r3, r2
 7550 011c 9B00     		lsl	r3, r3, #2
 7551 011e 9B18     		add	r3, r3, r2
 7552 0120 1B02     		lsl	r3, r3, #8
 7553 0122 FB60     		str	r3, [r7, #12]
1837:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 40000000) {return 0x35;}
 7554              		.loc 1 1837 0
 7555 0124 FA68     		ldr	r2, [r7, #12]
 7556 0126 244B     		ldr	r3, .L599+12
 7557 0128 9A42     		cmp	r2, r3
 7558 012a 01DC     		bgt	.L585
 7559              		.loc 1 1837 0 is_stmt 0
 7560 012c 3523     		mov	r3, #53
 7561 012e 39E0     		b	.L563
 7562              	.L585:
1838:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 50000000) {return 0x36;}
 7563              		.loc 1 1838 0 is_stmt 1
 7564 0130 FA68     		ldr	r2, [r7, #12]
 7565 0132 224B     		ldr	r3, .L599+16
 7566 0134 9A42     		cmp	r2, r3
 7567 0136 2FDD     		ble	.L596
 7568              		.loc 1 1838 0 is_stmt 0
 7569 0138 3623     		mov	r3, #54
 7570 013a 33E0     		b	.L563
 7571              	.L581:
1839:../Sources/TFC/TFC_CrystalClock.c ****       break;
1840:../Sources/TFC/TFC_CrystalClock.c ****     case 2:
1841:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 1920);
 7572              		.loc 1 1841 0 is_stmt 1
 7573 013c 7A68     		ldr	r2, [r7, #4]
 7574 013e 131C     		mov	r3, r2
 7575 0140 1B01     		lsl	r3, r3, #4
 7576 0142 9B1A     		sub	r3, r3, r2
 7577 0144 DB01     		lsl	r3, r3, #7
 7578 0146 FB60     		str	r3, [r7, #12]
1842:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 60000000) {return 0x37;}
 7579              		.loc 1 1842 0
 7580 0148 FA68     		ldr	r2, [r7, #12]
 7581 014a 1E4B     		ldr	r3, .L599+24
 7582 014c 9A42     		cmp	r2, r3
 7583 014e 01DC     		bgt	.L587
 7584              		.loc 1 1842 0 is_stmt 0
 7585 0150 3723     		mov	r3, #55
 7586 0152 27E0     		b	.L563
 7587              	.L587:
1843:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 75000000) {return 0x38;}
 7588              		.loc 1 1843 0 is_stmt 1
 7589 0154 FA68     		ldr	r2, [r7, #12]
 7590 0156 1C4B     		ldr	r3, .L599+28
 7591 0158 9A42     		cmp	r2, r3
 7592 015a 1FDD     		ble	.L597
 7593              		.loc 1 1843 0 is_stmt 0
 7594 015c 3823     		mov	r3, #56
 7595 015e 21E0     		b	.L563
 7596              	.L582:
1844:../Sources/TFC/TFC_CrystalClock.c ****       break;
1845:../Sources/TFC/TFC_CrystalClock.c ****     case 3:
1846:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 2560);
 7597              		.loc 1 1846 0 is_stmt 1
 7598 0160 7A68     		ldr	r2, [r7, #4]
 7599 0162 131C     		mov	r3, r2
 7600 0164 9B00     		lsl	r3, r3, #2
 7601 0166 9B18     		add	r3, r3, r2
 7602 0168 5B02     		lsl	r3, r3, #9
 7603 016a FB60     		str	r3, [r7, #12]
1847:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 80000000) {return 0x39;}
 7604              		.loc 1 1847 0
 7605 016c FA68     		ldr	r2, [r7, #12]
 7606 016e 184B     		ldr	r3, .L599+36
 7607 0170 9A42     		cmp	r2, r3
 7608 0172 01DC     		bgt	.L589
 7609              		.loc 1 1847 0 is_stmt 0
 7610 0174 3923     		mov	r3, #57
 7611 0176 15E0     		b	.L563
 7612              	.L589:
1848:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 100000000) {return 0x3A;}
 7613              		.loc 1 1848 0 is_stmt 1
 7614 0178 FA68     		ldr	r2, [r7, #12]
 7615 017a 164B     		ldr	r3, .L599+40
 7616 017c 9A42     		cmp	r2, r3
 7617 017e 0FDD     		ble	.L598
 7618              		.loc 1 1848 0 is_stmt 0
 7619 0180 3A23     		mov	r3, #58
 7620 0182 0FE0     		b	.L563
 7621              	.L591:
1808:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7622              		.loc 1 1808 0 is_stmt 1
 7623 0184 C046     		mov	r8, r8
 7624 0186 0CE0     		b	.L578
 7625              	.L592:
1813:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7626              		.loc 1 1813 0
 7627 0188 C046     		mov	r8, r8
 7628 018a 0AE0     		b	.L578
 7629              	.L593:
1818:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7630              		.loc 1 1818 0
 7631 018c C046     		mov	r8, r8
 7632 018e 08E0     		b	.L578
 7633              	.L594:
1823:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7634              		.loc 1 1823 0
 7635 0190 C046     		mov	r8, r8
 7636 0192 06E0     		b	.L578
 7637              	.L595:
1834:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7638              		.loc 1 1834 0
 7639 0194 C046     		mov	r8, r8
 7640 0196 04E0     		b	.L578
 7641              	.L596:
1839:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7642              		.loc 1 1839 0
 7643 0198 C046     		mov	r8, r8
 7644 019a 02E0     		b	.L578
 7645              	.L597:
1844:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7646              		.loc 1 1844 0
 7647 019c C046     		mov	r8, r8
 7648 019e 00E0     		b	.L578
 7649              	.L598:
1849:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7650              		.loc 1 1849 0
 7651 01a0 C046     		mov	r8, r8
 7652              	.L578:
1850:../Sources/TFC/TFC_CrystalClock.c ****     }
1851:../Sources/TFC/TFC_CrystalClock.c ****   }    
1852:../Sources/TFC/TFC_CrystalClock.c ****   return fll_freq_hz;
 7653              		.loc 1 1852 0
 7654 01a2 FB68     		ldr	r3, [r7, #12]
 7655              	.L563:
1853:../Sources/TFC/TFC_CrystalClock.c **** } // fll_freq
 7656              		.loc 1 1853 0
 7657 01a4 181C     		mov	r0, r3
 7658 01a6 BD46     		mov	sp, r7
 7659 01a8 04B0     		add	sp, sp, #16
 7660              		@ sp needed for prologue
 7661 01aa 80BD     		pop	{r7, pc}
 7662              	.L600:
 7663              		.align	2
 7664              	.L599:
 7665 01ac 00400640 		.word	1074151424
 7666 01b0 FF2C3101 		.word	19999999
 7667 01b4 40787D01 		.word	25000000
 7668 01b8 FF596202 		.word	39999999
 7669 01bc 80F0FA02 		.word	50000000
 7670 01c0 95080000 		.word	2197
 7671 01c4 FF869303 		.word	59999999
 7672 01c8 C0687804 		.word	75000000
 7673 01cc 710B0000 		.word	2929
 7674 01d0 FFB3C404 		.word	79999999
 7675 01d4 00E1F505 		.word	100000000
 7676              		.cfi_endproc
 7677              	.LFE25:
 7679              		.section	.text.what_mcg_mode,"ax",%progbits
 7680              		.align	2
 7681              		.global	what_mcg_mode
 7682              		.code	16
 7683              		.thumb_func
 7685              	what_mcg_mode:
 7686              	.LFB26:
1854:../Sources/TFC/TFC_CrystalClock.c **** 
1855:../Sources/TFC/TFC_CrystalClock.c **** 
1856:../Sources/TFC/TFC_CrystalClock.c **** unsigned char what_mcg_mode(void)
1857:../Sources/TFC/TFC_CrystalClock.c **** {
 7687              		.loc 1 1857 0
 7688              		.cfi_startproc
 7689 0000 80B5     		push	{r7, lr}
 7690              	.LCFI78:
 7691              		.cfi_def_cfa_offset 8
 7692              		.cfi_offset 7, -8
 7693              		.cfi_offset 14, -4
 7694 0002 00AF     		add	r7, sp, #0
 7695              	.LCFI79:
 7696              		.cfi_def_cfa_register 7
1858:../Sources/TFC/TFC_CrystalClock.c ****   // check if in FEI mode
1859:../Sources/TFC/TFC_CrystalClock.c ****   if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) &&      // check CLKS mux has selc
 7697              		.loc 1 1859 0
 7698 0004 724B     		ldr	r3, .L611
 7699 0006 9B79     		ldrb	r3, [r3, #6]
 7700 0008 DBB2     		uxtb	r3, r3
 7701 000a 1A1C     		mov	r2, r3
 7702 000c 0C23     		mov	r3, #12
 7703 000e 1340     		and	r3, r2
 7704 0010 9B08     		lsr	r3, r3, #2
 7705 0012 0FD1     		bne	.L602
1860:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                     // check FLL ref is intern
 7706              		.loc 1 1860 0
 7707 0014 6E4B     		ldr	r3, .L611
 7708 0016 9B79     		ldrb	r3, [r3, #6]
 7709 0018 DBB2     		uxtb	r3, r3
 7710 001a 1A1C     		mov	r2, r3
 7711 001c 1023     		mov	r3, #16
 7712 001e 1340     		and	r3, r2
1859:../Sources/TFC/TFC_CrystalClock.c ****   if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) &&      // check CLKS mux has selc
 7713              		.loc 1 1859 0
 7714 0020 08D0     		beq	.L602
1861:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)))                                     // check PLLS mux has sele
 7715              		.loc 1 1861 0
 7716 0022 6B4B     		ldr	r3, .L611
 7717 0024 9B79     		ldrb	r3, [r3, #6]
 7718 0026 DBB2     		uxtb	r3, r3
 7719 0028 1A1C     		mov	r2, r3
 7720 002a 2023     		mov	r3, #32
 7721 002c 1340     		and	r3, r2
1860:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                     // check FLL ref is intern
 7722              		.loc 1 1860 0
 7723 002e 01D1     		bne	.L602
1862:../Sources/TFC/TFC_CrystalClock.c ****   {
1863:../Sources/TFC/TFC_CrystalClock.c ****     return FEI;                                                          // return FEI code
 7724              		.loc 1 1863 0
 7725 0030 0323     		mov	r3, #3
 7726 0032 CAE0     		b	.L603
 7727              	.L602:
1864:../Sources/TFC/TFC_CrystalClock.c ****   }
1865:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in PEE mode
1866:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selc
 7728              		.loc 1 1866 0
 7729 0034 664B     		ldr	r3, .L611
 7730 0036 9B79     		ldrb	r3, [r3, #6]
 7731 0038 DBB2     		uxtb	r3, r3
 7732 003a 1A1C     		mov	r2, r3
 7733 003c 0C23     		mov	r3, #12
 7734 003e 1340     		and	r3, r2
 7735 0040 9B08     		lsr	r3, r3, #2
 7736 0042 032B     		cmp	r3, #3
 7737 0044 0FD1     		bne	.L604
1867:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7738              		.loc 1 1867 0
 7739 0046 624B     		ldr	r3, .L611
 7740 0048 9B79     		ldrb	r3, [r3, #6]
 7741 004a DBB2     		uxtb	r3, r3
 7742 004c 1A1C     		mov	r2, r3
 7743 004e 1023     		mov	r3, #16
 7744 0050 1340     		and	r3, r2
1866:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selc
 7745              		.loc 1 1866 0
 7746 0052 08D1     		bne	.L604
1868:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_PLLST_MASK))                                    // check PLLS mux has sele
 7747              		.loc 1 1868 0
 7748 0054 5E4B     		ldr	r3, .L611
 7749 0056 9B79     		ldrb	r3, [r3, #6]
 7750 0058 DBB2     		uxtb	r3, r3
 7751 005a 1A1C     		mov	r2, r3
 7752 005c 2023     		mov	r3, #32
 7753 005e 1340     		and	r3, r2
1867:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7754              		.loc 1 1867 0
 7755 0060 01D0     		beq	.L604
1869:../Sources/TFC/TFC_CrystalClock.c ****   {
1870:../Sources/TFC/TFC_CrystalClock.c ****     return PEE;                                                          // return PEE code
 7756              		.loc 1 1870 0
 7757 0062 0823     		mov	r3, #8
 7758 0064 B1E0     		b	.L603
 7759              	.L604:
1871:../Sources/TFC/TFC_CrystalClock.c ****   }
1872:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in PBE mode
1873:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7760              		.loc 1 1873 0
 7761 0066 5A4B     		ldr	r3, .L611
 7762 0068 9B79     		ldrb	r3, [r3, #6]
 7763 006a DBB2     		uxtb	r3, r3
 7764 006c 1A1C     		mov	r2, r3
 7765 006e 0C23     		mov	r3, #12
 7766 0070 1340     		and	r3, r2
 7767 0072 9B08     		lsr	r3, r3, #2
 7768 0074 022B     		cmp	r3, #2
 7769 0076 16D1     		bne	.L605
1874:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7770              		.loc 1 1874 0
 7771 0078 554B     		ldr	r3, .L611
 7772 007a 9B79     		ldrb	r3, [r3, #6]
 7773 007c DBB2     		uxtb	r3, r3
 7774 007e 1A1C     		mov	r2, r3
 7775 0080 1023     		mov	r3, #16
 7776 0082 1340     		and	r3, r2
1873:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7777              		.loc 1 1873 0
 7778 0084 0FD1     		bne	.L605
1875:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_PLLST_MASK) &&                                  // check PLLS mux has sele
 7779              		.loc 1 1875 0
 7780 0086 524B     		ldr	r3, .L611
 7781 0088 9B79     		ldrb	r3, [r3, #6]
 7782 008a DBB2     		uxtb	r3, r3
 7783 008c 1A1C     		mov	r2, r3
 7784 008e 2023     		mov	r3, #32
 7785 0090 1340     		and	r3, r2
1874:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7786              		.loc 1 1874 0
 7787 0092 08D0     		beq	.L605
1876:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_C2 & MCG_C2_LP_MASK)))                                  // check MCG_C2[LP] bit is
 7788              		.loc 1 1876 0
 7789 0094 4E4B     		ldr	r3, .L611
 7790 0096 5B78     		ldrb	r3, [r3, #1]
 7791 0098 DBB2     		uxtb	r3, r3
 7792 009a 1A1C     		mov	r2, r3
 7793 009c 0223     		mov	r3, #2
 7794 009e 1340     		and	r3, r2
1875:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_PLLST_MASK) &&                                  // check PLLS mux has sele
 7795              		.loc 1 1875 0
 7796 00a0 01D1     		bne	.L605
1877:../Sources/TFC/TFC_CrystalClock.c ****   {
1878:../Sources/TFC/TFC_CrystalClock.c ****     return PBE;                                                          // return PBE code
 7797              		.loc 1 1878 0
 7798 00a2 0723     		mov	r3, #7
 7799 00a4 91E0     		b	.L603
 7800              	.L605:
1879:../Sources/TFC/TFC_CrystalClock.c ****   }
1880:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in FBE mode
1881:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7801              		.loc 1 1881 0
 7802 00a6 4A4B     		ldr	r3, .L611
 7803 00a8 9B79     		ldrb	r3, [r3, #6]
 7804 00aa DBB2     		uxtb	r3, r3
 7805 00ac 1A1C     		mov	r2, r3
 7806 00ae 0C23     		mov	r3, #12
 7807 00b0 1340     		and	r3, r2
 7808 00b2 9B08     		lsr	r3, r3, #2
 7809 00b4 022B     		cmp	r3, #2
 7810 00b6 16D1     		bne	.L606
1882:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7811              		.loc 1 1882 0
 7812 00b8 454B     		ldr	r3, .L611
 7813 00ba 9B79     		ldrb	r3, [r3, #6]
 7814 00bc DBB2     		uxtb	r3, r3
 7815 00be 1A1C     		mov	r2, r3
 7816 00c0 1023     		mov	r3, #16
 7817 00c2 1340     		and	r3, r2
1881:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7818              		.loc 1 1881 0
 7819 00c4 0FD1     		bne	.L606
1883:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7820              		.loc 1 1883 0
 7821 00c6 424B     		ldr	r3, .L611
 7822 00c8 9B79     		ldrb	r3, [r3, #6]
 7823 00ca DBB2     		uxtb	r3, r3
 7824 00cc 1A1C     		mov	r2, r3
 7825 00ce 2023     		mov	r3, #32
 7826 00d0 1340     		and	r3, r2
1882:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7827              		.loc 1 1882 0
 7828 00d2 08D1     		bne	.L606
1884:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_C2 & MCG_C2_LP_MASK)))                                  // check MCG_C2[LP] bit is
 7829              		.loc 1 1884 0
 7830 00d4 3E4B     		ldr	r3, .L611
 7831 00d6 5B78     		ldrb	r3, [r3, #1]
 7832 00d8 DBB2     		uxtb	r3, r3
 7833 00da 1A1C     		mov	r2, r3
 7834 00dc 0223     		mov	r3, #2
 7835 00de 1340     		and	r3, r2
1883:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7836              		.loc 1 1883 0
 7837 00e0 01D1     		bne	.L606
1885:../Sources/TFC/TFC_CrystalClock.c ****   {
1886:../Sources/TFC/TFC_CrystalClock.c ****     return FBE;                                                          // return FBE code
 7838              		.loc 1 1886 0
 7839 00e2 0523     		mov	r3, #5
 7840 00e4 71E0     		b	.L603
 7841              	.L606:
1887:../Sources/TFC/TFC_CrystalClock.c ****   }
1888:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in BLPE mode
1889:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7842              		.loc 1 1889 0
 7843 00e6 3A4B     		ldr	r3, .L611
 7844 00e8 9B79     		ldrb	r3, [r3, #6]
 7845 00ea DBB2     		uxtb	r3, r3
 7846 00ec 1A1C     		mov	r2, r3
 7847 00ee 0C23     		mov	r3, #12
 7848 00f0 1340     		and	r3, r2
 7849 00f2 9B08     		lsr	r3, r3, #2
 7850 00f4 022B     		cmp	r3, #2
 7851 00f6 0FD1     		bne	.L607
1890:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7852              		.loc 1 1890 0
 7853 00f8 354B     		ldr	r3, .L611
 7854 00fa 9B79     		ldrb	r3, [r3, #6]
 7855 00fc DBB2     		uxtb	r3, r3
 7856 00fe 1A1C     		mov	r2, r3
 7857 0100 1023     		mov	r3, #16
 7858 0102 1340     		and	r3, r2
1889:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7859              		.loc 1 1889 0
 7860 0104 08D1     		bne	.L607
1891:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_C2 & MCG_C2_LP_MASK))                                     // check MCG_C2[LP] bit is
 7861              		.loc 1 1891 0
 7862 0106 324B     		ldr	r3, .L611
 7863 0108 5B78     		ldrb	r3, [r3, #1]
 7864 010a DBB2     		uxtb	r3, r3
 7865 010c 1A1C     		mov	r2, r3
 7866 010e 0223     		mov	r3, #2
 7867 0110 1340     		and	r3, r2
1890:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7868              		.loc 1 1890 0
 7869 0112 01D0     		beq	.L607
1892:../Sources/TFC/TFC_CrystalClock.c ****   {
1893:../Sources/TFC/TFC_CrystalClock.c ****     return BLPE;                                                         // return BLPE code
 7870              		.loc 1 1893 0
 7871 0114 0623     		mov	r3, #6
 7872 0116 58E0     		b	.L603
 7873              	.L607:
1894:../Sources/TFC/TFC_CrystalClock.c ****   }
1895:../Sources/TFC/TFC_CrystalClock.c ****   // check if in BLPI mode
1896:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selc
 7874              		.loc 1 1896 0
 7875 0118 2D4B     		ldr	r3, .L611
 7876 011a 9B79     		ldrb	r3, [r3, #6]
 7877 011c DBB2     		uxtb	r3, r3
 7878 011e 1A1C     		mov	r2, r3
 7879 0120 0C23     		mov	r3, #12
 7880 0122 1340     		and	r3, r2
 7881 0124 9B08     		lsr	r3, r3, #2
 7882 0126 012B     		cmp	r3, #1
 7883 0128 16D1     		bne	.L608
1897:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_IREFST_MASK) &&                                 // check FLL ref is intern
 7884              		.loc 1 1897 0
 7885 012a 294B     		ldr	r3, .L611
 7886 012c 9B79     		ldrb	r3, [r3, #6]
 7887 012e DBB2     		uxtb	r3, r3
 7888 0130 1A1C     		mov	r2, r3
 7889 0132 1023     		mov	r3, #16
 7890 0134 1340     		and	r3, r2
1896:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selc
 7891              		.loc 1 1896 0
 7892 0136 0FD0     		beq	.L608
1898:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7893              		.loc 1 1898 0
 7894 0138 254B     		ldr	r3, .L611
 7895 013a 9B79     		ldrb	r3, [r3, #6]
 7896 013c DBB2     		uxtb	r3, r3
 7897 013e 1A1C     		mov	r2, r3
 7898 0140 2023     		mov	r3, #32
 7899 0142 1340     		and	r3, r2
1897:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_IREFST_MASK) &&                                 // check FLL ref is intern
 7900              		.loc 1 1897 0
 7901 0144 08D1     		bne	.L608
1899:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_C2 & MCG_C2_LP_MASK))                                     // check LP bit is set
 7902              		.loc 1 1899 0
 7903 0146 224B     		ldr	r3, .L611
 7904 0148 5B78     		ldrb	r3, [r3, #1]
 7905 014a DBB2     		uxtb	r3, r3
 7906 014c 1A1C     		mov	r2, r3
 7907 014e 0223     		mov	r3, #2
 7908 0150 1340     		and	r3, r2
1898:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7909              		.loc 1 1898 0
 7910 0152 01D0     		beq	.L608
1900:../Sources/TFC/TFC_CrystalClock.c ****   {
1901:../Sources/TFC/TFC_CrystalClock.c ****     return BLPI;                                                         // return BLPI code
 7911              		.loc 1 1901 0
 7912 0154 0123     		mov	r3, #1
 7913 0156 38E0     		b	.L603
 7914              	.L608:
1902:../Sources/TFC/TFC_CrystalClock.c ****   }
1903:../Sources/TFC/TFC_CrystalClock.c ****   // check if in FBI mode
1904:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selc
 7915              		.loc 1 1904 0
 7916 0158 1D4B     		ldr	r3, .L611
 7917 015a 9B79     		ldrb	r3, [r3, #6]
 7918 015c DBB2     		uxtb	r3, r3
 7919 015e 1A1C     		mov	r2, r3
 7920 0160 0C23     		mov	r3, #12
 7921 0162 1340     		and	r3, r2
 7922 0164 9B08     		lsr	r3, r3, #2
 7923 0166 012B     		cmp	r3, #1
 7924 0168 16D1     		bne	.L609
1905:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_IREFST_MASK) &&                                 // check FLL ref is intern
 7925              		.loc 1 1905 0
 7926 016a 194B     		ldr	r3, .L611
 7927 016c 9B79     		ldrb	r3, [r3, #6]
 7928 016e DBB2     		uxtb	r3, r3
 7929 0170 1A1C     		mov	r2, r3
 7930 0172 1023     		mov	r3, #16
 7931 0174 1340     		and	r3, r2
1904:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selc
 7932              		.loc 1 1904 0
 7933 0176 0FD0     		beq	.L609
1906:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7934              		.loc 1 1906 0
 7935 0178 154B     		ldr	r3, .L611
 7936 017a 9B79     		ldrb	r3, [r3, #6]
 7937 017c DBB2     		uxtb	r3, r3
 7938 017e 1A1C     		mov	r2, r3
 7939 0180 2023     		mov	r3, #32
 7940 0182 1340     		and	r3, r2
1905:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_IREFST_MASK) &&                                 // check FLL ref is intern
 7941              		.loc 1 1905 0
 7942 0184 08D1     		bne	.L609
1907:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_C2 & MCG_C2_LP_MASK)))                                  // check LP bit is clear
 7943              		.loc 1 1907 0
 7944 0186 124B     		ldr	r3, .L611
 7945 0188 5B78     		ldrb	r3, [r3, #1]
 7946 018a DBB2     		uxtb	r3, r3
 7947 018c 1A1C     		mov	r2, r3
 7948 018e 0223     		mov	r3, #2
 7949 0190 1340     		and	r3, r2
1906:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7950              		.loc 1 1906 0
 7951 0192 01D1     		bne	.L609
1908:../Sources/TFC/TFC_CrystalClock.c ****   {  
1909:../Sources/TFC/TFC_CrystalClock.c ****     return FBI;                                                          // return FBI code 
 7952              		.loc 1 1909 0
 7953 0194 0223     		mov	r3, #2
 7954 0196 18E0     		b	.L603
 7955              	.L609:
1910:../Sources/TFC/TFC_CrystalClock.c ****   }
1911:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in FEE mode
1912:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selc
 7956              		.loc 1 1912 0
 7957 0198 0D4B     		ldr	r3, .L611
 7958 019a 9B79     		ldrb	r3, [r3, #6]
 7959 019c DBB2     		uxtb	r3, r3
 7960 019e 1A1C     		mov	r2, r3
 7961 01a0 0C23     		mov	r3, #12
 7962 01a2 1340     		and	r3, r2
 7963 01a4 9B08     		lsr	r3, r3, #2
 7964 01a6 0FD1     		bne	.L610
1913:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7965              		.loc 1 1913 0
 7966 01a8 094B     		ldr	r3, .L611
 7967 01aa 9B79     		ldrb	r3, [r3, #6]
 7968 01ac DBB2     		uxtb	r3, r3
 7969 01ae 1A1C     		mov	r2, r3
 7970 01b0 1023     		mov	r3, #16
 7971 01b2 1340     		and	r3, r2
1912:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selc
 7972              		.loc 1 1912 0
 7973 01b4 08D1     		bne	.L610
1914:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)))                                 // check PLLS mux has sele
 7974              		.loc 1 1914 0
 7975 01b6 064B     		ldr	r3, .L611
 7976 01b8 9B79     		ldrb	r3, [r3, #6]
 7977 01ba DBB2     		uxtb	r3, r3
 7978 01bc 1A1C     		mov	r2, r3
 7979 01be 2023     		mov	r3, #32
 7980 01c0 1340     		and	r3, r2
1913:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7981              		.loc 1 1913 0
 7982 01c2 01D1     		bne	.L610
1915:../Sources/TFC/TFC_CrystalClock.c ****   {
1916:../Sources/TFC/TFC_CrystalClock.c ****     return FEE;                                                          // return FEE code
 7983              		.loc 1 1916 0
 7984 01c4 0423     		mov	r3, #4
 7985 01c6 00E0     		b	.L603
 7986              	.L610:
1917:../Sources/TFC/TFC_CrystalClock.c ****   }
1918:../Sources/TFC/TFC_CrystalClock.c ****   else
1919:../Sources/TFC/TFC_CrystalClock.c ****   {
1920:../Sources/TFC/TFC_CrystalClock.c ****     return 0;                                                            // error condition
 7987              		.loc 1 1920 0
 7988 01c8 0023     		mov	r3, #0
 7989              	.L603:
1921:../Sources/TFC/TFC_CrystalClock.c ****   }
1922:../Sources/TFC/TFC_CrystalClock.c **** } // what_mcg_mode
 7990              		.loc 1 1922 0
 7991 01ca 181C     		mov	r0, r3
 7992 01cc BD46     		mov	sp, r7
 7993              		@ sp needed for prologue
 7994 01ce 80BD     		pop	{r7, pc}
 7995              	.L612:
 7996              		.align	2
 7997              	.L611:
 7998 01d0 00400640 		.word	1074151424
 7999              		.cfi_endproc
 8000              	.LFE26:
 8002              		.section	.text.clk_monitor_0,"ax",%progbits
 8003              		.align	2
 8004              		.global	clk_monitor_0
 8005              		.code	16
 8006              		.thumb_func
 8008              	clk_monitor_0:
 8009              	.LFB27:
1923:../Sources/TFC/TFC_CrystalClock.c **** 
1924:../Sources/TFC/TFC_CrystalClock.c **** 
1925:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
1926:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : clk_monitor_0
1927:../Sources/TFC/TFC_CrystalClock.c ****  *
1928:../Sources/TFC/TFC_CrystalClock.c ****  * This function simply enables or disables the OSC 0 clock monitor. This is
1929:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by setting or clearing the MCG_C6[CME] bit. It is recommended to  
1930:../Sources/TFC/TFC_CrystalClock.c ****  * enable this monitor in external clock modes (FEE, FBE, BLPE, PBE and PEE.
1931:../Sources/TFC/TFC_CrystalClock.c ****  * It MUST be disabled in all other modes or a reset may be generated. It must
1932:../Sources/TFC/TFC_CrystalClock.c ****  * also be disabled if it is desired to enter VLPR from BLPE mode.
1933:../Sources/TFC/TFC_CrystalClock.c ****  *
1934:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: en_dis - enables (= 1) or disables (= 0) the OSC 0 clock monitor
1935:../Sources/TFC/TFC_CrystalClock.c ****  *
1936:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : none
1937:../Sources/TFC/TFC_CrystalClock.c ****  */
1938:../Sources/TFC/TFC_CrystalClock.c **** void clk_monitor_0(unsigned char en_dis)
1939:../Sources/TFC/TFC_CrystalClock.c **** {         
 8010              		.loc 1 1939 0
 8011              		.cfi_startproc
 8012 0000 80B5     		push	{r7, lr}
 8013              	.LCFI80:
 8014              		.cfi_def_cfa_offset 8
 8015              		.cfi_offset 7, -8
 8016              		.cfi_offset 14, -4
 8017 0002 82B0     		sub	sp, sp, #8
 8018              	.LCFI81:
 8019              		.cfi_def_cfa_offset 16
 8020 0004 00AF     		add	r7, sp, #0
 8021              	.LCFI82:
 8022              		.cfi_def_cfa_register 7
 8023 0006 021C     		mov	r2, r0
 8024 0008 FB1D     		add	r3, r7, #7
 8025 000a 1A70     		strb	r2, [r3]
1940:../Sources/TFC/TFC_CrystalClock.c ****   if (en_dis)
 8026              		.loc 1 1940 0
 8027 000c FB1D     		add	r3, r7, #7
 8028 000e 1B78     		ldrb	r3, [r3]
 8029 0010 002B     		cmp	r3, #0
 8030 0012 08D0     		beq	.L614
1941:../Sources/TFC/TFC_CrystalClock.c ****   {
1942:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C6 |= MCG_C6_CME0_MASK;   
 8031              		.loc 1 1942 0
 8032 0014 094B     		ldr	r3, .L616
 8033 0016 094A     		ldr	r2, .L616
 8034 0018 5279     		ldrb	r2, [r2, #5]
 8035 001a D2B2     		uxtb	r2, r2
 8036 001c 2021     		mov	r1, #32
 8037 001e 0A43     		orr	r2, r1
 8038 0020 D2B2     		uxtb	r2, r2
 8039 0022 5A71     		strb	r2, [r3, #5]
 8040 0024 07E0     		b	.L613
 8041              	.L614:
1943:../Sources/TFC/TFC_CrystalClock.c ****   }
1944:../Sources/TFC/TFC_CrystalClock.c ****   else
1945:../Sources/TFC/TFC_CrystalClock.c ****   {
1946:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C6 &= ~MCG_C6_CME0_MASK;
 8042              		.loc 1 1946 0
 8043 0026 054B     		ldr	r3, .L616
 8044 0028 044A     		ldr	r2, .L616
 8045 002a 5279     		ldrb	r2, [r2, #5]
 8046 002c D2B2     		uxtb	r2, r2
 8047 002e 2021     		mov	r1, #32
 8048 0030 8A43     		bic	r2, r1
 8049 0032 D2B2     		uxtb	r2, r2
 8050 0034 5A71     		strb	r2, [r3, #5]
 8051              	.L613:
1947:../Sources/TFC/TFC_CrystalClock.c ****   }
1948:../Sources/TFC/TFC_CrystalClock.c **** }    // end clk_monitor_0
 8052              		.loc 1 1948 0
 8053 0036 BD46     		mov	sp, r7
 8054 0038 02B0     		add	sp, sp, #8
 8055              		@ sp needed for prologue
 8056 003a 80BD     		pop	{r7, pc}
 8057              	.L617:
 8058              		.align	2
 8059              	.L616:
 8060 003c 00400640 		.word	1074151424
 8061              		.cfi_endproc
 8062              	.LFE27:
 8064              		.text
 8065              	.Letext0:
 8066              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 8067              		.file 3 "C:/Users/Jared/Desktop/freescalecup/FRDM-TFC/Project_Headers/MKL25Z4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TFC_CrystalClock.c
                            *COM*:00000001 drs_val
                            *COM*:00000001 dmx32_val
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:20     .text.TFC_InitClock:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:25     .text.TFC_InitClock:00000000 TFC_InitClock
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:70     .text.pll_init:00000000 pll_init
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:59     .text.TFC_InitClock:00000020 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:65     .text.pll_init:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:594    .text.pll_init:00000324 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:612    .text.pll_init:00000364 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:903    .text.pll_init:0000053c $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:910    .text.pee_pbe:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:915    .text.pee_pbe:00000000 pee_pbe
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1040   .text.pee_pbe:000000a8 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1046   .text.pbe_pee:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1051   .text.pbe_pee:00000000 pbe_pee
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1266   .text.pbe_pee:0000013c $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1272   .text.pbe_fbe:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1277   .text.pbe_fbe:00000000 pbe_fbe
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1406   .text.pbe_fbe:000000ac $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1412   .text.fbe_pbe:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1417   .text.fbe_pbe:00000000 fbe_pbe
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1757   .text.fbe_pbe:00000208 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1767   .text.pbe_blpe:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1772   .text.pbe_blpe:00000000 pbe_blpe
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1851   .text.pbe_blpe:00000064 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1856   .text.blpe_pbe:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:1861   .text.blpe_pbe:00000000 blpe_pbe
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:2173   .text.blpe_pbe:000001dc $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:2181   .text.blpe_fbe:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:2186   .text.blpe_fbe:00000000 blpe_fbe
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:2315   .text.blpe_fbe:000000b0 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:2321   .text.fbe_blpe:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:2326   .text.fbe_blpe:00000000 fbe_blpe
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:2405   .text.fbe_blpe:00000064 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:2410   .text.fbe_fei:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:2415   .text.fbe_fei:00000000 fbe_fei
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:7348   .text.fll_freq:00000000 fll_freq
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:2655   .text.fbe_fei:00000158 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:2663   .text.fei_fbe:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:2668   .text.fei_fbe:00000000 fei_fbe
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:3153   .text.fei_fbe:000002e4 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:3171   .text.fbe_fee:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:3176   .text.fbe_fee:00000000 fbe_fee
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:3376   .text.fbe_fee:00000130 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:3382   .text.fee_fbe:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:3387   .text.fee_fbe:00000000 fee_fbe
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:3511   .text.fee_fbe:000000a8 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:3517   .text.fbe_fbi:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:3522   .text.fbe_fbi:00000000 fbe_fbi
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:3932   .text.fbe_fbi:00000260 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:3942   .text.fbi_fbe:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:3947   .text.fbi_fbe:00000000 fbi_fbe
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:4442   .text.fbi_fbe:000002f4 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:4460   .text.fbi_blpi:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:4465   .text.fbi_blpi:00000000 fbi_blpi
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:4575   .text.fbi_blpi:0000009c $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:4580   .text.blpi_fbi:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:4585   .text.blpi_fbi:00000000 blpi_fbi
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:4695   .text.blpi_fbi:0000009c $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:4700   .text.fbi_fee:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:4705   .text.fbi_fee:00000000 fbi_fee
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:5227   .text.fbi_fee:0000032c $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:5243   .text.fbi_fee:00000364 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:5263   .text.fbi_fee:00000380 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:5268   .text.fee_fbi:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:5273   .text.fee_fbi:00000000 fee_fbi
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:5652   .text.fee_fbi:0000022c $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:5662   .text.fbi_fei:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:5667   .text.fbi_fei:00000000 fbi_fei
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:5905   .text.fbi_fei:00000154 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:5913   .text.fei_fbi:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:5918   .text.fei_fbi:00000000 fei_fbi
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:6259   .text.fei_fbi:000001f8 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:6269   .text.fei_fee:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:6274   .text.fei_fee:00000000 fei_fee
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:6735   .text.fei_fee:000002c4 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:6753   .text.fee_fei:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:6758   .text.fee_fei:00000000 fee_fei
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:6915   .text.fee_fei:000000d8 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:6928   .text.atc:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:6933   .text.atc:00000000 atc
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:7685   .text.what_mcg_mode:00000000 what_mcg_mode
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:7328   .text.atc:00000280 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:7343   .text.fll_freq:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:7665   .text.fll_freq:000001ac $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:7680   .text.what_mcg_mode:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:7998   .text.what_mcg_mode:000001d0 $d
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:8003   .text.clk_monitor_0:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:8008   .text.clk_monitor_0:00000000 clk_monitor_0
C:\Users\Jared\AppData\Local\Temp\ccjT2Kcg.s:8060   .text.clk_monitor_0:0000003c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_idiv
__aeabi_uidiv
__aeabi_i2f
__aeabi_fdiv
__aeabi_fmul
__aeabi_f2uiz
