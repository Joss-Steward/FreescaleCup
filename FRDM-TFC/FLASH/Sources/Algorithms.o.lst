   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Algorithms.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_i2f
  18              		.global	__aeabi_fadd
  19              		.global	__aeabi_idiv
  20              		.global	__aeabi_fdiv
  21              		.section	.text.findSideInfo,"ax",%progbits
  22              		.align	2
  23              		.global	findSideInfo
  24              		.code	16
  25              		.thumb_func
  27              	findSideInfo:
  28              	.LFB0:
  29              		.file 1 "../Sources/Algorithms.c"
   1:../Sources/Algorithms.c **** /*
   2:../Sources/Algorithms.c ****  * AlgoOne.c
   3:../Sources/Algorithms.c ****  *
   4:../Sources/Algorithms.c ****  *  Created on: Sep 17, 2015
   5:../Sources/Algorithms.c ****  *      Author: Jared
   6:../Sources/Algorithms.c ****  */
   7:../Sources/Algorithms.c **** 
   8:../Sources/Algorithms.c **** #include "derivative.h" /* include peripheral declarations */
   9:../Sources/Algorithms.c **** #include "TFC\TFC.h"
  10:../Sources/Algorithms.c **** #include "Common.h"
  11:../Sources/Algorithms.c **** #include "Math.h"
  12:../Sources/Algorithms.c **** #include "stdlib.h"
  13:../Sources/Algorithms.c **** 
  14:../Sources/Algorithms.c **** #define START_PIXEL IGNORE_PIXELS
  15:../Sources/Algorithms.c **** #define STOP_PIXEL 128 - IGNORE_PIXELS
  16:../Sources/Algorithms.c **** #define MID_POINT (((STOP_PIXEL-START_PIXEL)/2)+START_PIXEL)
  17:../Sources/Algorithms.c **** #define LEFT_PIXELS MID_POINT-START_PIXEL
  18:../Sources/Algorithms.c **** #define RIGHT_PIXELS STOP_PIXEL-MID_POINT 
  19:../Sources/Algorithms.c **** #define DIFFDIV 1000
  20:../Sources/Algorithms.c **** #define SENSITIVITY 1000
  21:../Sources/Algorithms.c **** #define SPEED .50
  22:../Sources/Algorithms.c **** #define SLOW_AMOUNT .002
  23:../Sources/Algorithms.c **** 
  24:../Sources/Algorithms.c **** struct sideInfo{
  25:../Sources/Algorithms.c **** 	float Sum;
  26:../Sources/Algorithms.c **** 	int Changes;
  27:../Sources/Algorithms.c **** };
  28:../Sources/Algorithms.c **** 
  29:../Sources/Algorithms.c **** struct sideInfo findSideInfo( int start, int stop, int sensitivity, uint8_t* pixels ){
  30              		.loc 1 29 0
  31              		.cfi_startproc
  32 0000 90B5     		push	{r4, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 8BB0     		sub	sp, sp, #44
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 F860     		str	r0, [r7, #12]
  45 0008 B960     		str	r1, [r7, #8]
  46 000a 7A60     		str	r2, [r7, #4]
  47 000c 3B60     		str	r3, [r7]
  30:../Sources/Algorithms.c **** 	struct sideInfo sideInfo;
  31:../Sources/Algorithms.c **** 	sideInfo.Sum = 0.0;
  48              		.loc 1 31 0
  49 000e 3B1C     		mov	r3, r7
  50 0010 1433     		add	r3, r3, #20
  51 0012 0022     		mov	r2, #0
  52 0014 1A60     		str	r2, [r3]
  32:../Sources/Algorithms.c **** 	sideInfo.Changes = 0;
  53              		.loc 1 32 0
  54 0016 3B1C     		mov	r3, r7
  55 0018 1433     		add	r3, r3, #20
  56 001a 0022     		mov	r2, #0
  57 001c 5A60     		str	r2, [r3, #4]
  33:../Sources/Algorithms.c **** 	
  34:../Sources/Algorithms.c **** 	int i;
  35:../Sources/Algorithms.c **** 	int avg_1 = 0;
  58              		.loc 1 35 0
  59 001e 0023     		mov	r3, #0
  60 0020 3B62     		str	r3, [r7, #32]
  36:../Sources/Algorithms.c **** 	int avg_2 = 0;
  61              		.loc 1 36 0
  62 0022 0023     		mov	r3, #0
  63 0024 FB61     		str	r3, [r7, #28]
  37:../Sources/Algorithms.c **** 	
  38:../Sources/Algorithms.c **** 	for(i = start; i < stop; i++){
  64              		.loc 1 38 0
  65 0026 BB68     		ldr	r3, [r7, #8]
  66 0028 7B62     		str	r3, [r7, #36]
  67 002a 57E0     		b	.L2
  68              	.L5:
  39:../Sources/Algorithms.c **** 		sideInfo.Sum += pixels[i];
  69              		.loc 1 39 0
  70 002c 3B1C     		mov	r3, r7
  71 002e 1433     		add	r3, r3, #20
  72 0030 1C68     		ldr	r4, [r3]
  73 0032 7B6A     		ldr	r3, [r7, #36]
  74 0034 BA6B     		ldr	r2, [r7, #56]
  75 0036 D318     		add	r3, r2, r3
  76 0038 1B78     		ldrb	r3, [r3]
  77 003a 181C     		mov	r0, r3
  78 003c FFF7FEFF 		bl	__aeabi_i2f
  79 0040 031C     		add	r3, r0, #0
  80 0042 201C     		add	r0, r4, #0
  81 0044 191C     		add	r1, r3, #0
  82 0046 FFF7FEFF 		bl	__aeabi_fadd
  83 004a 031C     		add	r3, r0, #0
  84 004c 1A1C     		add	r2, r3, #0
  85 004e 3B1C     		mov	r3, r7
  86 0050 1433     		add	r3, r3, #20
  87 0052 1A60     		str	r2, [r3]
  40:../Sources/Algorithms.c **** 	    avg_1 = ( pixels[i - 2] + pixels[i - 1] + pixels[i] ) / 3;
  88              		.loc 1 40 0
  89 0054 7B6A     		ldr	r3, [r7, #36]
  90 0056 023B     		sub	r3, r3, #2
  91 0058 BA6B     		ldr	r2, [r7, #56]
  92 005a D318     		add	r3, r2, r3
  93 005c 1B78     		ldrb	r3, [r3]
  94 005e 1A1C     		mov	r2, r3
  95 0060 7B6A     		ldr	r3, [r7, #36]
  96 0062 013B     		sub	r3, r3, #1
  97 0064 B96B     		ldr	r1, [r7, #56]
  98 0066 CB18     		add	r3, r1, r3
  99 0068 1B78     		ldrb	r3, [r3]
 100 006a D218     		add	r2, r2, r3
 101 006c 7B6A     		ldr	r3, [r7, #36]
 102 006e B96B     		ldr	r1, [r7, #56]
 103 0070 CB18     		add	r3, r1, r3
 104 0072 1B78     		ldrb	r3, [r3]
 105 0074 D318     		add	r3, r2, r3
 106 0076 181C     		mov	r0, r3
 107 0078 0321     		mov	r1, #3
 108 007a FFF7FEFF 		bl	__aeabi_idiv
 109 007e 031C     		mov	r3, r0
 110 0080 3B62     		str	r3, [r7, #32]
  41:../Sources/Algorithms.c **** 	    avg_2 = ( pixels[i] + pixels[i + 1] + pixels[i + 2] ) / 3;
 111              		.loc 1 41 0
 112 0082 7B6A     		ldr	r3, [r7, #36]
 113 0084 BA6B     		ldr	r2, [r7, #56]
 114 0086 D318     		add	r3, r2, r3
 115 0088 1B78     		ldrb	r3, [r3]
 116 008a 1A1C     		mov	r2, r3
 117 008c 7B6A     		ldr	r3, [r7, #36]
 118 008e 0133     		add	r3, r3, #1
 119 0090 B96B     		ldr	r1, [r7, #56]
 120 0092 CB18     		add	r3, r1, r3
 121 0094 1B78     		ldrb	r3, [r3]
 122 0096 D218     		add	r2, r2, r3
 123 0098 7B6A     		ldr	r3, [r7, #36]
 124 009a 0233     		add	r3, r3, #2
 125 009c B96B     		ldr	r1, [r7, #56]
 126 009e CB18     		add	r3, r1, r3
 127 00a0 1B78     		ldrb	r3, [r3]
 128 00a2 D318     		add	r3, r2, r3
 129 00a4 181C     		mov	r0, r3
 130 00a6 0321     		mov	r1, #3
 131 00a8 FFF7FEFF 		bl	__aeabi_idiv
 132 00ac 031C     		mov	r3, r0
 133 00ae FB61     		str	r3, [r7, #28]
  42:../Sources/Algorithms.c **** 	    
  43:../Sources/Algorithms.c **** 	    if( (avg_2 < ( avg_1 - sensitivity )) || (avg_2 > ( avg_1 + sensitivity )) ){
 134              		.loc 1 43 0
 135 00b0 3A6A     		ldr	r2, [r7, #32]
 136 00b2 3B68     		ldr	r3, [r7]
 137 00b4 D21A     		sub	r2, r2, r3
 138 00b6 FB69     		ldr	r3, [r7, #28]
 139 00b8 9A42     		cmp	r2, r3
 140 00ba 05DC     		bgt	.L3
 141              		.loc 1 43 0 is_stmt 0
 142 00bc 3A6A     		ldr	r2, [r7, #32]
 143 00be 3B68     		ldr	r3, [r7]
 144 00c0 D218     		add	r2, r2, r3
 145 00c2 FB69     		ldr	r3, [r7, #28]
 146 00c4 9A42     		cmp	r2, r3
 147 00c6 06DA     		bge	.L4
 148              	.L3:
  44:../Sources/Algorithms.c **** 	    	sideInfo.Changes++;
 149              		.loc 1 44 0 is_stmt 1
 150 00c8 3B1C     		mov	r3, r7
 151 00ca 1433     		add	r3, r3, #20
 152 00cc 5B68     		ldr	r3, [r3, #4]
 153 00ce 5A1C     		add	r2, r3, #1
 154 00d0 3B1C     		mov	r3, r7
 155 00d2 1433     		add	r3, r3, #20
 156 00d4 5A60     		str	r2, [r3, #4]
 157              	.L4:
  38:../Sources/Algorithms.c **** 	for(i = start; i < stop; i++){
 158              		.loc 1 38 0
 159 00d6 7B6A     		ldr	r3, [r7, #36]
 160 00d8 0133     		add	r3, r3, #1
 161 00da 7B62     		str	r3, [r7, #36]
 162              	.L2:
  38:../Sources/Algorithms.c **** 	for(i = start; i < stop; i++){
 163              		.loc 1 38 0 is_stmt 0
 164 00dc 7A6A     		ldr	r2, [r7, #36]
 165 00de 7B68     		ldr	r3, [r7, #4]
 166 00e0 9A42     		cmp	r2, r3
 167 00e2 A3DB     		blt	.L5
  45:../Sources/Algorithms.c **** 	    }
  46:../Sources/Algorithms.c **** 	}
  47:../Sources/Algorithms.c **** 	
  48:../Sources/Algorithms.c **** 	sideInfo.Sum /= (float)(stop - start);
 168              		.loc 1 48 0 is_stmt 1
 169 00e4 3B1C     		mov	r3, r7
 170 00e6 1433     		add	r3, r3, #20
 171 00e8 1C68     		ldr	r4, [r3]
 172 00ea 7A68     		ldr	r2, [r7, #4]
 173 00ec BB68     		ldr	r3, [r7, #8]
 174 00ee D31A     		sub	r3, r2, r3
 175 00f0 181C     		mov	r0, r3
 176 00f2 FFF7FEFF 		bl	__aeabi_i2f
 177 00f6 031C     		add	r3, r0, #0
 178 00f8 201C     		add	r0, r4, #0
 179 00fa 191C     		add	r1, r3, #0
 180 00fc FFF7FEFF 		bl	__aeabi_fdiv
 181 0100 031C     		add	r3, r0, #0
 182 0102 1A1C     		add	r2, r3, #0
 183 0104 3B1C     		mov	r3, r7
 184 0106 1433     		add	r3, r3, #20
 185 0108 1A60     		str	r2, [r3]
  49:../Sources/Algorithms.c **** 	return sideInfo;
 186              		.loc 1 49 0
 187 010a FB68     		ldr	r3, [r7, #12]
 188 010c 3A1C     		mov	r2, r7
 189 010e 1432     		add	r2, r2, #20
 190 0110 03CA     		ldmia	r2!, {r0, r1}
 191 0112 03C3     		stmia	r3!, {r0, r1}
  50:../Sources/Algorithms.c **** }
 192              		.loc 1 50 0
 193 0114 F868     		ldr	r0, [r7, #12]
 194 0116 BD46     		mov	sp, r7
 195 0118 0BB0     		add	sp, sp, #44
 196              		@ sp needed for prologue
 197 011a 90BD     		pop	{r4, r7, pc}
 198              		.cfi_endproc
 199              	.LFE0:
 201              		.global	__aeabi_fsub
 202              		.global	__aeabi_f2iz
 203              		.global	__aeabi_fcmplt
 204              		.global	__aeabi_fmul
 205              		.global	__aeabi_f2d
 206              		.global	__aeabi_dcmpgt
 207              		.global	__aeabi_dcmplt
 208              		.section	.text.calcTurn,"ax",%progbits
 209              		.align	2
 210              		.global	calcTurn
 211              		.code	16
 212              		.thumb_func
 214              	calcTurn:
 215              	.LFB1:
  51:../Sources/Algorithms.c **** 
  52:../Sources/Algorithms.c **** float calcTurn( struct sideInfo left, struct sideInfo right ){
 216              		.loc 1 52 0
 217              		.cfi_startproc
 218 0000 90B5     		push	{r4, r7, lr}
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 12
 221              		.cfi_offset 4, -12
 222              		.cfi_offset 7, -8
 223              		.cfi_offset 14, -4
 224 0002 87B0     		sub	sp, sp, #28
 225              	.LCFI4:
 226              		.cfi_def_cfa_offset 40
 227 0004 00AF     		add	r7, sp, #0
 228              	.LCFI5:
 229              		.cfi_def_cfa_register 7
 230 0006 3C1C     		mov	r4, r7
 231 0008 0834     		add	r4, r4, #8
 232 000a 2060     		str	r0, [r4]
 233 000c 6160     		str	r1, [r4, #4]
 234 000e 391C     		mov	r1, r7
 235 0010 0A60     		str	r2, [r1]
 236 0012 4B60     		str	r3, [r1, #4]
  53:../Sources/Algorithms.c **** 	float difference = (float)abs(left.Sum - right.Sum);
 237              		.loc 1 53 0
 238 0014 3B1C     		mov	r3, r7
 239 0016 0833     		add	r3, r3, #8
 240 0018 1A68     		ldr	r2, [r3]
 241 001a 3B1C     		mov	r3, r7
 242 001c 1B68     		ldr	r3, [r3]
 243 001e 101C     		add	r0, r2, #0
 244 0020 191C     		add	r1, r3, #0
 245 0022 FFF7FEFF 		bl	__aeabi_fsub
 246 0026 031C     		add	r3, r0, #0
 247 0028 181C     		add	r0, r3, #0
 248 002a FFF7FEFF 		bl	__aeabi_f2iz
 249 002e 031C     		mov	r3, r0
 250 0030 DA17     		asr	r2, r3, #31
 251 0032 9B18     		add	r3, r3, r2
 252 0034 5340     		eor	r3, r2
 253 0036 181C     		mov	r0, r3
 254 0038 FFF7FEFF 		bl	__aeabi_i2f
 255 003c 031C     		add	r3, r0, #0
 256 003e 3B61     		str	r3, [r7, #16]
  54:../Sources/Algorithms.c **** 	difference /= DIFFDIV;
 257              		.loc 1 54 0
 258 0040 3869     		ldr	r0, [r7, #16]
 259 0042 2749     		ldr	r1, .L18+16
 260 0044 FFF7FEFF 		bl	__aeabi_fdiv
 261 0048 031C     		add	r3, r0, #0
 262 004a 3B61     		str	r3, [r7, #16]
  55:../Sources/Algorithms.c **** 	            
  56:../Sources/Algorithms.c **** 	// Default to straight ahead
  57:../Sources/Algorithms.c **** 	float steering_value = 0.0;
 263              		.loc 1 57 0
 264 004c 0023     		mov	r3, #0
 265 004e 7B61     		str	r3, [r7, #20]
  58:../Sources/Algorithms.c **** 
  59:../Sources/Algorithms.c **** 	if(left.Sum < right.Sum){
 266              		.loc 1 59 0
 267 0050 3B1C     		mov	r3, r7
 268 0052 0833     		add	r3, r3, #8
 269 0054 1A68     		ldr	r2, [r3]
 270 0056 3B1C     		mov	r3, r7
 271 0058 1B68     		ldr	r3, [r3]
 272 005a 101C     		add	r0, r2, #0
 273 005c 191C     		add	r1, r3, #0
 274 005e FFF7FEFF 		bl	__aeabi_fcmplt
 275 0062 031C     		mov	r3, r0
 276 0064 002B     		cmp	r3, #0
 277 0066 17D0     		beq	.L17
 278              	.L14:
  60:../Sources/Algorithms.c **** 		steering_value = 0.5 * difference;
 279              		.loc 1 60 0
 280 0068 3869     		ldr	r0, [r7, #16]
 281 006a FC21     		mov	r1, #252
 282 006c 8905     		lsl	r1, r1, #22
 283 006e FFF7FEFF 		bl	__aeabi_fmul
 284 0072 031C     		add	r3, r0, #0
 285 0074 7B61     		str	r3, [r7, #20]
  61:../Sources/Algorithms.c **** 	    if(steering_value > .7)steering_value = .7;
 286              		.loc 1 61 0
 287 0076 7869     		ldr	r0, [r7, #20]
 288 0078 FFF7FEFF 		bl	__aeabi_f2d
 289 007c 031C     		mov	r3, r0
 290 007e 0C1C     		mov	r4, r1
 291 0080 181C     		mov	r0, r3
 292 0082 211C     		mov	r1, r4
 293 0084 134B     		ldr	r3, .L18+4
 294 0086 124A     		ldr	r2, .L18
 295 0088 FFF7FEFF 		bl	__aeabi_dcmpgt
 296 008c 031C     		mov	r3, r0
 297 008e 002B     		cmp	r3, #0
 298 0090 19D0     		beq	.L10
 299              	.L15:
 300              		.loc 1 61 0 is_stmt 0
 301 0092 144B     		ldr	r3, .L18+20
 302 0094 7B61     		str	r3, [r7, #20]
 303 0096 16E0     		b	.L10
 304              	.L17:
  62:../Sources/Algorithms.c **** 	} else {
  63:../Sources/Algorithms.c **** 	    steering_value = -0.5 * difference;
 305              		.loc 1 63 0 is_stmt 1
 306 0098 3869     		ldr	r0, [r7, #16]
 307 009a BF21     		mov	r1, #191
 308 009c 0906     		lsl	r1, r1, #24
 309 009e FFF7FEFF 		bl	__aeabi_fmul
 310 00a2 031C     		add	r3, r0, #0
 311 00a4 7B61     		str	r3, [r7, #20]
  64:../Sources/Algorithms.c **** 	    if(steering_value < -.7)steering_value = -.7;
 312              		.loc 1 64 0
 313 00a6 7869     		ldr	r0, [r7, #20]
 314 00a8 FFF7FEFF 		bl	__aeabi_f2d
 315 00ac 031C     		mov	r3, r0
 316 00ae 0C1C     		mov	r4, r1
 317 00b0 181C     		mov	r0, r3
 318 00b2 211C     		mov	r1, r4
 319 00b4 084A     		ldr	r2, .L18+8
 320 00b6 094B     		ldr	r3, .L18+12
 321 00b8 FFF7FEFF 		bl	__aeabi_dcmplt
 322 00bc 031C     		mov	r3, r0
 323 00be 002B     		cmp	r3, #0
 324 00c0 01D0     		beq	.L10
 325              	.L16:
 326              		.loc 1 64 0 is_stmt 0
 327 00c2 094B     		ldr	r3, .L18+24
 328 00c4 7B61     		str	r3, [r7, #20]
 329              	.L10:
  65:../Sources/Algorithms.c **** 	}
  66:../Sources/Algorithms.c **** 
  67:../Sources/Algorithms.c **** 	return steering_value;
 330              		.loc 1 67 0 is_stmt 1
 331 00c6 7B69     		ldr	r3, [r7, #20]
  68:../Sources/Algorithms.c **** }
 332              		.loc 1 68 0
 333 00c8 181C     		add	r0, r3, #0
 334 00ca BD46     		mov	sp, r7
 335 00cc 07B0     		add	sp, sp, #28
 336              		@ sp needed for prologue
 337 00ce 90BD     		pop	{r4, r7, pc}
 338              	.L19:
 339              		.align	3
 340              	.L18:
 341 00d0 66666666 		.word	1717986918
 342 00d4 6666E63F 		.word	1072064102
 343 00d8 66666666 		.word	1717986918
 344 00dc 6666E6BF 		.word	-1075419546
 345 00e0 00007A44 		.word	1148846080
 346 00e4 3333333F 		.word	1060320051
 347 00e8 333333BF 		.word	-1087163597
 348              		.cfi_endproc
 349              	.LFE1:
 351              		.global	__aeabi_dmul
 352              		.global	__aeabi_dsub
 353              		.global	__aeabi_d2f
 354              		.global	__aeabi_fcmple
 355 00ec C046C046 		.section	.text.getCommand,"ax",%progbits
 356              		.align	2
 357              		.global	getCommand
 358              		.code	16
 359              		.thumb_func
 361              	getCommand:
 362              	.LFB2:
  69:../Sources/Algorithms.c **** 
  70:../Sources/Algorithms.c **** int getCommand( uint8_t* cameraData, struct Command* command, int sensitivity, float speed ){
 363              		.loc 1 70 0
 364              		.cfi_startproc
 365 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 366              	.LCFI6:
 367              		.cfi_def_cfa_offset 20
 368              		.cfi_offset 4, -20
 369              		.cfi_offset 5, -16
 370              		.cfi_offset 6, -12
 371              		.cfi_offset 7, -8
 372              		.cfi_offset 14, -4
 373 0002 8BB0     		sub	sp, sp, #44
 374              	.LCFI7:
 375              		.cfi_def_cfa_offset 64
 376 0004 02AF     		add	r7, sp, #8
 377              	.LCFI8:
 378              		.cfi_def_cfa 7, 56
 379 0006 F860     		str	r0, [r7, #12]
 380 0008 B960     		str	r1, [r7, #8]
 381 000a 7A60     		str	r2, [r7, #4]
 382 000c 3B60     		str	r3, [r7]
  71:../Sources/Algorithms.c **** 	
  72:../Sources/Algorithms.c **** 	struct sideInfo right;
  73:../Sources/Algorithms.c **** 	right.Sum = 0.0;
 383              		.loc 1 73 0
 384 000e 3B1C     		mov	r3, r7
 385 0010 1833     		add	r3, r3, #24
 386 0012 0022     		mov	r2, #0
 387 0014 1A60     		str	r2, [r3]
  74:../Sources/Algorithms.c **** 	right.Changes = 0;
 388              		.loc 1 74 0
 389 0016 3B1C     		mov	r3, r7
 390 0018 1833     		add	r3, r3, #24
 391 001a 0022     		mov	r2, #0
 392 001c 5A60     		str	r2, [r3, #4]
  75:../Sources/Algorithms.c **** 	struct sideInfo left;
  76:../Sources/Algorithms.c **** 	left.Sum = 0.0;
 393              		.loc 1 76 0
 394 001e 3B1C     		mov	r3, r7
 395 0020 1033     		add	r3, r3, #16
 396 0022 0022     		mov	r2, #0
 397 0024 1A60     		str	r2, [r3]
  77:../Sources/Algorithms.c **** 	left.Changes = 0;
 398              		.loc 1 77 0
 399 0026 3B1C     		mov	r3, r7
 400 0028 1033     		add	r3, r3, #16
 401 002a 0022     		mov	r2, #0
 402 002c 5A60     		str	r2, [r3, #4]
  78:../Sources/Algorithms.c **** 	
  79:../Sources/Algorithms.c **** 	TFC_Task();
 403              		.loc 1 79 0
 404 002e FFF7FEFF 		bl	TFC_Task
  80:../Sources/Algorithms.c **** 	
  81:../Sources/Algorithms.c **** 	left = findSideInfo( START_PIXEL, (int)MID_POINT, sensitivity, cameraData );
 405              		.loc 1 81 0
 406 0032 3A1C     		mov	r2, r7
 407 0034 1032     		add	r2, r2, #16
 408 0036 7B68     		ldr	r3, [r7, #4]
 409 0038 F968     		ldr	r1, [r7, #12]
 410 003a 0091     		str	r1, [sp]
 411 003c 101C     		mov	r0, r2
 412 003e 0821     		mov	r1, #8
 413 0040 4022     		mov	r2, #64
 414 0042 FFF7FEFF 		bl	findSideInfo
  82:../Sources/Algorithms.c **** 	right = findSideInfo( (int)MID_POINT, STOP_PIXEL, sensitivity, cameraData ); 
 415              		.loc 1 82 0
 416 0046 3A1C     		mov	r2, r7
 417 0048 1832     		add	r2, r2, #24
 418 004a 7B68     		ldr	r3, [r7, #4]
 419 004c F968     		ldr	r1, [r7, #12]
 420 004e 0091     		str	r1, [sp]
 421 0050 101C     		mov	r0, r2
 422 0052 4021     		mov	r1, #64
 423 0054 7822     		mov	r2, #120
 424 0056 FFF7FEFF 		bl	findSideInfo
  83:../Sources/Algorithms.c **** 	
  84:../Sources/Algorithms.c **** 	command->steerValue = calcTurn(left, right);
 425              		.loc 1 84 0
 426 005a 3A1C     		mov	r2, r7
 427 005c 1032     		add	r2, r2, #16
 428 005e 3B1C     		mov	r3, r7
 429 0060 1833     		add	r3, r3, #24
 430 0062 1068     		ldr	r0, [r2]
 431 0064 5168     		ldr	r1, [r2, #4]
 432 0066 1A68     		ldr	r2, [r3]
 433 0068 5B68     		ldr	r3, [r3, #4]
 434 006a FFF7FEFF 		bl	calcTurn
 435 006e 021C     		add	r2, r0, #0
 436 0070 BB68     		ldr	r3, [r7, #8]
 437 0072 1A60     		str	r2, [r3]
  85:../Sources/Algorithms.c **** 	
  86:../Sources/Algorithms.c **** 	if(command->stop == 0) {
 438              		.loc 1 86 0
 439 0074 BB68     		ldr	r3, [r7, #8]
 440 0076 DB68     		ldr	r3, [r3, #12]
 441 0078 002B     		cmp	r3, #0
 442 007a 15D1     		bne	.L21
  87:../Sources/Algorithms.c **** 		command->stop = ( right.Changes >= 1 && left.Changes >= 1 );
 443              		.loc 1 87 0
 444 007c 3B1C     		mov	r3, r7
 445 007e 1833     		add	r3, r3, #24
 446 0080 5B68     		ldr	r3, [r3, #4]
 447 0082 002B     		cmp	r3, #0
 448 0084 06DD     		ble	.L22
 449              		.loc 1 87 0 is_stmt 0
 450 0086 3B1C     		mov	r3, r7
 451 0088 1033     		add	r3, r3, #16
 452 008a 5B68     		ldr	r3, [r3, #4]
 453 008c 002B     		cmp	r3, #0
 454 008e 01DD     		ble	.L22
 455              		.loc 1 87 0
 456 0090 0122     		mov	r2, #1
 457 0092 00E0     		b	.L23
 458              	.L22:
 459              		.loc 1 87 0
 460 0094 0022     		mov	r2, #0
 461              	.L23:
 462              		.loc 1 87 0
 463 0096 BB68     		ldr	r3, [r7, #8]
 464 0098 DA60     		str	r2, [r3, #12]
  88:../Sources/Algorithms.c **** 		command->speedL = speed;
 465              		.loc 1 88 0 is_stmt 1
 466 009a BB68     		ldr	r3, [r7, #8]
 467 009c 3A68     		ldr	r2, [r7]
 468 009e 5A60     		str	r2, [r3, #4]
  89:../Sources/Algorithms.c **** 		command->speedR = speed;
 469              		.loc 1 89 0
 470 00a0 BB68     		ldr	r3, [r7, #8]
 471 00a2 3A68     		ldr	r2, [r7]
 472 00a4 9A60     		str	r2, [r3, #8]
 473 00a6 59E0     		b	.L24
 474              	.L21:
  90:../Sources/Algorithms.c **** 	} else {
  91:../Sources/Algorithms.c **** 		command->speedL = fmax(0, command->speedL - (speed * SLOW_AMOUNT) );
 475              		.loc 1 91 0
 476 00a8 BB68     		ldr	r3, [r7, #8]
 477 00aa 5B68     		ldr	r3, [r3, #4]
 478 00ac 181C     		add	r0, r3, #0
 479 00ae FFF7FEFF 		bl	__aeabi_f2d
 480 00b2 051C     		mov	r5, r0
 481 00b4 0E1C     		mov	r6, r1
 482 00b6 3868     		ldr	r0, [r7]
 483 00b8 FFF7FEFF 		bl	__aeabi_f2d
 484 00bc 031C     		mov	r3, r0
 485 00be 0C1C     		mov	r4, r1
 486 00c0 181C     		mov	r0, r3
 487 00c2 211C     		mov	r1, r4
 488 00c4 334B     		ldr	r3, .L32+4
 489 00c6 324A     		ldr	r2, .L32
 490 00c8 FFF7FEFF 		bl	__aeabi_dmul
 491 00cc 031C     		mov	r3, r0
 492 00ce 0C1C     		mov	r4, r1
 493 00d0 281C     		mov	r0, r5
 494 00d2 311C     		mov	r1, r6
 495 00d4 1A1C     		mov	r2, r3
 496 00d6 231C     		mov	r3, r4
 497 00d8 FFF7FEFF 		bl	__aeabi_dsub
 498 00dc 031C     		mov	r3, r0
 499 00de 0C1C     		mov	r4, r1
 500 00e0 2D49     		ldr	r1, .L32+8
 501 00e2 2E4A     		ldr	r2, .L32+12
 502 00e4 081C     		mov	r0, r1
 503 00e6 111C     		mov	r1, r2
 504 00e8 1A1C     		mov	r2, r3
 505 00ea 231C     		mov	r3, r4
 506 00ec FFF7FEFF 		bl	fmax
 507 00f0 031C     		mov	r3, r0
 508 00f2 0C1C     		mov	r4, r1
 509 00f4 181C     		mov	r0, r3
 510 00f6 211C     		mov	r1, r4
 511 00f8 FFF7FEFF 		bl	__aeabi_d2f
 512 00fc 021C     		add	r2, r0, #0
 513 00fe BB68     		ldr	r3, [r7, #8]
 514 0100 5A60     		str	r2, [r3, #4]
  92:../Sources/Algorithms.c **** 		command->speedR = fmax(0, command->speedR - (speed * SLOW_AMOUNT) );
 515              		.loc 1 92 0
 516 0102 BB68     		ldr	r3, [r7, #8]
 517 0104 9B68     		ldr	r3, [r3, #8]
 518 0106 181C     		add	r0, r3, #0
 519 0108 FFF7FEFF 		bl	__aeabi_f2d
 520 010c 051C     		mov	r5, r0
 521 010e 0E1C     		mov	r6, r1
 522 0110 3868     		ldr	r0, [r7]
 523 0112 FFF7FEFF 		bl	__aeabi_f2d
 524 0116 031C     		mov	r3, r0
 525 0118 0C1C     		mov	r4, r1
 526 011a 181C     		mov	r0, r3
 527 011c 211C     		mov	r1, r4
 528 011e 1D4B     		ldr	r3, .L32+4
 529 0120 1B4A     		ldr	r2, .L32
 530 0122 FFF7FEFF 		bl	__aeabi_dmul
 531 0126 031C     		mov	r3, r0
 532 0128 0C1C     		mov	r4, r1
 533 012a 281C     		mov	r0, r5
 534 012c 311C     		mov	r1, r6
 535 012e 1A1C     		mov	r2, r3
 536 0130 231C     		mov	r3, r4
 537 0132 FFF7FEFF 		bl	__aeabi_dsub
 538 0136 031C     		mov	r3, r0
 539 0138 0C1C     		mov	r4, r1
 540 013a 1749     		ldr	r1, .L32+8
 541 013c 174A     		ldr	r2, .L32+12
 542 013e 081C     		mov	r0, r1
 543 0140 111C     		mov	r1, r2
 544 0142 1A1C     		mov	r2, r3
 545 0144 231C     		mov	r3, r4
 546 0146 FFF7FEFF 		bl	fmax
 547 014a 031C     		mov	r3, r0
 548 014c 0C1C     		mov	r4, r1
 549 014e 181C     		mov	r0, r3
 550 0150 211C     		mov	r1, r4
 551 0152 FFF7FEFF 		bl	__aeabi_d2f
 552 0156 021C     		add	r2, r0, #0
 553 0158 BB68     		ldr	r3, [r7, #8]
 554 015a 9A60     		str	r2, [r3, #8]
 555              	.L24:
  93:../Sources/Algorithms.c **** 	}     
  94:../Sources/Algorithms.c **** 	
  95:../Sources/Algorithms.c **** 	if( command->speedL  <= 0 && command->speedR <= 0 )return 0;
 556              		.loc 1 95 0
 557 015c BB68     		ldr	r3, [r7, #8]
 558 015e 5B68     		ldr	r3, [r3, #4]
 559 0160 181C     		add	r0, r3, #0
 560 0162 0021     		mov	r1, #0
 561 0164 FFF7FEFF 		bl	__aeabi_fcmple
 562 0168 031C     		mov	r3, r0
 563 016a 002B     		cmp	r3, #0
 564 016c 0AD0     		beq	.L25
 565              	.L30:
 566              		.loc 1 95 0 is_stmt 0
 567 016e BB68     		ldr	r3, [r7, #8]
 568 0170 9B68     		ldr	r3, [r3, #8]
 569 0172 181C     		add	r0, r3, #0
 570 0174 0021     		mov	r1, #0
 571 0176 FFF7FEFF 		bl	__aeabi_fcmple
 572 017a 031C     		mov	r3, r0
 573 017c 002B     		cmp	r3, #0
 574 017e 01D0     		beq	.L25
 575              	.L31:
 576 0180 0023     		mov	r3, #0
 577 0182 00E0     		b	.L29
 578              	.L25:
  96:../Sources/Algorithms.c **** 	
  97:../Sources/Algorithms.c **** 	return 1;
 579              		.loc 1 97 0 is_stmt 1
 580 0184 0123     		mov	r3, #1
 581              	.L29:
  98:../Sources/Algorithms.c **** }
 582              		.loc 1 98 0
 583 0186 181C     		mov	r0, r3
 584 0188 BD46     		mov	sp, r7
 585 018a 09B0     		add	sp, sp, #36
 586              		@ sp needed for prologue
 587 018c F0BD     		pop	{r4, r5, r6, r7, pc}
 588              	.L33:
 589 018e C046     		.align	3
 590              	.L32:
 591 0190 FCA9F1D2 		.word	-755914244
 592 0194 4D62603F 		.word	1063281229
 593 0198 00000000 		.word	0
 594 019c 00000000 		.word	0
 595              		.cfi_endproc
 596              	.LFE2:
 598              		.section	.text.getSensitivity,"ax",%progbits
 599              		.align	2
 600              		.global	getSensitivity
 601              		.code	16
 602              		.thumb_func
 604              	getSensitivity:
 605              	.LFB3:
  99:../Sources/Algorithms.c **** 
 100:../Sources/Algorithms.c **** int getSensitivity(){
 606              		.loc 1 100 0
 607              		.cfi_startproc
 608 0000 80B5     		push	{r7, lr}
 609              	.LCFI9:
 610              		.cfi_def_cfa_offset 8
 611              		.cfi_offset 7, -8
 612              		.cfi_offset 14, -4
 613 0002 00AF     		add	r7, sp, #0
 614              	.LCFI10:
 615              		.cfi_def_cfa_register 7
 101:../Sources/Algorithms.c **** 	return( (int)( SENSITIVITY * ( TFC_ReadPot(0) + 1 ) ) );
 616              		.loc 1 101 0
 617 0004 0020     		mov	r0, #0
 618 0006 FFF7FEFF 		bl	TFC_ReadPot
 619 000a 031C     		add	r3, r0, #0
 620 000c 181C     		add	r0, r3, #0
 621 000e FE21     		mov	r1, #254
 622 0010 8905     		lsl	r1, r1, #22
 623 0012 FFF7FEFF 		bl	__aeabi_fadd
 624 0016 031C     		add	r3, r0, #0
 625 0018 181C     		add	r0, r3, #0
 626 001a 0549     		ldr	r1, .L36
 627 001c FFF7FEFF 		bl	__aeabi_fmul
 628 0020 031C     		add	r3, r0, #0
 629 0022 181C     		add	r0, r3, #0
 630 0024 FFF7FEFF 		bl	__aeabi_f2iz
 631 0028 031C     		mov	r3, r0
 102:../Sources/Algorithms.c **** }
 632              		.loc 1 102 0
 633 002a 181C     		mov	r0, r3
 634 002c BD46     		mov	sp, r7
 635              		@ sp needed for prologue
 636 002e 80BD     		pop	{r7, pc}
 637              	.L37:
 638              		.align	2
 639              	.L36:
 640 0030 00007A44 		.word	1148846080
 641              		.cfi_endproc
 642              	.LFE3:
 644              		.section	.text.getSpeed,"ax",%progbits
 645              		.align	2
 646              		.global	getSpeed
 647              		.code	16
 648              		.thumb_func
 650              	getSpeed:
 651              	.LFB4:
 103:../Sources/Algorithms.c **** 
 104:../Sources/Algorithms.c **** float getSpeed(){
 652              		.loc 1 104 0
 653              		.cfi_startproc
 654 0000 80B5     		push	{r7, lr}
 655              	.LCFI11:
 656              		.cfi_def_cfa_offset 8
 657              		.cfi_offset 7, -8
 658              		.cfi_offset 14, -4
 659 0002 00AF     		add	r7, sp, #0
 660              	.LCFI12:
 661              		.cfi_def_cfa_register 7
 105:../Sources/Algorithms.c **** 	return( ( SPEED * ( TFC_ReadPot(1) + 1 ) ) );
 662              		.loc 1 105 0
 663 0004 0120     		mov	r0, #1
 664 0006 FFF7FEFF 		bl	TFC_ReadPot
 665 000a 031C     		add	r3, r0, #0
 666 000c 181C     		add	r0, r3, #0
 667 000e FE21     		mov	r1, #254
 668 0010 8905     		lsl	r1, r1, #22
 669 0012 FFF7FEFF 		bl	__aeabi_fadd
 670 0016 031C     		add	r3, r0, #0
 671 0018 181C     		add	r0, r3, #0
 672 001a FC21     		mov	r1, #252
 673 001c 8905     		lsl	r1, r1, #22
 674 001e FFF7FEFF 		bl	__aeabi_fmul
 675 0022 031C     		add	r3, r0, #0
 106:../Sources/Algorithms.c **** }
 676              		.loc 1 106 0
 677 0024 181C     		add	r0, r3, #0
 678 0026 BD46     		mov	sp, r7
 679              		@ sp needed for prologue
 680 0028 80BD     		pop	{r7, pc}
 681              		.cfi_endproc
 682              	.LFE4:
 684 002a C046     		.text
 685              	.Letext0:
 686              		.file 2 "../Sources/Common.h"
 687              		.file 3 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
DEFINED SYMBOLS
                            *ABS*:00000000 Algorithms.c
C:\Users\Jared\AppData\Local\Temp\ccoplIsG.s:22     .text.findSideInfo:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccoplIsG.s:27     .text.findSideInfo:00000000 findSideInfo
C:\Users\Jared\AppData\Local\Temp\ccoplIsG.s:209    .text.calcTurn:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccoplIsG.s:214    .text.calcTurn:00000000 calcTurn
C:\Users\Jared\AppData\Local\Temp\ccoplIsG.s:341    .text.calcTurn:000000d0 $d
C:\Users\Jared\AppData\Local\Temp\ccoplIsG.s:356    .text.getCommand:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccoplIsG.s:361    .text.getCommand:00000000 getCommand
C:\Users\Jared\AppData\Local\Temp\ccoplIsG.s:591    .text.getCommand:00000190 $d
C:\Users\Jared\AppData\Local\Temp\ccoplIsG.s:599    .text.getSensitivity:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccoplIsG.s:604    .text.getSensitivity:00000000 getSensitivity
C:\Users\Jared\AppData\Local\Temp\ccoplIsG.s:640    .text.getSensitivity:00000030 $d
C:\Users\Jared\AppData\Local\Temp\ccoplIsG.s:645    .text.getSpeed:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccoplIsG.s:650    .text.getSpeed:00000000 getSpeed
                     .debug_frame:00000010 $d
C:\Users\Jared\AppData\Local\Temp\ccoplIsG.s:355    .text.calcTurn:000000ec $t

UNDEFINED SYMBOLS
__aeabi_i2f
__aeabi_fadd
__aeabi_idiv
__aeabi_fdiv
__aeabi_fsub
__aeabi_f2iz
__aeabi_fcmplt
__aeabi_fmul
__aeabi_f2d
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_fcmple
TFC_Task
fmax
TFC_ReadPot
