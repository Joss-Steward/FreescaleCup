   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Algorithms.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_i2f
  18              		.global	__aeabi_fadd
  19              		.global	__aeabi_idiv
  20              		.global	__aeabi_fdiv
  21              		.section	.text.findSideInfo,"ax",%progbits
  22              		.align	2
  23              		.global	findSideInfo
  24              		.code	16
  25              		.thumb_func
  27              	findSideInfo:
  28              	.LFB0:
  29              		.file 1 "../Sources/Algorithms.c"
   1:../Sources/Algorithms.c **** /*
   2:../Sources/Algorithms.c ****  * AlgoOne.c
   3:../Sources/Algorithms.c ****  *
   4:../Sources/Algorithms.c ****  *  Created on: Sep 17, 2015
   5:../Sources/Algorithms.c ****  *      Author: Jared
   6:../Sources/Algorithms.c ****  */
   7:../Sources/Algorithms.c **** 
   8:../Sources/Algorithms.c **** #include "derivative.h" /* include peripheral declarations */
   9:../Sources/Algorithms.c **** #include "TFC\TFC.h"
  10:../Sources/Algorithms.c **** #include "Common.h"
  11:../Sources/Algorithms.c **** #include "Math.h"
  12:../Sources/Algorithms.c **** #include "stdlib.h"
  13:../Sources/Algorithms.c **** 
  14:../Sources/Algorithms.c **** struct sideInfo{
  15:../Sources/Algorithms.c **** 	float Sum;
  16:../Sources/Algorithms.c **** 	int Changes;
  17:../Sources/Algorithms.c **** };
  18:../Sources/Algorithms.c **** 
  19:../Sources/Algorithms.c **** struct sideInfo findSideInfo( int start, int stop, int sensitivity, uint16_t* pixels ){
  30              		.loc 1 19 0
  31              		.cfi_startproc
  32 0000 90B5     		push	{r4, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 8BB0     		sub	sp, sp, #44
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 F860     		str	r0, [r7, #12]
  45 0008 B960     		str	r1, [r7, #8]
  46 000a 7A60     		str	r2, [r7, #4]
  47 000c 3B60     		str	r3, [r7]
  20:../Sources/Algorithms.c **** 	struct sideInfo sideInfo;
  21:../Sources/Algorithms.c **** 	sideInfo.Sum = 0.0;
  48              		.loc 1 21 0
  49 000e 3B1C     		mov	r3, r7
  50 0010 1433     		add	r3, r3, #20
  51 0012 0022     		mov	r2, #0
  52 0014 1A60     		str	r2, [r3]
  22:../Sources/Algorithms.c **** 	sideInfo.Changes = 0;
  53              		.loc 1 22 0
  54 0016 3B1C     		mov	r3, r7
  55 0018 1433     		add	r3, r3, #20
  56 001a 0022     		mov	r2, #0
  57 001c 5A60     		str	r2, [r3, #4]
  23:../Sources/Algorithms.c **** 	
  24:../Sources/Algorithms.c **** 	int i;
  25:../Sources/Algorithms.c **** 	int avg_1 = 0;
  58              		.loc 1 25 0
  59 001e 0023     		mov	r3, #0
  60 0020 3B62     		str	r3, [r7, #32]
  26:../Sources/Algorithms.c **** 	int avg_2 = 0;
  61              		.loc 1 26 0
  62 0022 0023     		mov	r3, #0
  63 0024 FB61     		str	r3, [r7, #28]
  27:../Sources/Algorithms.c **** 	
  28:../Sources/Algorithms.c **** 	for(i = start; i < stop; i++){
  64              		.loc 1 28 0
  65 0026 BB68     		ldr	r3, [r7, #8]
  66 0028 7B62     		str	r3, [r7, #36]
  67 002a 5EE0     		b	.L2
  68              	.L5:
  29:../Sources/Algorithms.c **** 		sideInfo.Sum += pixels[i];
  69              		.loc 1 29 0
  70 002c 3B1C     		mov	r3, r7
  71 002e 1433     		add	r3, r3, #20
  72 0030 1C68     		ldr	r4, [r3]
  73 0032 7B6A     		ldr	r3, [r7, #36]
  74 0034 5B00     		lsl	r3, r3, #1
  75 0036 BA6B     		ldr	r2, [r7, #56]
  76 0038 D318     		add	r3, r2, r3
  77 003a 1B88     		ldrh	r3, [r3]
  78 003c 181C     		mov	r0, r3
  79 003e FFF7FEFF 		bl	__aeabi_i2f
  80 0042 031C     		add	r3, r0, #0
  81 0044 201C     		add	r0, r4, #0
  82 0046 191C     		add	r1, r3, #0
  83 0048 FFF7FEFF 		bl	__aeabi_fadd
  84 004c 031C     		add	r3, r0, #0
  85 004e 1A1C     		add	r2, r3, #0
  86 0050 3B1C     		mov	r3, r7
  87 0052 1433     		add	r3, r3, #20
  88 0054 1A60     		str	r2, [r3]
  30:../Sources/Algorithms.c **** 	    avg_1 = ( pixels[i - 2] + pixels[i - 1] + pixels[i] ) / 3;
  89              		.loc 1 30 0
  90 0056 7B6A     		ldr	r3, [r7, #36]
  91 0058 023B     		sub	r3, r3, #2
  92 005a 5B00     		lsl	r3, r3, #1
  93 005c BA6B     		ldr	r2, [r7, #56]
  94 005e D318     		add	r3, r2, r3
  95 0060 1B88     		ldrh	r3, [r3]
  96 0062 1A1C     		mov	r2, r3
  97 0064 7B6A     		ldr	r3, [r7, #36]
  98 0066 013B     		sub	r3, r3, #1
  99 0068 5B00     		lsl	r3, r3, #1
 100 006a B96B     		ldr	r1, [r7, #56]
 101 006c CB18     		add	r3, r1, r3
 102 006e 1B88     		ldrh	r3, [r3]
 103 0070 D218     		add	r2, r2, r3
 104 0072 7B6A     		ldr	r3, [r7, #36]
 105 0074 5B00     		lsl	r3, r3, #1
 106 0076 B96B     		ldr	r1, [r7, #56]
 107 0078 CB18     		add	r3, r1, r3
 108 007a 1B88     		ldrh	r3, [r3]
 109 007c D318     		add	r3, r2, r3
 110 007e 181C     		mov	r0, r3
 111 0080 0321     		mov	r1, #3
 112 0082 FFF7FEFF 		bl	__aeabi_idiv
 113 0086 031C     		mov	r3, r0
 114 0088 3B62     		str	r3, [r7, #32]
  31:../Sources/Algorithms.c **** 	    avg_2 = ( pixels[i] + pixels[i + 1] + pixels[i + 2] ) / 3;
 115              		.loc 1 31 0
 116 008a 7B6A     		ldr	r3, [r7, #36]
 117 008c 5B00     		lsl	r3, r3, #1
 118 008e BA6B     		ldr	r2, [r7, #56]
 119 0090 D318     		add	r3, r2, r3
 120 0092 1B88     		ldrh	r3, [r3]
 121 0094 1A1C     		mov	r2, r3
 122 0096 7B6A     		ldr	r3, [r7, #36]
 123 0098 0133     		add	r3, r3, #1
 124 009a 5B00     		lsl	r3, r3, #1
 125 009c B96B     		ldr	r1, [r7, #56]
 126 009e CB18     		add	r3, r1, r3
 127 00a0 1B88     		ldrh	r3, [r3]
 128 00a2 D218     		add	r2, r2, r3
 129 00a4 7B6A     		ldr	r3, [r7, #36]
 130 00a6 0233     		add	r3, r3, #2
 131 00a8 5B00     		lsl	r3, r3, #1
 132 00aa B96B     		ldr	r1, [r7, #56]
 133 00ac CB18     		add	r3, r1, r3
 134 00ae 1B88     		ldrh	r3, [r3]
 135 00b0 D318     		add	r3, r2, r3
 136 00b2 181C     		mov	r0, r3
 137 00b4 0321     		mov	r1, #3
 138 00b6 FFF7FEFF 		bl	__aeabi_idiv
 139 00ba 031C     		mov	r3, r0
 140 00bc FB61     		str	r3, [r7, #28]
  32:../Sources/Algorithms.c **** 	    
  33:../Sources/Algorithms.c **** 	    if( (avg_2 < ( avg_1 - sensitivity )) || (avg_2 > ( avg_1 + sensitivity )) ){
 141              		.loc 1 33 0
 142 00be 3A6A     		ldr	r2, [r7, #32]
 143 00c0 3B68     		ldr	r3, [r7]
 144 00c2 D21A     		sub	r2, r2, r3
 145 00c4 FB69     		ldr	r3, [r7, #28]
 146 00c6 9A42     		cmp	r2, r3
 147 00c8 05DC     		bgt	.L3
 148              		.loc 1 33 0 is_stmt 0
 149 00ca 3A6A     		ldr	r2, [r7, #32]
 150 00cc 3B68     		ldr	r3, [r7]
 151 00ce D218     		add	r2, r2, r3
 152 00d0 FB69     		ldr	r3, [r7, #28]
 153 00d2 9A42     		cmp	r2, r3
 154 00d4 06DA     		bge	.L4
 155              	.L3:
  34:../Sources/Algorithms.c **** 	    	sideInfo.Changes++;
 156              		.loc 1 34 0 is_stmt 1
 157 00d6 3B1C     		mov	r3, r7
 158 00d8 1433     		add	r3, r3, #20
 159 00da 5B68     		ldr	r3, [r3, #4]
 160 00dc 5A1C     		add	r2, r3, #1
 161 00de 3B1C     		mov	r3, r7
 162 00e0 1433     		add	r3, r3, #20
 163 00e2 5A60     		str	r2, [r3, #4]
 164              	.L4:
  28:../Sources/Algorithms.c **** 	for(i = start; i < stop; i++){
 165              		.loc 1 28 0
 166 00e4 7B6A     		ldr	r3, [r7, #36]
 167 00e6 0133     		add	r3, r3, #1
 168 00e8 7B62     		str	r3, [r7, #36]
 169              	.L2:
  28:../Sources/Algorithms.c **** 	for(i = start; i < stop; i++){
 170              		.loc 1 28 0 is_stmt 0
 171 00ea 7A6A     		ldr	r2, [r7, #36]
 172 00ec 7B68     		ldr	r3, [r7, #4]
 173 00ee 9A42     		cmp	r2, r3
 174 00f0 9CDB     		blt	.L5
  35:../Sources/Algorithms.c **** 	    }
  36:../Sources/Algorithms.c **** 	}
  37:../Sources/Algorithms.c **** 	
  38:../Sources/Algorithms.c **** 	sideInfo.Sum /= (float)(stop - start);
 175              		.loc 1 38 0 is_stmt 1
 176 00f2 3B1C     		mov	r3, r7
 177 00f4 1433     		add	r3, r3, #20
 178 00f6 1C68     		ldr	r4, [r3]
 179 00f8 7A68     		ldr	r2, [r7, #4]
 180 00fa BB68     		ldr	r3, [r7, #8]
 181 00fc D31A     		sub	r3, r2, r3
 182 00fe 181C     		mov	r0, r3
 183 0100 FFF7FEFF 		bl	__aeabi_i2f
 184 0104 031C     		add	r3, r0, #0
 185 0106 201C     		add	r0, r4, #0
 186 0108 191C     		add	r1, r3, #0
 187 010a FFF7FEFF 		bl	__aeabi_fdiv
 188 010e 031C     		add	r3, r0, #0
 189 0110 1A1C     		add	r2, r3, #0
 190 0112 3B1C     		mov	r3, r7
 191 0114 1433     		add	r3, r3, #20
 192 0116 1A60     		str	r2, [r3]
  39:../Sources/Algorithms.c **** 	return sideInfo;
 193              		.loc 1 39 0
 194 0118 FB68     		ldr	r3, [r7, #12]
 195 011a 3A1C     		mov	r2, r7
 196 011c 1432     		add	r2, r2, #20
 197 011e 03CA     		ldmia	r2!, {r0, r1}
 198 0120 03C3     		stmia	r3!, {r0, r1}
  40:../Sources/Algorithms.c **** }
 199              		.loc 1 40 0
 200 0122 F868     		ldr	r0, [r7, #12]
 201 0124 BD46     		mov	sp, r7
 202 0126 0BB0     		add	sp, sp, #44
 203              		@ sp needed for prologue
 204 0128 90BD     		pop	{r4, r7, pc}
 205              		.cfi_endproc
 206              	.LFE0:
 208              		.global	__aeabi_fsub
 209              		.global	__aeabi_f2iz
 210              		.global	__aeabi_fcmplt
 211              		.global	__aeabi_fmul
 212              		.global	__aeabi_f2d
 213              		.global	__aeabi_dcmpgt
 214              		.global	__aeabi_dcmplt
 215 012a C046     		.section	.text.calcTurn,"ax",%progbits
 216              		.align	2
 217              		.global	calcTurn
 218              		.code	16
 219              		.thumb_func
 221              	calcTurn:
 222              	.LFB1:
  41:../Sources/Algorithms.c **** 
  42:../Sources/Algorithms.c **** float calcTurn( struct sideInfo left, struct sideInfo right ){
 223              		.loc 1 42 0
 224              		.cfi_startproc
 225 0000 90B5     		push	{r4, r7, lr}
 226              	.LCFI3:
 227              		.cfi_def_cfa_offset 12
 228              		.cfi_offset 4, -12
 229              		.cfi_offset 7, -8
 230              		.cfi_offset 14, -4
 231 0002 87B0     		sub	sp, sp, #28
 232              	.LCFI4:
 233              		.cfi_def_cfa_offset 40
 234 0004 00AF     		add	r7, sp, #0
 235              	.LCFI5:
 236              		.cfi_def_cfa_register 7
 237 0006 3C1C     		mov	r4, r7
 238 0008 0834     		add	r4, r4, #8
 239 000a 2060     		str	r0, [r4]
 240 000c 6160     		str	r1, [r4, #4]
 241 000e 391C     		mov	r1, r7
 242 0010 0A60     		str	r2, [r1]
 243 0012 4B60     		str	r3, [r1, #4]
  43:../Sources/Algorithms.c **** 	float difference = (float)abs(left.Sum - right.Sum);
 244              		.loc 1 43 0
 245 0014 3B1C     		mov	r3, r7
 246 0016 0833     		add	r3, r3, #8
 247 0018 1A68     		ldr	r2, [r3]
 248 001a 3B1C     		mov	r3, r7
 249 001c 1B68     		ldr	r3, [r3]
 250 001e 101C     		add	r0, r2, #0
 251 0020 191C     		add	r1, r3, #0
 252 0022 FFF7FEFF 		bl	__aeabi_fsub
 253 0026 031C     		add	r3, r0, #0
 254 0028 181C     		add	r0, r3, #0
 255 002a FFF7FEFF 		bl	__aeabi_f2iz
 256 002e 031C     		mov	r3, r0
 257 0030 DA17     		asr	r2, r3, #31
 258 0032 9B18     		add	r3, r3, r2
 259 0034 5340     		eor	r3, r2
 260 0036 181C     		mov	r0, r3
 261 0038 FFF7FEFF 		bl	__aeabi_i2f
 262 003c 031C     		add	r3, r0, #0
 263 003e 3B61     		str	r3, [r7, #16]
  44:../Sources/Algorithms.c **** 	difference /= DIFFDIV;
 264              		.loc 1 44 0
 265 0040 3869     		ldr	r0, [r7, #16]
 266 0042 2749     		ldr	r1, .L18+16
 267 0044 FFF7FEFF 		bl	__aeabi_fdiv
 268 0048 031C     		add	r3, r0, #0
 269 004a 3B61     		str	r3, [r7, #16]
  45:../Sources/Algorithms.c **** 	            
  46:../Sources/Algorithms.c **** 	// Default to straight ahead
  47:../Sources/Algorithms.c **** 	float steering_value = 0.0;
 270              		.loc 1 47 0
 271 004c 0023     		mov	r3, #0
 272 004e 7B61     		str	r3, [r7, #20]
  48:../Sources/Algorithms.c **** 
  49:../Sources/Algorithms.c **** 	if(left.Sum < right.Sum){
 273              		.loc 1 49 0
 274 0050 3B1C     		mov	r3, r7
 275 0052 0833     		add	r3, r3, #8
 276 0054 1A68     		ldr	r2, [r3]
 277 0056 3B1C     		mov	r3, r7
 278 0058 1B68     		ldr	r3, [r3]
 279 005a 101C     		add	r0, r2, #0
 280 005c 191C     		add	r1, r3, #0
 281 005e FFF7FEFF 		bl	__aeabi_fcmplt
 282 0062 031C     		mov	r3, r0
 283 0064 002B     		cmp	r3, #0
 284 0066 17D0     		beq	.L17
 285              	.L14:
  50:../Sources/Algorithms.c **** 		steering_value = 0.5 * difference;
 286              		.loc 1 50 0
 287 0068 3869     		ldr	r0, [r7, #16]
 288 006a FC21     		mov	r1, #252
 289 006c 8905     		lsl	r1, r1, #22
 290 006e FFF7FEFF 		bl	__aeabi_fmul
 291 0072 031C     		add	r3, r0, #0
 292 0074 7B61     		str	r3, [r7, #20]
  51:../Sources/Algorithms.c **** 	    if(steering_value > .7)steering_value = .7;
 293              		.loc 1 51 0
 294 0076 7869     		ldr	r0, [r7, #20]
 295 0078 FFF7FEFF 		bl	__aeabi_f2d
 296 007c 031C     		mov	r3, r0
 297 007e 0C1C     		mov	r4, r1
 298 0080 181C     		mov	r0, r3
 299 0082 211C     		mov	r1, r4
 300 0084 134B     		ldr	r3, .L18+4
 301 0086 124A     		ldr	r2, .L18
 302 0088 FFF7FEFF 		bl	__aeabi_dcmpgt
 303 008c 031C     		mov	r3, r0
 304 008e 002B     		cmp	r3, #0
 305 0090 19D0     		beq	.L10
 306              	.L15:
 307              		.loc 1 51 0 is_stmt 0
 308 0092 144B     		ldr	r3, .L18+20
 309 0094 7B61     		str	r3, [r7, #20]
 310 0096 16E0     		b	.L10
 311              	.L17:
  52:../Sources/Algorithms.c **** 	} else {
  53:../Sources/Algorithms.c **** 	    steering_value = -0.5 * difference;
 312              		.loc 1 53 0 is_stmt 1
 313 0098 3869     		ldr	r0, [r7, #16]
 314 009a BF21     		mov	r1, #191
 315 009c 0906     		lsl	r1, r1, #24
 316 009e FFF7FEFF 		bl	__aeabi_fmul
 317 00a2 031C     		add	r3, r0, #0
 318 00a4 7B61     		str	r3, [r7, #20]
  54:../Sources/Algorithms.c **** 	    if(steering_value < -.7)steering_value = -.7;
 319              		.loc 1 54 0
 320 00a6 7869     		ldr	r0, [r7, #20]
 321 00a8 FFF7FEFF 		bl	__aeabi_f2d
 322 00ac 031C     		mov	r3, r0
 323 00ae 0C1C     		mov	r4, r1
 324 00b0 181C     		mov	r0, r3
 325 00b2 211C     		mov	r1, r4
 326 00b4 084A     		ldr	r2, .L18+8
 327 00b6 094B     		ldr	r3, .L18+12
 328 00b8 FFF7FEFF 		bl	__aeabi_dcmplt
 329 00bc 031C     		mov	r3, r0
 330 00be 002B     		cmp	r3, #0
 331 00c0 01D0     		beq	.L10
 332              	.L16:
 333              		.loc 1 54 0 is_stmt 0
 334 00c2 094B     		ldr	r3, .L18+24
 335 00c4 7B61     		str	r3, [r7, #20]
 336              	.L10:
  55:../Sources/Algorithms.c **** 	}
  56:../Sources/Algorithms.c **** 
  57:../Sources/Algorithms.c **** 	return steering_value;
 337              		.loc 1 57 0 is_stmt 1
 338 00c6 7B69     		ldr	r3, [r7, #20]
  58:../Sources/Algorithms.c **** }
 339              		.loc 1 58 0
 340 00c8 181C     		add	r0, r3, #0
 341 00ca BD46     		mov	sp, r7
 342 00cc 07B0     		add	sp, sp, #28
 343              		@ sp needed for prologue
 344 00ce 90BD     		pop	{r4, r7, pc}
 345              	.L19:
 346              		.align	3
 347              	.L18:
 348 00d0 66666666 		.word	1717986918
 349 00d4 6666E63F 		.word	1072064102
 350 00d8 66666666 		.word	1717986918
 351 00dc 6666E6BF 		.word	-1075419546
 352 00e0 0000FA43 		.word	1140457472
 353 00e4 3333333F 		.word	1060320051
 354 00e8 333333BF 		.word	-1087163597
 355              		.cfi_endproc
 356              	.LFE1:
 358              		.global	__aeabi_dmul
 359              		.global	__aeabi_dsub
 360              		.global	__aeabi_d2f
 361              		.global	__aeabi_fcmple
 362 00ec C046C046 		.section	.text.getCommand,"ax",%progbits
 363              		.align	2
 364              		.global	getCommand
 365              		.code	16
 366              		.thumb_func
 368              	getCommand:
 369              	.LFB2:
  59:../Sources/Algorithms.c **** 
  60:../Sources/Algorithms.c **** int getCommand( uint16_t* cameraData, struct Command* command, int sensitivity, float speed ){
 370              		.loc 1 60 0
 371              		.cfi_startproc
 372 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 373              	.LCFI6:
 374              		.cfi_def_cfa_offset 20
 375              		.cfi_offset 4, -20
 376              		.cfi_offset 5, -16
 377              		.cfi_offset 6, -12
 378              		.cfi_offset 7, -8
 379              		.cfi_offset 14, -4
 380 0002 8BB0     		sub	sp, sp, #44
 381              	.LCFI7:
 382              		.cfi_def_cfa_offset 64
 383 0004 02AF     		add	r7, sp, #8
 384              	.LCFI8:
 385              		.cfi_def_cfa 7, 56
 386 0006 F860     		str	r0, [r7, #12]
 387 0008 B960     		str	r1, [r7, #8]
 388 000a 7A60     		str	r2, [r7, #4]
 389 000c 3B60     		str	r3, [r7]
  61:../Sources/Algorithms.c **** 	
  62:../Sources/Algorithms.c **** 	struct sideInfo right;
  63:../Sources/Algorithms.c **** 	right.Sum = 0.0;
 390              		.loc 1 63 0
 391 000e 3B1C     		mov	r3, r7
 392 0010 1833     		add	r3, r3, #24
 393 0012 0022     		mov	r2, #0
 394 0014 1A60     		str	r2, [r3]
  64:../Sources/Algorithms.c **** 	right.Changes = 0;
 395              		.loc 1 64 0
 396 0016 3B1C     		mov	r3, r7
 397 0018 1833     		add	r3, r3, #24
 398 001a 0022     		mov	r2, #0
 399 001c 5A60     		str	r2, [r3, #4]
  65:../Sources/Algorithms.c **** 	struct sideInfo left;
  66:../Sources/Algorithms.c **** 	left.Sum = 0.0;
 400              		.loc 1 66 0
 401 001e 3B1C     		mov	r3, r7
 402 0020 1033     		add	r3, r3, #16
 403 0022 0022     		mov	r2, #0
 404 0024 1A60     		str	r2, [r3]
  67:../Sources/Algorithms.c **** 	left.Changes = 0;
 405              		.loc 1 67 0
 406 0026 3B1C     		mov	r3, r7
 407 0028 1033     		add	r3, r3, #16
 408 002a 0022     		mov	r2, #0
 409 002c 5A60     		str	r2, [r3, #4]
  68:../Sources/Algorithms.c **** 	
  69:../Sources/Algorithms.c **** 	left = findSideInfo( START_PIXEL, (int)64, sensitivity, cameraData );
 410              		.loc 1 69 0
 411 002e 3A1C     		mov	r2, r7
 412 0030 1032     		add	r2, r2, #16
 413 0032 7B68     		ldr	r3, [r7, #4]
 414 0034 F968     		ldr	r1, [r7, #12]
 415 0036 0091     		str	r1, [sp]
 416 0038 101C     		mov	r0, r2
 417 003a 1021     		mov	r1, #16
 418 003c 4022     		mov	r2, #64
 419 003e FFF7FEFF 		bl	findSideInfo
  70:../Sources/Algorithms.c **** 	right = findSideInfo( (int)64, STOP_PIXEL, sensitivity, cameraData ); 
 420              		.loc 1 70 0
 421 0042 3A1C     		mov	r2, r7
 422 0044 1832     		add	r2, r2, #24
 423 0046 7B68     		ldr	r3, [r7, #4]
 424 0048 F968     		ldr	r1, [r7, #12]
 425 004a 0091     		str	r1, [sp]
 426 004c 101C     		mov	r0, r2
 427 004e 4021     		mov	r1, #64
 428 0050 7022     		mov	r2, #112
 429 0052 FFF7FEFF 		bl	findSideInfo
  71:../Sources/Algorithms.c **** 	
  72:../Sources/Algorithms.c **** 	command->steerValue = calcTurn(left, right);
 430              		.loc 1 72 0
 431 0056 3A1C     		mov	r2, r7
 432 0058 1032     		add	r2, r2, #16
 433 005a 3B1C     		mov	r3, r7
 434 005c 1833     		add	r3, r3, #24
 435 005e 1068     		ldr	r0, [r2]
 436 0060 5168     		ldr	r1, [r2, #4]
 437 0062 1A68     		ldr	r2, [r3]
 438 0064 5B68     		ldr	r3, [r3, #4]
 439 0066 FFF7FEFF 		bl	calcTurn
 440 006a 021C     		add	r2, r0, #0
 441 006c BB68     		ldr	r3, [r7, #8]
 442 006e 1A60     		str	r2, [r3]
  73:../Sources/Algorithms.c **** 	
  74:../Sources/Algorithms.c **** 	if(command->stop == 0) {
 443              		.loc 1 74 0
 444 0070 BB68     		ldr	r3, [r7, #8]
 445 0072 DB68     		ldr	r3, [r3, #12]
 446 0074 002B     		cmp	r3, #0
 447 0076 15D1     		bne	.L21
  75:../Sources/Algorithms.c **** 		command->stop = ( right.Changes >= 1 && left.Changes >= 1 );
 448              		.loc 1 75 0
 449 0078 3B1C     		mov	r3, r7
 450 007a 1833     		add	r3, r3, #24
 451 007c 5B68     		ldr	r3, [r3, #4]
 452 007e 002B     		cmp	r3, #0
 453 0080 06DD     		ble	.L22
 454              		.loc 1 75 0 is_stmt 0
 455 0082 3B1C     		mov	r3, r7
 456 0084 1033     		add	r3, r3, #16
 457 0086 5B68     		ldr	r3, [r3, #4]
 458 0088 002B     		cmp	r3, #0
 459 008a 01DD     		ble	.L22
 460              		.loc 1 75 0
 461 008c 0122     		mov	r2, #1
 462 008e 00E0     		b	.L23
 463              	.L22:
 464              		.loc 1 75 0
 465 0090 0022     		mov	r2, #0
 466              	.L23:
 467              		.loc 1 75 0
 468 0092 BB68     		ldr	r3, [r7, #8]
 469 0094 DA60     		str	r2, [r3, #12]
  76:../Sources/Algorithms.c **** 		command->speedL = speed;
 470              		.loc 1 76 0 is_stmt 1
 471 0096 BB68     		ldr	r3, [r7, #8]
 472 0098 3A68     		ldr	r2, [r7]
 473 009a 5A60     		str	r2, [r3, #4]
  77:../Sources/Algorithms.c **** 		command->speedR = speed;
 474              		.loc 1 77 0
 475 009c BB68     		ldr	r3, [r7, #8]
 476 009e 3A68     		ldr	r2, [r7]
 477 00a0 9A60     		str	r2, [r3, #8]
 478 00a2 59E0     		b	.L24
 479              	.L21:
  78:../Sources/Algorithms.c **** 	} else {
  79:../Sources/Algorithms.c **** 		command->speedL = fmax(0, command->speedL - (speed * SLOW_AMOUNT) );
 480              		.loc 1 79 0
 481 00a4 BB68     		ldr	r3, [r7, #8]
 482 00a6 5B68     		ldr	r3, [r3, #4]
 483 00a8 181C     		add	r0, r3, #0
 484 00aa FFF7FEFF 		bl	__aeabi_f2d
 485 00ae 051C     		mov	r5, r0
 486 00b0 0E1C     		mov	r6, r1
 487 00b2 3868     		ldr	r0, [r7]
 488 00b4 FFF7FEFF 		bl	__aeabi_f2d
 489 00b8 031C     		mov	r3, r0
 490 00ba 0C1C     		mov	r4, r1
 491 00bc 181C     		mov	r0, r3
 492 00be 211C     		mov	r1, r4
 493 00c0 344B     		ldr	r3, .L32+4
 494 00c2 334A     		ldr	r2, .L32
 495 00c4 FFF7FEFF 		bl	__aeabi_dmul
 496 00c8 031C     		mov	r3, r0
 497 00ca 0C1C     		mov	r4, r1
 498 00cc 281C     		mov	r0, r5
 499 00ce 311C     		mov	r1, r6
 500 00d0 1A1C     		mov	r2, r3
 501 00d2 231C     		mov	r3, r4
 502 00d4 FFF7FEFF 		bl	__aeabi_dsub
 503 00d8 031C     		mov	r3, r0
 504 00da 0C1C     		mov	r4, r1
 505 00dc 2E49     		ldr	r1, .L32+8
 506 00de 2F4A     		ldr	r2, .L32+12
 507 00e0 081C     		mov	r0, r1
 508 00e2 111C     		mov	r1, r2
 509 00e4 1A1C     		mov	r2, r3
 510 00e6 231C     		mov	r3, r4
 511 00e8 FFF7FEFF 		bl	fmax
 512 00ec 031C     		mov	r3, r0
 513 00ee 0C1C     		mov	r4, r1
 514 00f0 181C     		mov	r0, r3
 515 00f2 211C     		mov	r1, r4
 516 00f4 FFF7FEFF 		bl	__aeabi_d2f
 517 00f8 021C     		add	r2, r0, #0
 518 00fa BB68     		ldr	r3, [r7, #8]
 519 00fc 5A60     		str	r2, [r3, #4]
  80:../Sources/Algorithms.c **** 		command->speedR = fmax(0, command->speedR - (speed * SLOW_AMOUNT) );
 520              		.loc 1 80 0
 521 00fe BB68     		ldr	r3, [r7, #8]
 522 0100 9B68     		ldr	r3, [r3, #8]
 523 0102 181C     		add	r0, r3, #0
 524 0104 FFF7FEFF 		bl	__aeabi_f2d
 525 0108 051C     		mov	r5, r0
 526 010a 0E1C     		mov	r6, r1
 527 010c 3868     		ldr	r0, [r7]
 528 010e FFF7FEFF 		bl	__aeabi_f2d
 529 0112 031C     		mov	r3, r0
 530 0114 0C1C     		mov	r4, r1
 531 0116 181C     		mov	r0, r3
 532 0118 211C     		mov	r1, r4
 533 011a 1E4B     		ldr	r3, .L32+4
 534 011c 1C4A     		ldr	r2, .L32
 535 011e FFF7FEFF 		bl	__aeabi_dmul
 536 0122 031C     		mov	r3, r0
 537 0124 0C1C     		mov	r4, r1
 538 0126 281C     		mov	r0, r5
 539 0128 311C     		mov	r1, r6
 540 012a 1A1C     		mov	r2, r3
 541 012c 231C     		mov	r3, r4
 542 012e FFF7FEFF 		bl	__aeabi_dsub
 543 0132 031C     		mov	r3, r0
 544 0134 0C1C     		mov	r4, r1
 545 0136 1849     		ldr	r1, .L32+8
 546 0138 184A     		ldr	r2, .L32+12
 547 013a 081C     		mov	r0, r1
 548 013c 111C     		mov	r1, r2
 549 013e 1A1C     		mov	r2, r3
 550 0140 231C     		mov	r3, r4
 551 0142 FFF7FEFF 		bl	fmax
 552 0146 031C     		mov	r3, r0
 553 0148 0C1C     		mov	r4, r1
 554 014a 181C     		mov	r0, r3
 555 014c 211C     		mov	r1, r4
 556 014e FFF7FEFF 		bl	__aeabi_d2f
 557 0152 021C     		add	r2, r0, #0
 558 0154 BB68     		ldr	r3, [r7, #8]
 559 0156 9A60     		str	r2, [r3, #8]
 560              	.L24:
  81:../Sources/Algorithms.c **** 	}     
  82:../Sources/Algorithms.c **** 	
  83:../Sources/Algorithms.c **** 	if( command->speedL  <= 0 && command->speedR <= 0 )return 0;
 561              		.loc 1 83 0
 562 0158 BB68     		ldr	r3, [r7, #8]
 563 015a 5B68     		ldr	r3, [r3, #4]
 564 015c 181C     		add	r0, r3, #0
 565 015e 0021     		mov	r1, #0
 566 0160 FFF7FEFF 		bl	__aeabi_fcmple
 567 0164 031C     		mov	r3, r0
 568 0166 002B     		cmp	r3, #0
 569 0168 0AD0     		beq	.L25
 570              	.L30:
 571              		.loc 1 83 0 is_stmt 0
 572 016a BB68     		ldr	r3, [r7, #8]
 573 016c 9B68     		ldr	r3, [r3, #8]
 574 016e 181C     		add	r0, r3, #0
 575 0170 0021     		mov	r1, #0
 576 0172 FFF7FEFF 		bl	__aeabi_fcmple
 577 0176 031C     		mov	r3, r0
 578 0178 002B     		cmp	r3, #0
 579 017a 01D0     		beq	.L25
 580              	.L31:
 581 017c 0023     		mov	r3, #0
 582 017e 00E0     		b	.L29
 583              	.L25:
  84:../Sources/Algorithms.c **** 	
  85:../Sources/Algorithms.c **** 	return 1;
 584              		.loc 1 85 0 is_stmt 1
 585 0180 0123     		mov	r3, #1
 586              	.L29:
  86:../Sources/Algorithms.c **** }
 587              		.loc 1 86 0
 588 0182 181C     		mov	r0, r3
 589 0184 BD46     		mov	sp, r7
 590 0186 09B0     		add	sp, sp, #36
 591              		@ sp needed for prologue
 592 0188 F0BD     		pop	{r4, r5, r6, r7, pc}
 593              	.L33:
 594 018a C046C046 		.align	3
 594      C046
 595              	.L32:
 596 0190 FCA9F1D2 		.word	-755914244
 597 0194 4D62603F 		.word	1063281229
 598 0198 00000000 		.word	0
 599 019c 00000000 		.word	0
 600              		.cfi_endproc
 601              	.LFE2:
 603              		.section	.text.getSensitivity,"ax",%progbits
 604              		.align	2
 605              		.global	getSensitivity
 606              		.code	16
 607              		.thumb_func
 609              	getSensitivity:
 610              	.LFB3:
  87:../Sources/Algorithms.c **** 
  88:../Sources/Algorithms.c **** int getSensitivity(){
 611              		.loc 1 88 0
 612              		.cfi_startproc
 613 0000 80B5     		push	{r7, lr}
 614              	.LCFI9:
 615              		.cfi_def_cfa_offset 8
 616              		.cfi_offset 7, -8
 617              		.cfi_offset 14, -4
 618 0002 00AF     		add	r7, sp, #0
 619              	.LCFI10:
 620              		.cfi_def_cfa_register 7
  89:../Sources/Algorithms.c **** 	return( (int)( SENSITIVITY * ( TFC_ReadPot(0) + 1 ) ) );
 621              		.loc 1 89 0
 622 0004 0020     		mov	r0, #0
 623 0006 FFF7FEFF 		bl	TFC_ReadPot
 624 000a 031C     		add	r3, r0, #0
 625 000c 181C     		add	r0, r3, #0
 626 000e FE21     		mov	r1, #254
 627 0010 8905     		lsl	r1, r1, #22
 628 0012 FFF7FEFF 		bl	__aeabi_fadd
 629 0016 031C     		add	r3, r0, #0
 630 0018 181C     		add	r0, r3, #0
 631 001a 0549     		ldr	r1, .L36
 632 001c FFF7FEFF 		bl	__aeabi_fmul
 633 0020 031C     		add	r3, r0, #0
 634 0022 181C     		add	r0, r3, #0
 635 0024 FFF7FEFF 		bl	__aeabi_f2iz
 636 0028 031C     		mov	r3, r0
  90:../Sources/Algorithms.c **** }
 637              		.loc 1 90 0
 638 002a 181C     		mov	r0, r3
 639 002c BD46     		mov	sp, r7
 640              		@ sp needed for prologue
 641 002e 80BD     		pop	{r7, pc}
 642              	.L37:
 643              		.align	2
 644              	.L36:
 645 0030 00007A44 		.word	1148846080
 646              		.cfi_endproc
 647              	.LFE3:
 649              		.section	.text.getSpeed,"ax",%progbits
 650              		.align	2
 651              		.global	getSpeed
 652              		.code	16
 653              		.thumb_func
 655              	getSpeed:
 656              	.LFB4:
  91:../Sources/Algorithms.c **** 
  92:../Sources/Algorithms.c **** float getSpeed(){
 657              		.loc 1 92 0
 658              		.cfi_startproc
 659 0000 80B5     		push	{r7, lr}
 660              	.LCFI11:
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 7, -8
 663              		.cfi_offset 14, -4
 664 0002 00AF     		add	r7, sp, #0
 665              	.LCFI12:
 666              		.cfi_def_cfa_register 7
  93:../Sources/Algorithms.c **** 	return( ( SPEED * ( TFC_ReadPot(1) + 1 ) ) );
 667              		.loc 1 93 0
 668 0004 0120     		mov	r0, #1
 669 0006 FFF7FEFF 		bl	TFC_ReadPot
 670 000a 031C     		add	r3, r0, #0
 671 000c 181C     		add	r0, r3, #0
 672 000e FE21     		mov	r1, #254
 673 0010 8905     		lsl	r1, r1, #22
 674 0012 FFF7FEFF 		bl	__aeabi_fadd
 675 0016 031C     		add	r3, r0, #0
 676 0018 181C     		add	r0, r3, #0
 677 001a FC21     		mov	r1, #252
 678 001c 8905     		lsl	r1, r1, #22
 679 001e FFF7FEFF 		bl	__aeabi_fmul
 680 0022 031C     		add	r3, r0, #0
  94:../Sources/Algorithms.c **** }
 681              		.loc 1 94 0
 682 0024 181C     		add	r0, r3, #0
 683 0026 BD46     		mov	sp, r7
 684              		@ sp needed for prologue
 685 0028 80BD     		pop	{r7, pc}
 686              		.cfi_endproc
 687              	.LFE4:
 689 002a C046     		.text
 690              	.Letext0:
 691              		.file 2 "../Sources/Common.h"
 692              		.file 3 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
DEFINED SYMBOLS
                            *ABS*:00000000 Algorithms.c
C:\Users\Jared\AppData\Local\Temp\ccbgFGsl.s:22     .text.findSideInfo:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccbgFGsl.s:27     .text.findSideInfo:00000000 findSideInfo
C:\Users\Jared\AppData\Local\Temp\ccbgFGsl.s:216    .text.calcTurn:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccbgFGsl.s:221    .text.calcTurn:00000000 calcTurn
C:\Users\Jared\AppData\Local\Temp\ccbgFGsl.s:348    .text.calcTurn:000000d0 $d
C:\Users\Jared\AppData\Local\Temp\ccbgFGsl.s:363    .text.getCommand:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccbgFGsl.s:368    .text.getCommand:00000000 getCommand
C:\Users\Jared\AppData\Local\Temp\ccbgFGsl.s:596    .text.getCommand:00000190 $d
C:\Users\Jared\AppData\Local\Temp\ccbgFGsl.s:604    .text.getSensitivity:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccbgFGsl.s:609    .text.getSensitivity:00000000 getSensitivity
C:\Users\Jared\AppData\Local\Temp\ccbgFGsl.s:645    .text.getSensitivity:00000030 $d
C:\Users\Jared\AppData\Local\Temp\ccbgFGsl.s:650    .text.getSpeed:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccbgFGsl.s:655    .text.getSpeed:00000000 getSpeed
                     .debug_frame:00000010 $d
C:\Users\Jared\AppData\Local\Temp\ccbgFGsl.s:362    .text.calcTurn:000000ec $t

UNDEFINED SYMBOLS
__aeabi_i2f
__aeabi_fadd
__aeabi_idiv
__aeabi_fdiv
__aeabi_fsub
__aeabi_f2iz
__aeabi_fcmplt
__aeabi_fmul
__aeabi_f2d
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_fcmple
fmax
TFC_ReadPot
