   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Algorithms.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_fadd
  18              		.global	__aeabi_fmul
  19              		.global	__aeabi_f2iz
  20              		.section	.text.determineSensitivity,"ax",%progbits
  21              		.align	2
  22              		.global	determineSensitivity
  23              		.code	16
  24              		.thumb_func
  26              	determineSensitivity:
  27              	.LFB0:
  28              		.file 1 "../Sources/Algorithms.c"
   1:../Sources/Algorithms.c **** /*
   2:../Sources/Algorithms.c ****  * AlgoOne.c
   3:../Sources/Algorithms.c ****  *
   4:../Sources/Algorithms.c ****  *  Created on: Sep 17, 2015
   5:../Sources/Algorithms.c ****  *      Author: Jared
   6:../Sources/Algorithms.c ****  */
   7:../Sources/Algorithms.c **** 
   8:../Sources/Algorithms.c **** #include "derivative.h" /* include peripheral declarations */
   9:../Sources/Algorithms.c **** #include "TFC\TFC.h"
  10:../Sources/Algorithms.c **** #include "Common.h"
  11:../Sources/Algorithms.c **** #include "Math.h"
  12:../Sources/Algorithms.c **** #include "stdlib.h"
  13:../Sources/Algorithms.c **** 
  14:../Sources/Algorithms.c **** #define START_PIXEL 15
  15:../Sources/Algorithms.c **** #define STOP_PIXEL 113
  16:../Sources/Algorithms.c **** #define MID_POINT (((STOP_PIXEL-START_PIXEL)/2)+START_PIXEL)
  17:../Sources/Algorithms.c **** #define LEFT_PIXELS MID_POINT-START_PIXEL
  18:../Sources/Algorithms.c **** #define RIGHT_PIXELS STOP_PIXEL-MID_POINT 
  19:../Sources/Algorithms.c **** #define DIFFDIV 1000
  20:../Sources/Algorithms.c **** #define SENSITIVITY 1000
  21:../Sources/Algorithms.c **** #define STOP_CYCLES 5000
  22:../Sources/Algorithms.c **** #define SPEED .50
  23:../Sources/Algorithms.c **** 
  24:../Sources/Algorithms.c **** 
  25:../Sources/Algorithms.c **** struct sideInfo{
  26:../Sources/Algorithms.c **** 	double Sum;
  27:../Sources/Algorithms.c **** 	int Changes;
  28:../Sources/Algorithms.c **** };
  29:../Sources/Algorithms.c **** 
  30:../Sources/Algorithms.c **** int determineSensitivity(){
  29              		.loc 1 30 0
  30              		.cfi_startproc
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
  31:../Sources/Algorithms.c **** 	return( (int)( SENSITIVITY * ( TFC_ReadPot(0) + 1 ) ) );
  39              		.loc 1 31 0
  40 0004 0020     		mov	r0, #0
  41 0006 FFF7FEFF 		bl	TFC_ReadPot
  42 000a 031C     		add	r3, r0, #0
  43 000c 181C     		add	r0, r3, #0
  44 000e FE21     		mov	r1, #254
  45 0010 8905     		lsl	r1, r1, #22
  46 0012 FFF7FEFF 		bl	__aeabi_fadd
  47 0016 031C     		add	r3, r0, #0
  48 0018 181C     		add	r0, r3, #0
  49 001a 0549     		ldr	r1, .L3
  50 001c FFF7FEFF 		bl	__aeabi_fmul
  51 0020 031C     		add	r3, r0, #0
  52 0022 181C     		add	r0, r3, #0
  53 0024 FFF7FEFF 		bl	__aeabi_f2iz
  54 0028 031C     		mov	r3, r0
  32:../Sources/Algorithms.c **** }
  55              		.loc 1 32 0
  56 002a 181C     		mov	r0, r3
  57 002c BD46     		mov	sp, r7
  58              		@ sp needed for prologue
  59 002e 80BD     		pop	{r7, pc}
  60              	.L4:
  61              		.align	2
  62              	.L3:
  63 0030 00007A44 		.word	1148846080
  64              		.cfi_endproc
  65              	.LFE0:
  67              		.section	.text.determineSpeed,"ax",%progbits
  68              		.align	2
  69              		.global	determineSpeed
  70              		.code	16
  71              		.thumb_func
  73              	determineSpeed:
  74              	.LFB1:
  33:../Sources/Algorithms.c **** 
  34:../Sources/Algorithms.c **** float determineSpeed(){
  75              		.loc 1 34 0
  76              		.cfi_startproc
  77 0000 80B5     		push	{r7, lr}
  78              	.LCFI2:
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 7, -8
  81              		.cfi_offset 14, -4
  82 0002 00AF     		add	r7, sp, #0
  83              	.LCFI3:
  84              		.cfi_def_cfa_register 7
  35:../Sources/Algorithms.c **** 	return( ( SPEED * ( TFC_ReadPot(1) + 1 ) ) );
  85              		.loc 1 35 0
  86 0004 0120     		mov	r0, #1
  87 0006 FFF7FEFF 		bl	TFC_ReadPot
  88 000a 031C     		add	r3, r0, #0
  89 000c 181C     		add	r0, r3, #0
  90 000e FE21     		mov	r1, #254
  91 0010 8905     		lsl	r1, r1, #22
  92 0012 FFF7FEFF 		bl	__aeabi_fadd
  93 0016 031C     		add	r3, r0, #0
  94 0018 181C     		add	r0, r3, #0
  95 001a FC21     		mov	r1, #252
  96 001c 8905     		lsl	r1, r1, #22
  97 001e FFF7FEFF 		bl	__aeabi_fmul
  98 0022 031C     		add	r3, r0, #0
  36:../Sources/Algorithms.c **** }
  99              		.loc 1 36 0
 100 0024 181C     		add	r0, r3, #0
 101 0026 BD46     		mov	sp, r7
 102              		@ sp needed for prologue
 103 0028 80BD     		pop	{r7, pc}
 104              		.cfi_endproc
 105              	.LFE1:
 107              		.global	__aeabi_i2d
 108              		.global	__aeabi_dadd
 109              		.global	__aeabi_idiv
 110              		.global	__aeabi_ddiv
 111 002a C046     		.section	.text.findSideInfo,"ax",%progbits
 112              		.align	2
 113              		.global	findSideInfo
 114              		.code	16
 115              		.thumb_func
 117              	findSideInfo:
 118              	.LFB2:
  37:../Sources/Algorithms.c **** 
  38:../Sources/Algorithms.c **** struct sideInfo findSideInfo( int start, int stop, int threshold ){
 119              		.loc 1 38 0
 120              		.cfi_startproc
 121 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 122              	.LCFI4:
 123              		.cfi_def_cfa_offset 20
 124              		.cfi_offset 4, -20
 125              		.cfi_offset 5, -16
 126              		.cfi_offset 6, -12
 127              		.cfi_offset 7, -8
 128              		.cfi_offset 14, -4
 129 0002 8DB0     		sub	sp, sp, #52
 130              	.LCFI5:
 131              		.cfi_def_cfa_offset 72
 132 0004 00AF     		add	r7, sp, #0
 133              	.LCFI6:
 134              		.cfi_def_cfa_register 7
 135 0006 F860     		str	r0, [r7, #12]
 136 0008 B960     		str	r1, [r7, #8]
 137 000a 7A60     		str	r2, [r7, #4]
 138 000c 3B60     		str	r3, [r7]
  39:../Sources/Algorithms.c **** 	struct sideInfo sideInfo;
  40:../Sources/Algorithms.c **** 	sideInfo.Sum = 0.0;
 139              		.loc 1 40 0
 140 000e 3A1C     		mov	r2, r7
 141 0010 1032     		add	r2, r2, #16
 142 0012 584C     		ldr	r4, .L13+4
 143 0014 564B     		ldr	r3, .L13
 144 0016 1360     		str	r3, [r2]
 145 0018 5460     		str	r4, [r2, #4]
  41:../Sources/Algorithms.c **** 	sideInfo.Changes = 0;
 146              		.loc 1 41 0
 147 001a 3B1C     		mov	r3, r7
 148 001c 1033     		add	r3, r3, #16
 149 001e 0022     		mov	r2, #0
 150 0020 9A60     		str	r2, [r3, #8]
  42:../Sources/Algorithms.c **** 	
  43:../Sources/Algorithms.c **** 	int i;
  44:../Sources/Algorithms.c **** 	int avg_1 = 0;
 151              		.loc 1 44 0
 152 0022 0023     		mov	r3, #0
 153 0024 BB62     		str	r3, [r7, #40]
  45:../Sources/Algorithms.c **** 	int avg_2 = 0;
 154              		.loc 1 45 0
 155 0026 0023     		mov	r3, #0
 156 0028 7B62     		str	r3, [r7, #36]
  46:../Sources/Algorithms.c **** 	for(i = start; i < stop; i++){
 157              		.loc 1 46 0
 158 002a BB68     		ldr	r3, [r7, #8]
 159 002c FB62     		str	r3, [r7, #44]
 160 002e 71E0     		b	.L8
 161              	.L11:
  47:../Sources/Algorithms.c **** 		sideInfo.Sum += LineScanImage0[i];
 162              		.loc 1 47 0
 163 0030 3B1C     		mov	r3, r7
 164 0032 1033     		add	r3, r3, #16
 165 0034 1D68     		ldr	r5, [r3]
 166 0036 5E68     		ldr	r6, [r3, #4]
 167 0038 4F4B     		ldr	r3, .L13+8
 168 003a 1A68     		ldr	r2, [r3]
 169 003c FB6A     		ldr	r3, [r7, #44]
 170 003e 5B00     		lsl	r3, r3, #1
 171 0040 D318     		add	r3, r2, r3
 172 0042 1B88     		ldrh	r3, [r3]
 173 0044 9BB2     		uxth	r3, r3
 174 0046 181C     		mov	r0, r3
 175 0048 FFF7FEFF 		bl	__aeabi_i2d
 176 004c 031C     		mov	r3, r0
 177 004e 0C1C     		mov	r4, r1
 178 0050 281C     		mov	r0, r5
 179 0052 311C     		mov	r1, r6
 180 0054 1A1C     		mov	r2, r3
 181 0056 231C     		mov	r3, r4
 182 0058 FFF7FEFF 		bl	__aeabi_dadd
 183 005c 031C     		mov	r3, r0
 184 005e 0C1C     		mov	r4, r1
 185 0060 3A1C     		mov	r2, r7
 186 0062 1032     		add	r2, r2, #16
 187 0064 1360     		str	r3, [r2]
 188 0066 5460     		str	r4, [r2, #4]
  48:../Sources/Algorithms.c **** 	    avg_1 = ( LineScanImage0[i - 2] + LineScanImage0[i - 1] + LineScanImage0[i] ) / 3;
 189              		.loc 1 48 0
 190 0068 434B     		ldr	r3, .L13+8
 191 006a 1A68     		ldr	r2, [r3]
 192 006c FB6A     		ldr	r3, [r7, #44]
 193 006e 023B     		sub	r3, r3, #2
 194 0070 5B00     		lsl	r3, r3, #1
 195 0072 D318     		add	r3, r2, r3
 196 0074 1B88     		ldrh	r3, [r3]
 197 0076 9BB2     		uxth	r3, r3
 198 0078 1A1C     		mov	r2, r3
 199 007a 3F4B     		ldr	r3, .L13+8
 200 007c 1968     		ldr	r1, [r3]
 201 007e FB6A     		ldr	r3, [r7, #44]
 202 0080 013B     		sub	r3, r3, #1
 203 0082 5B00     		lsl	r3, r3, #1
 204 0084 CB18     		add	r3, r1, r3
 205 0086 1B88     		ldrh	r3, [r3]
 206 0088 9BB2     		uxth	r3, r3
 207 008a D218     		add	r2, r2, r3
 208 008c 3A4B     		ldr	r3, .L13+8
 209 008e 1968     		ldr	r1, [r3]
 210 0090 FB6A     		ldr	r3, [r7, #44]
 211 0092 5B00     		lsl	r3, r3, #1
 212 0094 CB18     		add	r3, r1, r3
 213 0096 1B88     		ldrh	r3, [r3]
 214 0098 9BB2     		uxth	r3, r3
 215 009a D318     		add	r3, r2, r3
 216 009c 181C     		mov	r0, r3
 217 009e 0321     		mov	r1, #3
 218 00a0 FFF7FEFF 		bl	__aeabi_idiv
 219 00a4 031C     		mov	r3, r0
 220 00a6 BB62     		str	r3, [r7, #40]
  49:../Sources/Algorithms.c **** 	    avg_2 = ( LineScanImage0[i] + LineScanImage0[i + 1] + LineScanImage0[i + 2] ) / 3;
 221              		.loc 1 49 0
 222 00a8 334B     		ldr	r3, .L13+8
 223 00aa 1A68     		ldr	r2, [r3]
 224 00ac FB6A     		ldr	r3, [r7, #44]
 225 00ae 5B00     		lsl	r3, r3, #1
 226 00b0 D318     		add	r3, r2, r3
 227 00b2 1B88     		ldrh	r3, [r3]
 228 00b4 9BB2     		uxth	r3, r3
 229 00b6 1A1C     		mov	r2, r3
 230 00b8 2F4B     		ldr	r3, .L13+8
 231 00ba 1968     		ldr	r1, [r3]
 232 00bc FB6A     		ldr	r3, [r7, #44]
 233 00be 0133     		add	r3, r3, #1
 234 00c0 5B00     		lsl	r3, r3, #1
 235 00c2 CB18     		add	r3, r1, r3
 236 00c4 1B88     		ldrh	r3, [r3]
 237 00c6 9BB2     		uxth	r3, r3
 238 00c8 D218     		add	r2, r2, r3
 239 00ca 2B4B     		ldr	r3, .L13+8
 240 00cc 1968     		ldr	r1, [r3]
 241 00ce FB6A     		ldr	r3, [r7, #44]
 242 00d0 0233     		add	r3, r3, #2
 243 00d2 5B00     		lsl	r3, r3, #1
 244 00d4 CB18     		add	r3, r1, r3
 245 00d6 1B88     		ldrh	r3, [r3]
 246 00d8 9BB2     		uxth	r3, r3
 247 00da D318     		add	r3, r2, r3
 248 00dc 181C     		mov	r0, r3
 249 00de 0321     		mov	r1, #3
 250 00e0 FFF7FEFF 		bl	__aeabi_idiv
 251 00e4 031C     		mov	r3, r0
 252 00e6 7B62     		str	r3, [r7, #36]
  50:../Sources/Algorithms.c **** 	    
  51:../Sources/Algorithms.c **** 	    if( (avg_2 < ( avg_1 - threshold )) || (avg_2 > ( avg_1 + threshold )) ){
 253              		.loc 1 51 0
 254 00e8 BA6A     		ldr	r2, [r7, #40]
 255 00ea 3B68     		ldr	r3, [r7]
 256 00ec D21A     		sub	r2, r2, r3
 257 00ee 7B6A     		ldr	r3, [r7, #36]
 258 00f0 9A42     		cmp	r2, r3
 259 00f2 05DC     		bgt	.L9
 260              		.loc 1 51 0 is_stmt 0
 261 00f4 BA6A     		ldr	r2, [r7, #40]
 262 00f6 3B68     		ldr	r3, [r7]
 263 00f8 D218     		add	r2, r2, r3
 264 00fa 7B6A     		ldr	r3, [r7, #36]
 265 00fc 9A42     		cmp	r2, r3
 266 00fe 06DA     		bge	.L10
 267              	.L9:
  52:../Sources/Algorithms.c **** 	    	sideInfo.Changes++;
 268              		.loc 1 52 0 is_stmt 1
 269 0100 3B1C     		mov	r3, r7
 270 0102 1033     		add	r3, r3, #16
 271 0104 9B68     		ldr	r3, [r3, #8]
 272 0106 5A1C     		add	r2, r3, #1
 273 0108 3B1C     		mov	r3, r7
 274 010a 1033     		add	r3, r3, #16
 275 010c 9A60     		str	r2, [r3, #8]
 276              	.L10:
  46:../Sources/Algorithms.c **** 	for(i = start; i < stop; i++){
 277              		.loc 1 46 0
 278 010e FB6A     		ldr	r3, [r7, #44]
 279 0110 0133     		add	r3, r3, #1
 280 0112 FB62     		str	r3, [r7, #44]
 281              	.L8:
  46:../Sources/Algorithms.c **** 	for(i = start; i < stop; i++){
 282              		.loc 1 46 0 is_stmt 0
 283 0114 FA6A     		ldr	r2, [r7, #44]
 284 0116 7B68     		ldr	r3, [r7, #4]
 285 0118 9A42     		cmp	r2, r3
 286 011a 89DB     		blt	.L11
  53:../Sources/Algorithms.c **** 	    }
  54:../Sources/Algorithms.c **** 	}
  55:../Sources/Algorithms.c **** 	
  56:../Sources/Algorithms.c **** 	sideInfo.Sum /= (double)(stop - start);
 287              		.loc 1 56 0 is_stmt 1
 288 011c 3B1C     		mov	r3, r7
 289 011e 1033     		add	r3, r3, #16
 290 0120 1D68     		ldr	r5, [r3]
 291 0122 5E68     		ldr	r6, [r3, #4]
 292 0124 7A68     		ldr	r2, [r7, #4]
 293 0126 BB68     		ldr	r3, [r7, #8]
 294 0128 D31A     		sub	r3, r2, r3
 295 012a 181C     		mov	r0, r3
 296 012c FFF7FEFF 		bl	__aeabi_i2d
 297 0130 031C     		mov	r3, r0
 298 0132 0C1C     		mov	r4, r1
 299 0134 281C     		mov	r0, r5
 300 0136 311C     		mov	r1, r6
 301 0138 1A1C     		mov	r2, r3
 302 013a 231C     		mov	r3, r4
 303 013c FFF7FEFF 		bl	__aeabi_ddiv
 304 0140 031C     		mov	r3, r0
 305 0142 0C1C     		mov	r4, r1
 306 0144 3A1C     		mov	r2, r7
 307 0146 1032     		add	r2, r2, #16
 308 0148 1360     		str	r3, [r2]
 309 014a 5460     		str	r4, [r2, #4]
  57:../Sources/Algorithms.c **** 	return(sideInfo);
 310              		.loc 1 57 0
 311 014c FA68     		ldr	r2, [r7, #12]
 312 014e 3B1C     		mov	r3, r7
 313 0150 1033     		add	r3, r3, #16
 314 0152 111C     		mov	r1, r2
 315 0154 1A1C     		mov	r2, r3
 316 0156 1023     		mov	r3, #16
 317 0158 081C     		mov	r0, r1
 318 015a 111C     		mov	r1, r2
 319 015c 1A1C     		mov	r2, r3
 320 015e FFF7FEFF 		bl	memcpy
  58:../Sources/Algorithms.c **** }
 321              		.loc 1 58 0
 322 0162 F868     		ldr	r0, [r7, #12]
 323 0164 BD46     		mov	sp, r7
 324 0166 0DB0     		add	sp, sp, #52
 325              		@ sp needed for prologue
 326 0168 F0BD     		pop	{r4, r5, r6, r7, pc}
 327              	.L14:
 328 016a C046C046 		.align	3
 328      C046
 329              	.L13:
 330 0170 00000000 		.word	0
 331 0174 00000000 		.word	0
 332 0178 00000000 		.word	LineScanImage0
 333              		.cfi_endproc
 334              	.LFE2:
 336              		.global	__aeabi_dsub
 337              		.global	__aeabi_d2iz
 338              		.global	__aeabi_dcmplt
 339              		.global	__aeabi_dmul
 340              		.global	__aeabi_dcmpgt
 341              		.global	__aeabi_d2f
 342 017c C046C046 		.section	.text.setTurn,"ax",%progbits
 343              		.align	2
 344              		.global	setTurn
 345              		.code	16
 346              		.thumb_func
 348              	setTurn:
 349              	.LFB3:
  59:../Sources/Algorithms.c **** 
  60:../Sources/Algorithms.c **** void setTurn( struct sideInfo left, struct sideInfo right ){
 350              		.loc 1 60 0
 351              		.cfi_startproc
 352 0000 90B5     		push	{r4, r7, lr}
 353              	.LCFI7:
 354              		.cfi_def_cfa_offset 12
 355              		.cfi_offset 4, -12
 356              		.cfi_offset 7, -8
 357              		.cfi_offset 14, -4
 358 0002 89B0     		sub	sp, sp, #36
 359              	.LCFI8:
 360              		.cfi_def_cfa_offset 48
 361 0004 00AF     		add	r7, sp, #0
 362              	.LCFI9:
 363              		.cfi_def_cfa_register 7
 364 0006 3C1C     		mov	r4, r7
 365 0008 2060     		str	r0, [r4]
 366 000a 6160     		str	r1, [r4, #4]
 367 000c A260     		str	r2, [r4, #8]
 368 000e E360     		str	r3, [r4, #12]
  61:../Sources/Algorithms.c **** 	double difference = (double)abs(left.Sum - right.Sum);
 369              		.loc 1 61 0
 370 0010 3B1C     		mov	r3, r7
 371 0012 1968     		ldr	r1, [r3]
 372 0014 5A68     		ldr	r2, [r3, #4]
 373 0016 3B1C     		mov	r3, r7
 374 0018 3033     		add	r3, r3, #48
 375 001a 5C68     		ldr	r4, [r3, #4]
 376 001c 1B68     		ldr	r3, [r3]
 377 001e 081C     		mov	r0, r1
 378 0020 111C     		mov	r1, r2
 379 0022 1A1C     		mov	r2, r3
 380 0024 231C     		mov	r3, r4
 381 0026 FFF7FEFF 		bl	__aeabi_dsub
 382 002a 031C     		mov	r3, r0
 383 002c 0C1C     		mov	r4, r1
 384 002e 181C     		mov	r0, r3
 385 0030 211C     		mov	r1, r4
 386 0032 FFF7FEFF 		bl	__aeabi_d2iz
 387 0036 031C     		mov	r3, r0
 388 0038 DA17     		asr	r2, r3, #31
 389 003a 9B18     		add	r3, r3, r2
 390 003c 5340     		eor	r3, r2
 391 003e 181C     		mov	r0, r3
 392 0040 FFF7FEFF 		bl	__aeabi_i2d
 393 0044 031C     		mov	r3, r0
 394 0046 0C1C     		mov	r4, r1
 395 0048 3B61     		str	r3, [r7, #16]
 396 004a 7C61     		str	r4, [r7, #20]
  62:../Sources/Algorithms.c **** 	difference /= DIFFDIV;
 397              		.loc 1 62 0
 398 004c 3869     		ldr	r0, [r7, #16]
 399 004e 7969     		ldr	r1, [r7, #20]
 400 0050 2C4B     		ldr	r3, .L25+4
 401 0052 2B4A     		ldr	r2, .L25
 402 0054 FFF7FEFF 		bl	__aeabi_ddiv
 403 0058 031C     		mov	r3, r0
 404 005a 0C1C     		mov	r4, r1
 405 005c 3B61     		str	r3, [r7, #16]
 406 005e 7C61     		str	r4, [r7, #20]
  63:../Sources/Algorithms.c **** 	            
  64:../Sources/Algorithms.c **** 	// Default to straight ahead
  65:../Sources/Algorithms.c **** 	double steering_value = 0.0;
 407              		.loc 1 65 0
 408 0060 294B     		ldr	r3, .L25+8
 409 0062 2A4C     		ldr	r4, .L25+12
 410 0064 BB61     		str	r3, [r7, #24]
 411 0066 FC61     		str	r4, [r7, #28]
  66:../Sources/Algorithms.c **** 
  67:../Sources/Algorithms.c **** 	if(left.Sum < right.Sum){
 412              		.loc 1 67 0
 413 0068 3B1C     		mov	r3, r7
 414 006a 1968     		ldr	r1, [r3]
 415 006c 5A68     		ldr	r2, [r3, #4]
 416 006e 3B1C     		mov	r3, r7
 417 0070 3033     		add	r3, r3, #48
 418 0072 5C68     		ldr	r4, [r3, #4]
 419 0074 1B68     		ldr	r3, [r3]
 420 0076 081C     		mov	r0, r1
 421 0078 111C     		mov	r1, r2
 422 007a 1A1C     		mov	r2, r3
 423 007c 231C     		mov	r3, r4
 424 007e FFF7FEFF 		bl	__aeabi_dcmplt
 425 0082 031C     		mov	r3, r0
 426 0084 002B     		cmp	r3, #0
 427 0086 17D0     		beq	.L24
 428              	.L21:
  68:../Sources/Algorithms.c **** 		steering_value = 0.5 * difference;
 429              		.loc 1 68 0
 430 0088 3869     		ldr	r0, [r7, #16]
 431 008a 7969     		ldr	r1, [r7, #20]
 432 008c 204A     		ldr	r2, .L25+16
 433 008e 214B     		ldr	r3, .L25+20
 434 0090 FFF7FEFF 		bl	__aeabi_dmul
 435 0094 031C     		mov	r3, r0
 436 0096 0C1C     		mov	r4, r1
 437 0098 BB61     		str	r3, [r7, #24]
 438 009a FC61     		str	r4, [r7, #28]
  69:../Sources/Algorithms.c **** 	    if(steering_value > .7)steering_value = .7;
 439              		.loc 1 69 0
 440 009c B869     		ldr	r0, [r7, #24]
 441 009e F969     		ldr	r1, [r7, #28]
 442 00a0 1D4A     		ldr	r2, .L25+24
 443 00a2 1E4B     		ldr	r3, .L25+28
 444 00a4 FFF7FEFF 		bl	__aeabi_dcmpgt
 445 00a8 031C     		mov	r3, r0
 446 00aa 002B     		cmp	r3, #0
 447 00ac 1BD0     		beq	.L18
 448              	.L22:
 449              		.loc 1 69 0 is_stmt 0
 450 00ae 1A4B     		ldr	r3, .L25+24
 451 00b0 1A4C     		ldr	r4, .L25+28
 452 00b2 BB61     		str	r3, [r7, #24]
 453 00b4 FC61     		str	r4, [r7, #28]
 454 00b6 16E0     		b	.L18
 455              	.L24:
  70:../Sources/Algorithms.c **** 	} else {
  71:../Sources/Algorithms.c **** 	    steering_value = -0.5 * difference;
 456              		.loc 1 71 0 is_stmt 1
 457 00b8 3869     		ldr	r0, [r7, #16]
 458 00ba 7969     		ldr	r1, [r7, #20]
 459 00bc 184A     		ldr	r2, .L25+32
 460 00be 194B     		ldr	r3, .L25+36
 461 00c0 FFF7FEFF 		bl	__aeabi_dmul
 462 00c4 031C     		mov	r3, r0
 463 00c6 0C1C     		mov	r4, r1
 464 00c8 BB61     		str	r3, [r7, #24]
 465 00ca FC61     		str	r4, [r7, #28]
  72:../Sources/Algorithms.c **** 	    if(steering_value < -.7)steering_value = -.7;
 466              		.loc 1 72 0
 467 00cc B869     		ldr	r0, [r7, #24]
 468 00ce F969     		ldr	r1, [r7, #28]
 469 00d0 154A     		ldr	r2, .L25+40
 470 00d2 164B     		ldr	r3, .L25+44
 471 00d4 FFF7FEFF 		bl	__aeabi_dcmplt
 472 00d8 031C     		mov	r3, r0
 473 00da 002B     		cmp	r3, #0
 474 00dc 03D0     		beq	.L18
 475              	.L23:
 476              		.loc 1 72 0 is_stmt 0
 477 00de 124B     		ldr	r3, .L25+40
 478 00e0 124C     		ldr	r4, .L25+44
 479 00e2 BB61     		str	r3, [r7, #24]
 480 00e4 FC61     		str	r4, [r7, #28]
 481              	.L18:
  73:../Sources/Algorithms.c **** 	}
  74:../Sources/Algorithms.c **** 
  75:../Sources/Algorithms.c **** 	TFC_SetServo(0, steering_value);
 482              		.loc 1 75 0 is_stmt 1
 483 00e6 B869     		ldr	r0, [r7, #24]
 484 00e8 F969     		ldr	r1, [r7, #28]
 485 00ea FFF7FEFF 		bl	__aeabi_d2f
 486 00ee 031C     		add	r3, r0, #0
 487 00f0 0020     		mov	r0, #0
 488 00f2 191C     		add	r1, r3, #0
 489 00f4 FFF7FEFF 		bl	TFC_SetServo
  76:../Sources/Algorithms.c **** }
 490              		.loc 1 76 0
 491 00f8 BD46     		mov	sp, r7
 492 00fa 09B0     		add	sp, sp, #36
 493              		@ sp needed for prologue
 494 00fc 90BD     		pop	{r4, r7, pc}
 495              	.L26:
 496 00fe C046     		.align	3
 497              	.L25:
 498 0100 00000000 		.word	0
 499 0104 00408F40 		.word	1083129856
 500 0108 00000000 		.word	0
 501 010c 00000000 		.word	0
 502 0110 00000000 		.word	0
 503 0114 0000E03F 		.word	1071644672
 504 0118 66666666 		.word	1717986918
 505 011c 6666E63F 		.word	1072064102
 506 0120 00000000 		.word	0
 507 0124 0000E0BF 		.word	-1075838976
 508 0128 66666666 		.word	1717986918
 509 012c 6666E6BF 		.word	-1075419546
 510              		.cfi_endproc
 511              	.LFE3:
 513              		.section	.text.stop_car,"ax",%progbits
 514              		.align	2
 515              		.global	stop_car
 516              		.code	16
 517              		.thumb_func
 519              	stop_car:
 520              	.LFB4:
  77:../Sources/Algorithms.c **** 
  78:../Sources/Algorithms.c **** int stop_car(){
 521              		.loc 1 78 0
 522              		.cfi_startproc
 523 0000 80B5     		push	{r7, lr}
 524              	.LCFI10:
 525              		.cfi_def_cfa_offset 8
 526              		.cfi_offset 7, -8
 527              		.cfi_offset 14, -4
 528 0002 84B0     		sub	sp, sp, #16
 529              	.LCFI11:
 530              		.cfi_def_cfa_offset 24
 531 0004 00AF     		add	r7, sp, #0
 532              	.LCFI12:
 533              		.cfi_def_cfa_register 7
  79:../Sources/Algorithms.c **** 	
  80:../Sources/Algorithms.c **** 	while(!LineScanImageReady);
 534              		.loc 1 80 0
 535 0006 C046     		mov	r8, r8
 536              	.L28:
 537              		.loc 1 80 0 is_stmt 0
 538 0008 284B     		ldr	r3, .L35
 539 000a 1B78     		ldrb	r3, [r3]
 540 000c DBB2     		uxtb	r3, r3
 541 000e 002B     		cmp	r3, #0
 542 0010 FAD0     		beq	.L28
  81:../Sources/Algorithms.c **** 	LineScanImageReady = 0;
 543              		.loc 1 81 0 is_stmt 1
 544 0012 264B     		ldr	r3, .L35
 545 0014 0022     		mov	r2, #0
 546 0016 1A70     		strb	r2, [r3]
  82:../Sources/Algorithms.c **** 	
  83:../Sources/Algorithms.c **** 	int i;
  84:../Sources/Algorithms.c **** 	int width = 0;
 547              		.loc 1 84 0
 548 0018 0023     		mov	r3, #0
 549 001a 3B60     		str	r3, [r7]
  85:../Sources/Algorithms.c **** 	int start = START_PIXEL;
 550              		.loc 1 85 0
 551 001c 0F23     		mov	r3, #15
 552 001e BB60     		str	r3, [r7, #8]
  86:../Sources/Algorithms.c **** 	int stop = 0;
 553              		.loc 1 86 0
 554 0020 0023     		mov	r3, #0
 555 0022 7B60     		str	r3, [r7, #4]
  87:../Sources/Algorithms.c **** 	
  88:../Sources/Algorithms.c **** 	for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 556              		.loc 1 88 0
 557 0024 0F23     		mov	r3, #15
 558 0026 FB60     		str	r3, [r7, #12]
 559 0028 37E0     		b	.L29
 560              	.L34:
  89:../Sources/Algorithms.c **** 		if( LineScanImage0[i] < ( LineScanImage0[i-1] - 500 ) ){ 
 561              		.loc 1 89 0
 562 002a 214B     		ldr	r3, .L35+4
 563 002c 1A68     		ldr	r2, [r3]
 564 002e FB68     		ldr	r3, [r7, #12]
 565 0030 5B00     		lsl	r3, r3, #1
 566 0032 D318     		add	r3, r2, r3
 567 0034 1B88     		ldrh	r3, [r3]
 568 0036 9BB2     		uxth	r3, r3
 569 0038 1A1C     		mov	r2, r3
 570 003a 1D4B     		ldr	r3, .L35+4
 571 003c 1968     		ldr	r1, [r3]
 572 003e FB68     		ldr	r3, [r7, #12]
 573 0040 013B     		sub	r3, r3, #1
 574 0042 5B00     		lsl	r3, r3, #1
 575 0044 CB18     		add	r3, r1, r3
 576 0046 1B88     		ldrh	r3, [r3]
 577 0048 9BB2     		uxth	r3, r3
 578 004a F53B     		sub	r3, r3, #245
 579 004c FF3B     		sub	r3, r3, #255
 580 004e 9A42     		cmp	r2, r3
 581 0050 01DA     		bge	.L30
  90:../Sources/Algorithms.c **** 			start = i;
 582              		.loc 1 90 0
 583 0052 FB68     		ldr	r3, [r7, #12]
 584 0054 BB60     		str	r3, [r7, #8]
 585              	.L30:
  91:../Sources/Algorithms.c **** 		}
  92:../Sources/Algorithms.c **** 		if( LineScanImage0[i] > ( LineScanImage0[i-1] + 500 ) ){
 586              		.loc 1 92 0
 587 0056 164B     		ldr	r3, .L35+4
 588 0058 1A68     		ldr	r2, [r3]
 589 005a FB68     		ldr	r3, [r7, #12]
 590 005c 5B00     		lsl	r3, r3, #1
 591 005e D318     		add	r3, r2, r3
 592 0060 1B88     		ldrh	r3, [r3]
 593 0062 9BB2     		uxth	r3, r3
 594 0064 1A1C     		mov	r2, r3
 595 0066 124B     		ldr	r3, .L35+4
 596 0068 1968     		ldr	r1, [r3]
 597 006a FB68     		ldr	r3, [r7, #12]
 598 006c 013B     		sub	r3, r3, #1
 599 006e 5B00     		lsl	r3, r3, #1
 600 0070 CB18     		add	r3, r1, r3
 601 0072 1B88     		ldrh	r3, [r3]
 602 0074 9BB2     		uxth	r3, r3
 603 0076 F533     		add	r3, r3, #245
 604 0078 FF33     		add	r3, r3, #255
 605 007a 9A42     		cmp	r2, r3
 606 007c 01DD     		ble	.L31
  93:../Sources/Algorithms.c **** 			stop = i;
 607              		.loc 1 93 0
 608 007e FB68     		ldr	r3, [r7, #12]
 609 0080 7B60     		str	r3, [r7, #4]
 610              	.L31:
  94:../Sources/Algorithms.c **** 		}
  95:../Sources/Algorithms.c **** 		width = stop - start;
 611              		.loc 1 95 0
 612 0082 7A68     		ldr	r2, [r7, #4]
 613 0084 BB68     		ldr	r3, [r7, #8]
 614 0086 D31A     		sub	r3, r2, r3
 615 0088 3B60     		str	r3, [r7]
  96:../Sources/Algorithms.c **** 		if( width > 20 ){
 616              		.loc 1 96 0
 617 008a 3B68     		ldr	r3, [r7]
 618 008c 142B     		cmp	r3, #20
 619 008e 01DD     		ble	.L32
  97:../Sources/Algorithms.c **** 			return 1;
 620              		.loc 1 97 0
 621 0090 0123     		mov	r3, #1
 622 0092 06E0     		b	.L33
 623              	.L32:
  88:../Sources/Algorithms.c **** 	for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 624              		.loc 1 88 0
 625 0094 FB68     		ldr	r3, [r7, #12]
 626 0096 0133     		add	r3, r3, #1
 627 0098 FB60     		str	r3, [r7, #12]
 628              	.L29:
  88:../Sources/Algorithms.c **** 	for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 629              		.loc 1 88 0 is_stmt 0
 630 009a FB68     		ldr	r3, [r7, #12]
 631 009c 702B     		cmp	r3, #112
 632 009e C4DD     		ble	.L34
  98:../Sources/Algorithms.c **** 		}
  99:../Sources/Algorithms.c **** 	}
 100:../Sources/Algorithms.c **** 	return 0;
 633              		.loc 1 100 0 is_stmt 1
 634 00a0 0023     		mov	r3, #0
 635              	.L33:
 101:../Sources/Algorithms.c **** }
 636              		.loc 1 101 0
 637 00a2 181C     		mov	r0, r3
 638 00a4 BD46     		mov	sp, r7
 639 00a6 04B0     		add	sp, sp, #16
 640              		@ sp needed for prologue
 641 00a8 80BD     		pop	{r7, pc}
 642              	.L36:
 643 00aa C046     		.align	2
 644              	.L35:
 645 00ac 00000000 		.word	LineScanImageReady
 646 00b0 00000000 		.word	LineScanImage0
 647              		.cfi_endproc
 648              	.LFE4:
 650              		.section	.rodata
 651              		.align	2
 652              	.LC5:
 653 0000 256400   		.ascii	"%d\000"
 654 0003 00       		.align	2
 655              	.LC7:
 656 0004 0D00     		.ascii	"\015\000"
 657              		.global	__aeabi_i2f
 658              		.global	__aeabi_fdiv
 659              		.global	__aeabi_fsub
 660              		.section	.text.algo_one,"ax",%progbits
 661              		.align	2
 662              		.global	algo_one
 663              		.code	16
 664              		.thumb_func
 666              	algo_one:
 667              	.LFB5:
 102:../Sources/Algorithms.c **** 
 103:../Sources/Algorithms.c **** void algo_one(){
 668              		.loc 1 103 0
 669              		.cfi_startproc
 670 0000 90B5     		push	{r4, r7, lr}
 671              	.LCFI13:
 672              		.cfi_def_cfa_offset 12
 673              		.cfi_offset 4, -12
 674              		.cfi_offset 7, -8
 675              		.cfi_offset 14, -4
 676 0002 EDB0     		sub	sp, sp, #436
 677              	.LCFI14:
 678              		.cfi_def_cfa_offset 448
 679 0004 00AF     		add	r7, sp, #0
 680              	.LCFI15:
 681              		.cfi_def_cfa_register 7
 104:../Sources/Algorithms.c ****     int i;
 105:../Sources/Algorithms.c **** 
 106:../Sources/Algorithms.c ****     //Variables for calculating average light levels
 107:../Sources/Algorithms.c ****     long int sum = 0;
 682              		.loc 1 107 0
 683 0006 0023     		mov	r3, #0
 684 0008 D421     		mov	r1, #212
 685 000a 4900     		lsl	r1, r1, #1
 686 000c C919     		add	r1, r1, r7
 687 000e 0B60     		str	r3, [r1]
 108:../Sources/Algorithms.c ****     int avg;
 109:../Sources/Algorithms.c **** 
 110:../Sources/Algorithms.c ****     //Array recording if pixel light level is below average
 111:../Sources/Algorithms.c ****     int belowAvg[ STOP_PIXEL - START_PIXEL + 1 ];
 112:../Sources/Algorithms.c **** 
 113:../Sources/Algorithms.c ****     //Variables for calculating center of the pixels below average and difference from center of al
 114:../Sources/Algorithms.c ****     int sumBelowAvg = 0;
 688              		.loc 1 114 0
 689 0010 0023     		mov	r3, #0
 690 0012 D222     		mov	r2, #210
 691 0014 5200     		lsl	r2, r2, #1
 692 0016 D219     		add	r2, r2, r7
 693 0018 1360     		str	r3, [r2]
 115:../Sources/Algorithms.c ****     int totBelowAvg = 0;
 694              		.loc 1 115 0
 695 001a 0023     		mov	r3, #0
 696 001c D021     		mov	r1, #208
 697 001e 4900     		lsl	r1, r1, #1
 698 0020 C919     		add	r1, r1, r7
 699 0022 0B60     		str	r3, [r1]
 116:../Sources/Algorithms.c ****     int centerBelowAvg;
 117:../Sources/Algorithms.c ****     int center = ( STOP_PIXEL - START_PIXEL + 1) / 2;
 700              		.loc 1 117 0
 701 0024 3123     		mov	r3, #49
 702 0026 CE22     		mov	r2, #206
 703 0028 5200     		lsl	r2, r2, #1
 704 002a D219     		add	r2, r2, r7
 705 002c 1360     		str	r3, [r2]
 118:../Sources/Algorithms.c ****     int diffCenter;
 119:../Sources/Algorithms.c ****     float diff;
 120:../Sources/Algorithms.c **** 
 121:../Sources/Algorithms.c ****     if( LineScanImageReady == 1 ){
 706              		.loc 1 121 0
 707 002e 984B     		ldr	r3, .L50
 708 0030 1B78     		ldrb	r3, [r3]
 709 0032 DBB2     		uxtb	r3, r3
 710 0034 012B     		cmp	r3, #1
 711 0036 00D0     		beq	.LCB583
 712 0038 A5E0     		b	.L38	@long jump
 713              	.LCB583:
 122:../Sources/Algorithms.c ****         LineScanImageReady = 0;
 714              		.loc 1 122 0
 715 003a 954B     		ldr	r3, .L50
 716 003c 0022     		mov	r2, #0
 717 003e 1A70     		strb	r2, [r3]
 123:../Sources/Algorithms.c **** 
 124:../Sources/Algorithms.c ****         //Adds each pixels light value to the total
 125:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 718              		.loc 1 125 0
 719 0040 0F23     		mov	r3, #15
 720 0042 D621     		mov	r1, #214
 721 0044 4900     		lsl	r1, r1, #1
 722 0046 C919     		add	r1, r1, r7
 723 0048 0B60     		str	r3, [r1]
 724 004a 1BE0     		b	.L39
 725              	.L40:
 126:../Sources/Algorithms.c ****             sum += LineScanImage0[i];
 726              		.loc 1 126 0
 727 004c 914B     		ldr	r3, .L50+4
 728 004e 1A68     		ldr	r2, [r3]
 729 0050 D621     		mov	r1, #214
 730 0052 4900     		lsl	r1, r1, #1
 731 0054 C919     		add	r1, r1, r7
 732 0056 0B68     		ldr	r3, [r1]
 733 0058 5B00     		lsl	r3, r3, #1
 734 005a D318     		add	r3, r2, r3
 735 005c 1B88     		ldrh	r3, [r3]
 736 005e 9BB2     		uxth	r3, r3
 737 0060 D421     		mov	r1, #212
 738 0062 4900     		lsl	r1, r1, #1
 739 0064 C919     		add	r1, r1, r7
 740 0066 0A68     		ldr	r2, [r1]
 741 0068 D318     		add	r3, r2, r3
 742 006a D422     		mov	r2, #212
 743 006c 5200     		lsl	r2, r2, #1
 744 006e D219     		add	r2, r2, r7
 745 0070 1360     		str	r3, [r2]
 125:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 746              		.loc 1 125 0
 747 0072 D621     		mov	r1, #214
 748 0074 4900     		lsl	r1, r1, #1
 749 0076 C919     		add	r1, r1, r7
 750 0078 0B68     		ldr	r3, [r1]
 751 007a 0133     		add	r3, r3, #1
 752 007c D622     		mov	r2, #214
 753 007e 5200     		lsl	r2, r2, #1
 754 0080 D219     		add	r2, r2, r7
 755 0082 1360     		str	r3, [r2]
 756              	.L39:
 125:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 757              		.loc 1 125 0 is_stmt 0
 758 0084 D621     		mov	r1, #214
 759 0086 4900     		lsl	r1, r1, #1
 760 0088 C919     		add	r1, r1, r7
 761 008a 0B68     		ldr	r3, [r1]
 762 008c 702B     		cmp	r3, #112
 763 008e DDDD     		ble	.L40
 127:../Sources/Algorithms.c ****         }
 128:../Sources/Algorithms.c **** 
 129:../Sources/Algorithms.c ****         //Calculates average light value
 130:../Sources/Algorithms.c ****         avg = sum / ( STOP_PIXEL - START_PIXEL );
 764              		.loc 1 130 0 is_stmt 1
 765 0090 D422     		mov	r2, #212
 766 0092 5200     		lsl	r2, r2, #1
 767 0094 D219     		add	r2, r2, r7
 768 0096 1368     		ldr	r3, [r2]
 769 0098 181C     		mov	r0, r3
 770 009a 6221     		mov	r1, #98
 771 009c FFF7FEFF 		bl	__aeabi_idiv
 772 00a0 031C     		mov	r3, r0
 773 00a2 CC21     		mov	r1, #204
 774 00a4 4900     		lsl	r1, r1, #1
 775 00a6 C919     		add	r1, r1, r7
 776 00a8 0B60     		str	r3, [r1]
 131:../Sources/Algorithms.c **** 
 132:../Sources/Algorithms.c ****         //Calculates which pixels are below average and fills the array accordingly
 133:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 777              		.loc 1 133 0
 778 00aa 0F23     		mov	r3, #15
 779 00ac D622     		mov	r2, #214
 780 00ae 5200     		lsl	r2, r2, #1
 781 00b0 D219     		add	r2, r2, r7
 782 00b2 1360     		str	r3, [r2]
 783 00b4 36E0     		b	.L41
 784              	.L44:
 134:../Sources/Algorithms.c **** 
 135:../Sources/Algorithms.c ****             //If pixel is below average sets corresponding array element to 1
 136:../Sources/Algorithms.c ****             if( LineScanImage0[i] < avg ){
 785              		.loc 1 136 0
 786 00b6 774B     		ldr	r3, .L50+4
 787 00b8 1A68     		ldr	r2, [r3]
 788 00ba D621     		mov	r1, #214
 789 00bc 4900     		lsl	r1, r1, #1
 790 00be C919     		add	r1, r1, r7
 791 00c0 0B68     		ldr	r3, [r1]
 792 00c2 5B00     		lsl	r3, r3, #1
 793 00c4 D318     		add	r3, r2, r3
 794 00c6 1B88     		ldrh	r3, [r3]
 795 00c8 9BB2     		uxth	r3, r3
 796 00ca 1A1C     		mov	r2, r3
 797 00cc CC21     		mov	r1, #204
 798 00ce 4900     		lsl	r1, r1, #1
 799 00d0 C919     		add	r1, r1, r7
 800 00d2 0B68     		ldr	r3, [r1]
 801 00d4 9A42     		cmp	r2, r3
 802 00d6 0EDA     		bge	.L42
 137:../Sources/Algorithms.c ****                 belowAvg[ i - START_PIXEL ] = 1;
 803              		.loc 1 137 0
 804 00d8 D622     		mov	r2, #214
 805 00da 5200     		lsl	r2, r2, #1
 806 00dc D219     		add	r2, r2, r7
 807 00de 1368     		ldr	r3, [r2]
 808 00e0 1A1C     		mov	r2, r3
 809 00e2 0F3A     		sub	r2, r2, #15
 810 00e4 6C4B     		ldr	r3, .L50+8
 811 00e6 D821     		mov	r1, #216
 812 00e8 4900     		lsl	r1, r1, #1
 813 00ea C919     		add	r1, r1, r7
 814 00ec CB18     		add	r3, r1, r3
 815 00ee 9200     		lsl	r2, r2, #2
 816 00f0 0121     		mov	r1, #1
 817 00f2 D150     		str	r1, [r2, r3]
 818 00f4 0DE0     		b	.L43
 819              	.L42:
 138:../Sources/Algorithms.c ****             }
 139:../Sources/Algorithms.c **** 
 140:../Sources/Algorithms.c ****             //If pixel is above average sets corresponding array element to 0
 141:../Sources/Algorithms.c ****             else {
 142:../Sources/Algorithms.c ****                 belowAvg[ i - START_PIXEL ] = 0;
 820              		.loc 1 142 0
 821 00f6 D622     		mov	r2, #214
 822 00f8 5200     		lsl	r2, r2, #1
 823 00fa D219     		add	r2, r2, r7
 824 00fc 1368     		ldr	r3, [r2]
 825 00fe 1A1C     		mov	r2, r3
 826 0100 0F3A     		sub	r2, r2, #15
 827 0102 654B     		ldr	r3, .L50+8
 828 0104 D821     		mov	r1, #216
 829 0106 4900     		lsl	r1, r1, #1
 830 0108 C919     		add	r1, r1, r7
 831 010a CB18     		add	r3, r1, r3
 832 010c 9200     		lsl	r2, r2, #2
 833 010e 0021     		mov	r1, #0
 834 0110 D150     		str	r1, [r2, r3]
 835              	.L43:
 133:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 836              		.loc 1 133 0
 837 0112 D622     		mov	r2, #214
 838 0114 5200     		lsl	r2, r2, #1
 839 0116 D219     		add	r2, r2, r7
 840 0118 1368     		ldr	r3, [r2]
 841 011a 0133     		add	r3, r3, #1
 842 011c D621     		mov	r1, #214
 843 011e 4900     		lsl	r1, r1, #1
 844 0120 C919     		add	r1, r1, r7
 845 0122 0B60     		str	r3, [r1]
 846              	.L41:
 133:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 847              		.loc 1 133 0 is_stmt 0
 848 0124 D622     		mov	r2, #214
 849 0126 5200     		lsl	r2, r2, #1
 850 0128 D219     		add	r2, r2, r7
 851 012a 1368     		ldr	r3, [r2]
 852 012c 702B     		cmp	r3, #112
 853 012e C2DD     		ble	.L44
 143:../Sources/Algorithms.c ****             }
 144:../Sources/Algorithms.c ****         }
 145:../Sources/Algorithms.c **** 
 146:../Sources/Algorithms.c ****         //Outputs the array over serial
 147:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 854              		.loc 1 147 0 is_stmt 1
 855 0130 0F23     		mov	r3, #15
 856 0132 D621     		mov	r1, #214
 857 0134 4900     		lsl	r1, r1, #1
 858 0136 C919     		add	r1, r1, r7
 859 0138 0B60     		str	r3, [r1]
 860 013a 1AE0     		b	.L45
 861              	.L46:
 148:../Sources/Algorithms.c ****             printf( "%d", belowAvg[ i - START_PIXEL ] );
 862              		.loc 1 148 0
 863 013c D622     		mov	r2, #214
 864 013e 5200     		lsl	r2, r2, #1
 865 0140 D219     		add	r2, r2, r7
 866 0142 1368     		ldr	r3, [r2]
 867 0144 1A1C     		mov	r2, r3
 868 0146 0F3A     		sub	r2, r2, #15
 869 0148 534B     		ldr	r3, .L50+8
 870 014a D821     		mov	r1, #216
 871 014c 4900     		lsl	r1, r1, #1
 872 014e C919     		add	r1, r1, r7
 873 0150 CB18     		add	r3, r1, r3
 874 0152 9200     		lsl	r2, r2, #2
 875 0154 D358     		ldr	r3, [r2, r3]
 876 0156 514A     		ldr	r2, .L50+12
 877 0158 101C     		mov	r0, r2
 878 015a 191C     		mov	r1, r3
 879 015c FFF7FEFF 		bl	printf
 147:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 880              		.loc 1 147 0
 881 0160 D622     		mov	r2, #214
 882 0162 5200     		lsl	r2, r2, #1
 883 0164 D219     		add	r2, r2, r7
 884 0166 1368     		ldr	r3, [r2]
 885 0168 0133     		add	r3, r3, #1
 886 016a D621     		mov	r1, #214
 887 016c 4900     		lsl	r1, r1, #1
 888 016e C919     		add	r1, r1, r7
 889 0170 0B60     		str	r3, [r1]
 890              	.L45:
 147:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 891              		.loc 1 147 0 is_stmt 0
 892 0172 D622     		mov	r2, #214
 893 0174 5200     		lsl	r2, r2, #1
 894 0176 D219     		add	r2, r2, r7
 895 0178 1368     		ldr	r3, [r2]
 896 017a 702B     		cmp	r3, #112
 897 017c DEDD     		ble	.L46
 149:../Sources/Algorithms.c ****         }
 150:../Sources/Algorithms.c ****         printf( "\r\n" );
 898              		.loc 1 150 0 is_stmt 1
 899 017e 484B     		ldr	r3, .L50+16
 900 0180 181C     		mov	r0, r3
 901 0182 FFF7FEFF 		bl	puts
 902              	.L38:
 151:../Sources/Algorithms.c ****     }
 152:../Sources/Algorithms.c **** 
 153:../Sources/Algorithms.c ****     //Adds all the pixels below average
 154:../Sources/Algorithms.c ****     for( i = 0; i < STOP_PIXEL - START_PIXEL + 1; i++){
 903              		.loc 1 154 0
 904 0186 0023     		mov	r3, #0
 905 0188 D621     		mov	r1, #214
 906 018a 4900     		lsl	r1, r1, #1
 907 018c C919     		add	r1, r1, r7
 908 018e 0B60     		str	r3, [r1]
 909 0190 2BE0     		b	.L47
 910              	.L49:
 155:../Sources/Algorithms.c ****         if( belowAvg[i] ){
 911              		.loc 1 155 0
 912 0192 414B     		ldr	r3, .L50+8
 913 0194 D822     		mov	r2, #216
 914 0196 5200     		lsl	r2, r2, #1
 915 0198 D219     		add	r2, r2, r7
 916 019a D318     		add	r3, r2, r3
 917 019c D621     		mov	r1, #214
 918 019e 4900     		lsl	r1, r1, #1
 919 01a0 C919     		add	r1, r1, r7
 920 01a2 0A68     		ldr	r2, [r1]
 921 01a4 9200     		lsl	r2, r2, #2
 922 01a6 D358     		ldr	r3, [r2, r3]
 923 01a8 002B     		cmp	r3, #0
 924 01aa 15D0     		beq	.L48
 156:../Sources/Algorithms.c ****             totBelowAvg++;
 925              		.loc 1 156 0
 926 01ac D022     		mov	r2, #208
 927 01ae 5200     		lsl	r2, r2, #1
 928 01b0 D219     		add	r2, r2, r7
 929 01b2 1368     		ldr	r3, [r2]
 930 01b4 0133     		add	r3, r3, #1
 931 01b6 D021     		mov	r1, #208
 932 01b8 4900     		lsl	r1, r1, #1
 933 01ba C919     		add	r1, r1, r7
 934 01bc 0B60     		str	r3, [r1]
 157:../Sources/Algorithms.c ****             sumBelowAvg += i;
 935              		.loc 1 157 0
 936 01be D223     		mov	r3, #210
 937 01c0 5B00     		lsl	r3, r3, #1
 938 01c2 DB19     		add	r3, r3, r7
 939 01c4 1A68     		ldr	r2, [r3]
 940 01c6 D621     		mov	r1, #214
 941 01c8 4900     		lsl	r1, r1, #1
 942 01ca C919     		add	r1, r1, r7
 943 01cc 0B68     		ldr	r3, [r1]
 944 01ce D318     		add	r3, r2, r3
 945 01d0 D222     		mov	r2, #210
 946 01d2 5200     		lsl	r2, r2, #1
 947 01d4 D219     		add	r2, r2, r7
 948 01d6 1360     		str	r3, [r2]
 949              	.L48:
 154:../Sources/Algorithms.c ****     for( i = 0; i < STOP_PIXEL - START_PIXEL + 1; i++){
 950              		.loc 1 154 0
 951 01d8 D621     		mov	r1, #214
 952 01da 4900     		lsl	r1, r1, #1
 953 01dc C919     		add	r1, r1, r7
 954 01de 0B68     		ldr	r3, [r1]
 955 01e0 0133     		add	r3, r3, #1
 956 01e2 D622     		mov	r2, #214
 957 01e4 5200     		lsl	r2, r2, #1
 958 01e6 D219     		add	r2, r2, r7
 959 01e8 1360     		str	r3, [r2]
 960              	.L47:
 154:../Sources/Algorithms.c ****     for( i = 0; i < STOP_PIXEL - START_PIXEL + 1; i++){
 961              		.loc 1 154 0 is_stmt 0
 962 01ea D621     		mov	r1, #214
 963 01ec 4900     		lsl	r1, r1, #1
 964 01ee C919     		add	r1, r1, r7
 965 01f0 0B68     		ldr	r3, [r1]
 966 01f2 622B     		cmp	r3, #98
 967 01f4 CDDD     		ble	.L49
 158:../Sources/Algorithms.c ****         }
 159:../Sources/Algorithms.c ****     }
 160:../Sources/Algorithms.c **** 
 161:../Sources/Algorithms.c ****     centerBelowAvg = sumBelowAvg / totBelowAvg; //calculates the center of the below average pixels
 968              		.loc 1 161 0 is_stmt 1
 969 01f6 D222     		mov	r2, #210
 970 01f8 5200     		lsl	r2, r2, #1
 971 01fa D219     		add	r2, r2, r7
 972 01fc 1068     		ldr	r0, [r2]
 973 01fe D023     		mov	r3, #208
 974 0200 5B00     		lsl	r3, r3, #1
 975 0202 DB19     		add	r3, r3, r7
 976 0204 1968     		ldr	r1, [r3]
 977 0206 FFF7FEFF 		bl	__aeabi_idiv
 978 020a 031C     		mov	r3, r0
 979 020c CA21     		mov	r1, #202
 980 020e 4900     		lsl	r1, r1, #1
 981 0210 C919     		add	r1, r1, r7
 982 0212 0B60     		str	r3, [r1]
 162:../Sources/Algorithms.c ****     diffCenter = center - centerBelowAvg;  //Clalculates the difference of the center of the below 
 983              		.loc 1 162 0
 984 0214 CE23     		mov	r3, #206
 985 0216 5B00     		lsl	r3, r3, #1
 986 0218 DB19     		add	r3, r3, r7
 987 021a 1A68     		ldr	r2, [r3]
 988 021c CA21     		mov	r1, #202
 989 021e 4900     		lsl	r1, r1, #1
 990 0220 C919     		add	r1, r1, r7
 991 0222 0B68     		ldr	r3, [r1]
 992 0224 D31A     		sub	r3, r2, r3
 993 0226 C822     		mov	r2, #200
 994 0228 5200     		lsl	r2, r2, #1
 995 022a D219     		add	r2, r2, r7
 996 022c 1360     		str	r3, [r2]
 163:../Sources/Algorithms.c ****     diff = (float)( center - diffCenter ) / (float)center; //Calculates "percent" difference. Range
 997              		.loc 1 163 0
 998 022e CE23     		mov	r3, #206
 999 0230 5B00     		lsl	r3, r3, #1
 1000 0232 DB19     		add	r3, r3, r7
 1001 0234 1A68     		ldr	r2, [r3]
 1002 0236 C821     		mov	r1, #200
 1003 0238 4900     		lsl	r1, r1, #1
 1004 023a C919     		add	r1, r1, r7
 1005 023c 0B68     		ldr	r3, [r1]
 1006 023e D31A     		sub	r3, r2, r3
 1007 0240 181C     		mov	r0, r3
 1008 0242 FFF7FEFF 		bl	__aeabi_i2f
 1009 0246 041C     		add	r4, r0, #0
 1010 0248 CE22     		mov	r2, #206
 1011 024a 5200     		lsl	r2, r2, #1
 1012 024c D219     		add	r2, r2, r7
 1013 024e 1068     		ldr	r0, [r2]
 1014 0250 FFF7FEFF 		bl	__aeabi_i2f
 1015 0254 031C     		add	r3, r0, #0
 1016 0256 201C     		add	r0, r4, #0
 1017 0258 191C     		add	r1, r3, #0
 1018 025a FFF7FEFF 		bl	__aeabi_fdiv
 1019 025e 031C     		add	r3, r0, #0
 1020 0260 C621     		mov	r1, #198
 1021 0262 4900     		lsl	r1, r1, #1
 1022 0264 C919     		add	r1, r1, r7
 1023 0266 0B60     		str	r3, [r1]
 164:../Sources/Algorithms.c ****     TFC_SetServo(0,diff - 1); //Adjusts servo accordingly
 1024              		.loc 1 164 0
 1025 0268 C622     		mov	r2, #198
 1026 026a 5200     		lsl	r2, r2, #1
 1027 026c D219     		add	r2, r2, r7
 1028 026e 1068     		ldr	r0, [r2]
 1029 0270 FE21     		mov	r1, #254
 1030 0272 8905     		lsl	r1, r1, #22
 1031 0274 FFF7FEFF 		bl	__aeabi_fsub
 1032 0278 031C     		add	r3, r0, #0
 1033 027a 0020     		mov	r0, #0
 1034 027c 191C     		add	r1, r3, #0
 1035 027e FFF7FEFF 		bl	TFC_SetServo
 165:../Sources/Algorithms.c ****     delay(2); //Allows servo time to move
 1036              		.loc 1 165 0
 1037 0282 0220     		mov	r0, #2
 1038 0284 FFF7FEFF 		bl	delay
 166:../Sources/Algorithms.c **** }
 1039              		.loc 1 166 0
 1040 0288 BD46     		mov	sp, r7
 1041 028a 6DB0     		add	sp, sp, #436
 1042              		@ sp needed for prologue
 1043 028c 90BD     		pop	{r4, r7, pc}
 1044              	.L51:
 1045 028e C046     		.align	2
 1046              	.L50:
 1047 0290 00000000 		.word	LineScanImageReady
 1048 0294 00000000 		.word	LineScanImage0
 1049 0298 50FEFFFF 		.word	-432
 1050 029c 00000000 		.word	.LC5
 1051 02a0 04000000 		.word	.LC7
 1052              		.cfi_endproc
 1053              	.LFE5:
 1055              		.global	__aeabi_f2d
 1056              		.global	__aeabi_ui2f
 1057              		.section	.text.algo_two,"ax",%progbits
 1058              		.align	2
 1059              		.global	algo_two
 1060              		.code	16
 1061              		.thumb_func
 1063              	algo_two:
 1064              	.LFB6:
 167:../Sources/Algorithms.c **** 
 168:../Sources/Algorithms.c **** void algo_two(){
 1065              		.loc 1 168 0
 1066              		.cfi_startproc
 1067 0000 90B5     		push	{r4, r7, lr}
 1068              	.LCFI16:
 1069              		.cfi_def_cfa_offset 12
 1070              		.cfi_offset 4, -12
 1071              		.cfi_offset 7, -8
 1072              		.cfi_offset 14, -4
 1073 0002 89B0     		sub	sp, sp, #36
 1074              	.LCFI17:
 1075              		.cfi_def_cfa_offset 48
 1076 0004 00AF     		add	r7, sp, #0
 1077              	.LCFI18:
 1078              		.cfi_def_cfa_register 7
 169:../Sources/Algorithms.c ****     float mid_point = ( STOP_PIXEL - START_PIXEL ) / 2 + START_PIXEL;
 1079              		.loc 1 169 0
 1080 0006 8523     		mov	r3, #133
 1081 0008 DB05     		lsl	r3, r3, #23
 1082 000a BB60     		str	r3, [r7, #8]
 170:../Sources/Algorithms.c **** 
 171:../Sources/Algorithms.c ****     if( LineScanImageReady == 1 ){
 1083              		.loc 1 171 0
 1084 000c 424B     		ldr	r3, .L59+8
 1085 000e 1B78     		ldrb	r3, [r3]
 1086 0010 DBB2     		uxtb	r3, r3
 1087 0012 012B     		cmp	r3, #1
 1088 0014 00D0     		beq	.LCB941
 1089 0016 77E0     		b	.L52	@long jump
 1090              	.LCB941:
 1091              	.LBB2:
 172:../Sources/Algorithms.c ****         LineScanImageReady = 0;
 1092              		.loc 1 172 0
 1093 0018 3F4B     		ldr	r3, .L59+8
 1094 001a 0022     		mov	r2, #0
 1095 001c 1A70     		strb	r2, [r3]
 173:../Sources/Algorithms.c ****         
 174:../Sources/Algorithms.c ****         int i;
 175:../Sources/Algorithms.c ****         double sum = 0.0f;
 1096              		.loc 1 175 0
 1097 001e 3D4C     		ldr	r4, .L59+4
 1098 0020 3B4B     		ldr	r3, .L59
 1099 0022 3B61     		str	r3, [r7, #16]
 1100 0024 7C61     		str	r4, [r7, #20]
 176:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 1101              		.loc 1 176 0
 1102 0026 0F23     		mov	r3, #15
 1103 0028 FB61     		str	r3, [r7, #28]
 1104 002a 61E0     		b	.L54
 1105              	.L58:
 1106              	.LBB3:
 177:../Sources/Algorithms.c ****             int offset = mid_point - i;
 1107              		.loc 1 177 0
 1108 002c F869     		ldr	r0, [r7, #28]
 1109 002e FFF7FEFF 		bl	__aeabi_i2f
 1110 0032 031C     		add	r3, r0, #0
 1111 0034 B868     		ldr	r0, [r7, #8]
 1112 0036 191C     		add	r1, r3, #0
 1113 0038 FFF7FEFF 		bl	__aeabi_fsub
 1114 003c 031C     		add	r3, r0, #0
 1115 003e 181C     		add	r0, r3, #0
 1116 0040 FFF7FEFF 		bl	__aeabi_f2iz
 1117 0044 031C     		mov	r3, r0
 1118 0046 FB60     		str	r3, [r7, #12]
 178:../Sources/Algorithms.c **** 
 179:../Sources/Algorithms.c ****             if(offset == 0) offset = 1;
 1119              		.loc 1 179 0
 1120 0048 FB68     		ldr	r3, [r7, #12]
 1121 004a 002B     		cmp	r3, #0
 1122 004c 01D1     		bne	.L55
 1123              		.loc 1 179 0 is_stmt 0
 1124 004e 0123     		mov	r3, #1
 1125 0050 FB60     		str	r3, [r7, #12]
 1126              	.L55:
 180:../Sources/Algorithms.c ****             double scale = mid_point / offset;
 1127              		.loc 1 180 0 is_stmt 1
 1128 0052 F868     		ldr	r0, [r7, #12]
 1129 0054 FFF7FEFF 		bl	__aeabi_i2f
 1130 0058 031C     		add	r3, r0, #0
 1131 005a B868     		ldr	r0, [r7, #8]
 1132 005c 191C     		add	r1, r3, #0
 1133 005e FFF7FEFF 		bl	__aeabi_fdiv
 1134 0062 031C     		add	r3, r0, #0
 1135 0064 181C     		add	r0, r3, #0
 1136 0066 FFF7FEFF 		bl	__aeabi_f2d
 1137 006a 031C     		mov	r3, r0
 1138 006c 0C1C     		mov	r4, r1
 1139 006e 3B60     		str	r3, [r7]
 1140 0070 7C60     		str	r4, [r7, #4]
 181:../Sources/Algorithms.c **** 
 182:../Sources/Algorithms.c ****             if(LineScanImage0[i] == 0) {
 1141              		.loc 1 182 0
 1142 0072 2A4B     		ldr	r3, .L59+12
 1143 0074 1A68     		ldr	r2, [r3]
 1144 0076 FB69     		ldr	r3, [r7, #28]
 1145 0078 5B00     		lsl	r3, r3, #1
 1146 007a D318     		add	r3, r2, r3
 1147 007c 1B88     		ldrh	r3, [r3]
 1148 007e 9BB2     		uxth	r3, r3
 1149 0080 002B     		cmp	r3, #0
 1150 0082 0AD1     		bne	.L56
 183:../Sources/Algorithms.c ****                 sum += scale * 1;
 1151              		.loc 1 183 0
 1152 0084 3869     		ldr	r0, [r7, #16]
 1153 0086 7969     		ldr	r1, [r7, #20]
 1154 0088 3A68     		ldr	r2, [r7]
 1155 008a 7B68     		ldr	r3, [r7, #4]
 1156 008c FFF7FEFF 		bl	__aeabi_dadd
 1157 0090 031C     		mov	r3, r0
 1158 0092 0C1C     		mov	r4, r1
 1159 0094 3B61     		str	r3, [r7, #16]
 1160 0096 7C61     		str	r4, [r7, #20]
 1161 0098 27E0     		b	.L57
 1162              	.L56:
 184:../Sources/Algorithms.c ****             } else {
 185:../Sources/Algorithms.c ****                 sum += scale * ((1.0f / (float)LineScanImage0[i]));
 1163              		.loc 1 185 0
 1164 009a 204B     		ldr	r3, .L59+12
 1165 009c 1A68     		ldr	r2, [r3]
 1166 009e FB69     		ldr	r3, [r7, #28]
 1167 00a0 5B00     		lsl	r3, r3, #1
 1168 00a2 D318     		add	r3, r2, r3
 1169 00a4 1B88     		ldrh	r3, [r3]
 1170 00a6 9BB2     		uxth	r3, r3
 1171 00a8 181C     		mov	r0, r3
 1172 00aa FFF7FEFF 		bl	__aeabi_ui2f
 1173 00ae 031C     		add	r3, r0, #0
 1174 00b0 FE20     		mov	r0, #254
 1175 00b2 8005     		lsl	r0, r0, #22
 1176 00b4 191C     		add	r1, r3, #0
 1177 00b6 FFF7FEFF 		bl	__aeabi_fdiv
 1178 00ba 031C     		add	r3, r0, #0
 1179 00bc 181C     		add	r0, r3, #0
 1180 00be FFF7FEFF 		bl	__aeabi_f2d
 1181 00c2 031C     		mov	r3, r0
 1182 00c4 0C1C     		mov	r4, r1
 1183 00c6 181C     		mov	r0, r3
 1184 00c8 211C     		mov	r1, r4
 1185 00ca 3A68     		ldr	r2, [r7]
 1186 00cc 7B68     		ldr	r3, [r7, #4]
 1187 00ce FFF7FEFF 		bl	__aeabi_dmul
 1188 00d2 031C     		mov	r3, r0
 1189 00d4 0C1C     		mov	r4, r1
 1190 00d6 3869     		ldr	r0, [r7, #16]
 1191 00d8 7969     		ldr	r1, [r7, #20]
 1192 00da 1A1C     		mov	r2, r3
 1193 00dc 231C     		mov	r3, r4
 1194 00de FFF7FEFF 		bl	__aeabi_dadd
 1195 00e2 031C     		mov	r3, r0
 1196 00e4 0C1C     		mov	r4, r1
 1197 00e6 3B61     		str	r3, [r7, #16]
 1198 00e8 7C61     		str	r4, [r7, #20]
 1199              	.L57:
 1200              	.LBE3:
 176:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 1201              		.loc 1 176 0
 1202 00ea FB69     		ldr	r3, [r7, #28]
 1203 00ec 0133     		add	r3, r3, #1
 1204 00ee FB61     		str	r3, [r7, #28]
 1205              	.L54:
 176:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 1206              		.loc 1 176 0 is_stmt 0
 1207 00f0 FB69     		ldr	r3, [r7, #28]
 1208 00f2 702B     		cmp	r3, #112
 1209 00f4 9ADD     		ble	.L58
 186:../Sources/Algorithms.c ****             }
 187:../Sources/Algorithms.c ****         }
 188:../Sources/Algorithms.c ****     
 189:../Sources/Algorithms.c ****         sum = (double)sum;
 190:../Sources/Algorithms.c ****         TFC_SetServo( 0, sum);
 1210              		.loc 1 190 0 is_stmt 1
 1211 00f6 3869     		ldr	r0, [r7, #16]
 1212 00f8 7969     		ldr	r1, [r7, #20]
 1213 00fa FFF7FEFF 		bl	__aeabi_d2f
 1214 00fe 031C     		add	r3, r0, #0
 1215 0100 0020     		mov	r0, #0
 1216 0102 191C     		add	r1, r3, #0
 1217 0104 FFF7FEFF 		bl	TFC_SetServo
 1218              	.L52:
 1219              	.LBE2:
 191:../Sources/Algorithms.c ****     }
 192:../Sources/Algorithms.c **** }
 1220              		.loc 1 192 0
 1221 0108 BD46     		mov	sp, r7
 1222 010a 09B0     		add	sp, sp, #36
 1223              		@ sp needed for prologue
 1224 010c 90BD     		pop	{r4, r7, pc}
 1225              	.L60:
 1226 010e C046     		.align	3
 1227              	.L59:
 1228 0110 00000000 		.word	0
 1229 0114 00000000 		.word	0
 1230 0118 00000000 		.word	LineScanImageReady
 1231 011c 00000000 		.word	LineScanImage0
 1232              		.cfi_endproc
 1233              	.LFE6:
 1235              		.section	.rodata
 1236 0006 0000     		.align	2
 1237              	.LC12:
 1238 0008 25642025 		.ascii	"%d %d\012\000"
 1238      640A00
 1239 000f 00       		.section	.text.algo_three,"ax",%progbits
 1240              		.align	2
 1241              		.global	algo_three
 1242              		.code	16
 1243              		.thumb_func
 1245              	algo_three:
 1246              	.LFB7:
 193:../Sources/Algorithms.c **** 
 194:../Sources/Algorithms.c **** void algo_three() {
 1247              		.loc 1 194 0
 1248              		.cfi_startproc
 1249 0000 B0B5     		push	{r4, r5, r7, lr}
 1250              	.LCFI19:
 1251              		.cfi_def_cfa_offset 16
 1252              		.cfi_offset 4, -16
 1253              		.cfi_offset 5, -12
 1254              		.cfi_offset 7, -8
 1255              		.cfi_offset 14, -4
 1256 0002 92B0     		sub	sp, sp, #72
 1257              	.LCFI20:
 1258              		.cfi_def_cfa_offset 88
 1259 0004 04AF     		add	r7, sp, #16
 1260              	.LCFI21:
 1261              		.cfi_def_cfa 7, 72
 195:../Sources/Algorithms.c **** 	int stop_algo = 0;
 1262              		.loc 1 195 0
 1263 0006 0023     		mov	r3, #0
 1264 0008 7B63     		str	r3, [r7, #52]
 196:../Sources/Algorithms.c **** 	int threshold = 0;
 1265              		.loc 1 196 0
 1266 000a 0023     		mov	r3, #0
 1267 000c 3B63     		str	r3, [r7, #48]
 197:../Sources/Algorithms.c **** 	float speed = 0;
 1268              		.loc 1 197 0
 1269 000e 0023     		mov	r3, #0
 1270 0010 FB62     		str	r3, [r7, #44]
 1271 0012 00E0     		b	.L69
 1272              	.L70:
 198:../Sources/Algorithms.c **** 	
 199:../Sources/Algorithms.c ****     while(1) {
 200:../Sources/Algorithms.c ****     	struct sideInfo right;
 201:../Sources/Algorithms.c ****     	right.Sum = 0.0;
 202:../Sources/Algorithms.c ****     	right.Changes = 0;
 203:../Sources/Algorithms.c ****     	struct sideInfo left;
 204:../Sources/Algorithms.c ****     	left.Sum = 0.0;
 205:../Sources/Algorithms.c ****     	left.Changes = 0;
 206:../Sources/Algorithms.c ****     	
 207:../Sources/Algorithms.c ****         TFC_Task();
 208:../Sources/Algorithms.c **** 
 209:../Sources/Algorithms.c ****         threshold = determineSensitivity();
 210:../Sources/Algorithms.c ****         speed = determineSpeed();
 211:../Sources/Algorithms.c ****         
 212:../Sources/Algorithms.c ****         if(LineScanImageReady){
 213:../Sources/Algorithms.c ****             LineScanImageReady = 0;
 214:../Sources/Algorithms.c ****             left = findSideInfo( START_PIXEL, MID_POINT, threshold );
 215:../Sources/Algorithms.c ****             right = findSideInfo( (int)MID_POINT, STOP_PIXEL, threshold ); 
 216:../Sources/Algorithms.c ****             
 217:../Sources/Algorithms.c ****             printf("%d %d\n", (int)left.Sum, (int)right.Sum);
 218:../Sources/Algorithms.c ****             
 219:../Sources/Algorithms.c ****             if(stop_algo == 0)
 220:../Sources/Algorithms.c ****             	stop_algo = ( right.Changes >= 1 && left.Changes >= 1 );
 221:../Sources/Algorithms.c ****             
 222:../Sources/Algorithms.c ****             setTurn(left, right);
 223:../Sources/Algorithms.c ****         }
 224:../Sources/Algorithms.c ****         
 225:../Sources/Algorithms.c ****         if(stop_algo == 0) {
 226:../Sources/Algorithms.c ****         	TFC_SetMotorPWM(speed, speed);
 227:../Sources/Algorithms.c ****         } else {
 228:../Sources/Algorithms.c ****         	double motor = speed * ((STOP_CYCLES - stop_algo) / STOP_CYCLES);
 229:../Sources/Algorithms.c ****         	TFC_SetMotorPWM(motor, motor);
 230:../Sources/Algorithms.c ****         	stop_algo++;
 231:../Sources/Algorithms.c ****         }     
 232:../Sources/Algorithms.c ****         
 233:../Sources/Algorithms.c ****         if(TFC_PUSH_BUTTON_1_PRESSED) break;
 234:../Sources/Algorithms.c ****         
 235:../Sources/Algorithms.c ****         if(stop_algo > STOP_CYCLES) break;
 236:../Sources/Algorithms.c ****     }
 1273              		.loc 1 236 0
 1274 0014 C046     		mov	r8, r8
 1275              	.L69:
 1276              	.LBB4:
 201:../Sources/Algorithms.c ****     	right.Sum = 0.0;
 1277              		.loc 1 201 0
 1278 0016 3A1C     		mov	r2, r7
 1279 0018 1032     		add	r2, r2, #16
 1280 001a 564C     		ldr	r4, .L71+4
 1281 001c 544B     		ldr	r3, .L71
 1282 001e 1360     		str	r3, [r2]
 1283 0020 5460     		str	r4, [r2, #4]
 202:../Sources/Algorithms.c ****     	right.Changes = 0;
 1284              		.loc 1 202 0
 1285 0022 3B1C     		mov	r3, r7
 1286 0024 1033     		add	r3, r3, #16
 1287 0026 0022     		mov	r2, #0
 1288 0028 9A60     		str	r2, [r3, #8]
 204:../Sources/Algorithms.c ****     	left.Sum = 0.0;
 1289              		.loc 1 204 0
 1290 002a 3A1C     		mov	r2, r7
 1291 002c 514C     		ldr	r4, .L71+4
 1292 002e 504B     		ldr	r3, .L71
 1293 0030 1360     		str	r3, [r2]
 1294 0032 5460     		str	r4, [r2, #4]
 205:../Sources/Algorithms.c ****     	left.Changes = 0;
 1295              		.loc 1 205 0
 1296 0034 3B1C     		mov	r3, r7
 1297 0036 0022     		mov	r2, #0
 1298 0038 9A60     		str	r2, [r3, #8]
 207:../Sources/Algorithms.c ****         TFC_Task();
 1299              		.loc 1 207 0
 1300 003a FFF7FEFF 		bl	TFC_Task
 209:../Sources/Algorithms.c ****         threshold = determineSensitivity();
 1301              		.loc 1 209 0
 1302 003e FFF7FEFF 		bl	determineSensitivity
 1303 0042 031C     		mov	r3, r0
 1304 0044 3B63     		str	r3, [r7, #48]
 210:../Sources/Algorithms.c ****         speed = determineSpeed();
 1305              		.loc 1 210 0
 1306 0046 FFF7FEFF 		bl	determineSpeed
 1307 004a 031C     		add	r3, r0, #0
 1308 004c FB62     		str	r3, [r7, #44]
 212:../Sources/Algorithms.c ****         if(LineScanImageReady){
 1309              		.loc 1 212 0
 1310 004e 4A4B     		ldr	r3, .L71+8
 1311 0050 1B78     		ldrb	r3, [r3]
 1312 0052 DBB2     		uxtb	r3, r3
 1313 0054 002B     		cmp	r3, #0
 1314 0056 4AD0     		beq	.L62
 213:../Sources/Algorithms.c ****             LineScanImageReady = 0;
 1315              		.loc 1 213 0
 1316 0058 474B     		ldr	r3, .L71+8
 1317 005a 0022     		mov	r2, #0
 1318 005c 1A70     		strb	r2, [r3]
 214:../Sources/Algorithms.c ****             left = findSideInfo( START_PIXEL, MID_POINT, threshold );
 1319              		.loc 1 214 0
 1320 005e 3A1C     		mov	r2, r7
 1321 0060 3B6B     		ldr	r3, [r7, #48]
 1322 0062 101C     		mov	r0, r2
 1323 0064 0F21     		mov	r1, #15
 1324 0066 4022     		mov	r2, #64
 1325 0068 FFF7FEFF 		bl	findSideInfo
 215:../Sources/Algorithms.c ****             right = findSideInfo( (int)MID_POINT, STOP_PIXEL, threshold ); 
 1326              		.loc 1 215 0
 1327 006c 3A1C     		mov	r2, r7
 1328 006e 1032     		add	r2, r2, #16
 1329 0070 3B6B     		ldr	r3, [r7, #48]
 1330 0072 101C     		mov	r0, r2
 1331 0074 4021     		mov	r1, #64
 1332 0076 7122     		mov	r2, #113
 1333 0078 FFF7FEFF 		bl	findSideInfo
 217:../Sources/Algorithms.c ****             printf("%d %d\n", (int)left.Sum, (int)right.Sum);
 1334              		.loc 1 217 0
 1335 007c 3B1C     		mov	r3, r7
 1336 007e 5C68     		ldr	r4, [r3, #4]
 1337 0080 1B68     		ldr	r3, [r3]
 1338 0082 181C     		mov	r0, r3
 1339 0084 211C     		mov	r1, r4
 1340 0086 FFF7FEFF 		bl	__aeabi_d2iz
 1341 008a 051C     		mov	r5, r0
 1342 008c 3B1C     		mov	r3, r7
 1343 008e 1033     		add	r3, r3, #16
 1344 0090 5C68     		ldr	r4, [r3, #4]
 1345 0092 1B68     		ldr	r3, [r3]
 1346 0094 181C     		mov	r0, r3
 1347 0096 211C     		mov	r1, r4
 1348 0098 FFF7FEFF 		bl	__aeabi_d2iz
 1349 009c 031C     		mov	r3, r0
 1350 009e 374A     		ldr	r2, .L71+12
 1351 00a0 101C     		mov	r0, r2
 1352 00a2 291C     		mov	r1, r5
 1353 00a4 1A1C     		mov	r2, r3
 1354 00a6 FFF7FEFF 		bl	printf
 219:../Sources/Algorithms.c ****             if(stop_algo == 0)
 1355              		.loc 1 219 0
 1356 00aa 7B6B     		ldr	r3, [r7, #52]
 1357 00ac 002B     		cmp	r3, #0
 1358 00ae 0CD1     		bne	.L63
 220:../Sources/Algorithms.c ****             	stop_algo = ( right.Changes >= 1 && left.Changes >= 1 );
 1359              		.loc 1 220 0
 1360 00b0 3B1C     		mov	r3, r7
 1361 00b2 1033     		add	r3, r3, #16
 1362 00b4 9B68     		ldr	r3, [r3, #8]
 1363 00b6 002B     		cmp	r3, #0
 1364 00b8 05DD     		ble	.L64
 220:../Sources/Algorithms.c ****             	stop_algo = ( right.Changes >= 1 && left.Changes >= 1 );
 1365              		.loc 1 220 0 is_stmt 0
 1366 00ba 3B1C     		mov	r3, r7
 1367 00bc 9B68     		ldr	r3, [r3, #8]
 1368 00be 002B     		cmp	r3, #0
 1369 00c0 01DD     		ble	.L64
 220:../Sources/Algorithms.c ****             	stop_algo = ( right.Changes >= 1 && left.Changes >= 1 );
 1370              		.loc 1 220 0
 1371 00c2 0123     		mov	r3, #1
 1372 00c4 00E0     		b	.L65
 1373              	.L64:
 220:../Sources/Algorithms.c ****             	stop_algo = ( right.Changes >= 1 && left.Changes >= 1 );
 1374              		.loc 1 220 0
 1375 00c6 0023     		mov	r3, #0
 1376              	.L65:
 220:../Sources/Algorithms.c ****             	stop_algo = ( right.Changes >= 1 && left.Changes >= 1 );
 1377              		.loc 1 220 0
 1378 00c8 7B63     		str	r3, [r7, #52]
 1379              	.L63:
 222:../Sources/Algorithms.c ****             setTurn(left, right);
 1380              		.loc 1 222 0 is_stmt 1
 1381 00ca 3C1C     		mov	r4, r7
 1382 00cc 3B1C     		mov	r3, r7
 1383 00ce 1033     		add	r3, r3, #16
 1384 00d0 6A46     		mov	r2, sp
 1385 00d2 111C     		mov	r1, r2
 1386 00d4 1A1C     		mov	r2, r3
 1387 00d6 1023     		mov	r3, #16
 1388 00d8 081C     		mov	r0, r1
 1389 00da 111C     		mov	r1, r2
 1390 00dc 1A1C     		mov	r2, r3
 1391 00de FFF7FEFF 		bl	memcpy
 1392 00e2 2068     		ldr	r0, [r4]
 1393 00e4 6168     		ldr	r1, [r4, #4]
 1394 00e6 A268     		ldr	r2, [r4, #8]
 1395 00e8 E368     		ldr	r3, [r4, #12]
 1396 00ea FFF7FEFF 		bl	setTurn
 1397              	.L62:
 225:../Sources/Algorithms.c ****         if(stop_algo == 0) {
 1398              		.loc 1 225 0
 1399 00ee 7B6B     		ldr	r3, [r7, #52]
 1400 00f0 002B     		cmp	r3, #0
 1401 00f2 06D1     		bne	.L66
 226:../Sources/Algorithms.c ****         	TFC_SetMotorPWM(speed, speed);
 1402              		.loc 1 226 0
 1403 00f4 FA6A     		ldr	r2, [r7, #44]
 1404 00f6 FB6A     		ldr	r3, [r7, #44]
 1405 00f8 101C     		add	r0, r2, #0
 1406 00fa 191C     		add	r1, r3, #0
 1407 00fc FFF7FEFF 		bl	TFC_SetMotorPWM
 1408 0100 28E0     		b	.L67
 1409              	.L66:
 1410              	.LBB5:
 228:../Sources/Algorithms.c ****         	double motor = speed * ((STOP_CYCLES - stop_algo) / STOP_CYCLES);
 1411              		.loc 1 228 0
 1412 0102 7B6B     		ldr	r3, [r7, #52]
 1413 0104 1E4A     		ldr	r2, .L71+16
 1414 0106 D31A     		sub	r3, r2, r3
 1415 0108 181C     		mov	r0, r3
 1416 010a 1D49     		ldr	r1, .L71+16
 1417 010c FFF7FEFF 		bl	__aeabi_idiv
 1418 0110 031C     		mov	r3, r0
 1419 0112 181C     		mov	r0, r3
 1420 0114 FFF7FEFF 		bl	__aeabi_i2f
 1421 0118 031C     		add	r3, r0, #0
 1422 011a 181C     		add	r0, r3, #0
 1423 011c F96A     		ldr	r1, [r7, #44]
 1424 011e FFF7FEFF 		bl	__aeabi_fmul
 1425 0122 031C     		add	r3, r0, #0
 1426 0124 181C     		add	r0, r3, #0
 1427 0126 FFF7FEFF 		bl	__aeabi_f2d
 1428 012a 031C     		mov	r3, r0
 1429 012c 0C1C     		mov	r4, r1
 1430 012e 3B62     		str	r3, [r7, #32]
 1431 0130 7C62     		str	r4, [r7, #36]
 229:../Sources/Algorithms.c ****         	TFC_SetMotorPWM(motor, motor);
 1432              		.loc 1 229 0
 1433 0132 386A     		ldr	r0, [r7, #32]
 1434 0134 796A     		ldr	r1, [r7, #36]
 1435 0136 FFF7FEFF 		bl	__aeabi_d2f
 1436 013a 041C     		add	r4, r0, #0
 1437 013c 386A     		ldr	r0, [r7, #32]
 1438 013e 796A     		ldr	r1, [r7, #36]
 1439 0140 FFF7FEFF 		bl	__aeabi_d2f
 1440 0144 031C     		add	r3, r0, #0
 1441 0146 201C     		add	r0, r4, #0
 1442 0148 191C     		add	r1, r3, #0
 1443 014a FFF7FEFF 		bl	TFC_SetMotorPWM
 230:../Sources/Algorithms.c ****         	stop_algo++;
 1444              		.loc 1 230 0
 1445 014e 7B6B     		ldr	r3, [r7, #52]
 1446 0150 0133     		add	r3, r3, #1
 1447 0152 7B63     		str	r3, [r7, #52]
 1448              	.L67:
 1449              	.LBE5:
 233:../Sources/Algorithms.c ****         if(TFC_PUSH_BUTTON_1_PRESSED) break;
 1450              		.loc 1 233 0
 1451 0154 0B4B     		ldr	r3, .L71+20
 1452 0156 1A69     		ldr	r2, [r3, #16]
 1453 0158 8023     		mov	r3, #128
 1454 015a 9B02     		lsl	r3, r3, #10
 1455 015c 1340     		and	r3, r2
 1456 015e 04D1     		bne	.L61
 235:../Sources/Algorithms.c ****         if(stop_algo > STOP_CYCLES) break;
 1457              		.loc 1 235 0
 1458 0160 7A6B     		ldr	r2, [r7, #52]
 1459 0162 074B     		ldr	r3, .L71+16
 1460 0164 9A42     		cmp	r2, r3
 1461 0166 00DC     		bgt	.LCB1263
 1462 0168 54E7     		b	.L70	@long jump
 1463              	.LCB1263:
 1464              	.L61:
 1465              	.LBE4:
 237:../Sources/Algorithms.c **** }
 1466              		.loc 1 237 0
 1467 016a BD46     		mov	sp, r7
 1468 016c 0EB0     		add	sp, sp, #56
 1469              		@ sp needed for prologue
 1470 016e B0BD     		pop	{r4, r5, r7, pc}
 1471              	.L72:
 1472              		.align	3
 1473              	.L71:
 1474 0170 00000000 		.word	0
 1475 0174 00000000 		.word	0
 1476 0178 00000000 		.word	LineScanImageReady
 1477 017c 08000000 		.word	.LC12
 1478 0180 88130000 		.word	5000
 1479 0184 80F00F40 		.word	1074786432
 1480              		.cfi_endproc
 1481              	.LFE7:
 1483              		.text
 1484              	.Letext0:
 1485              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 1486              		.file 3 "C:/Users/Jared/Desktop/freescalecup/FRDM-TFC/Project_Headers/MKL25Z4.h"
 1487              		.file 4 "C:/Users/Jared/Desktop/freescalecup/FRDM-TFC/Project_Headers/TFC\\TFC_LineScanCamera.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Algorithms.c
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:21     .text.determineSensitivity:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:26     .text.determineSensitivity:00000000 determineSensitivity
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:63     .text.determineSensitivity:00000030 $d
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:68     .text.determineSpeed:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:73     .text.determineSpeed:00000000 determineSpeed
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:112    .text.findSideInfo:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:117    .text.findSideInfo:00000000 findSideInfo
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:330    .text.findSideInfo:00000170 $d
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:343    .text.setTurn:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:348    .text.setTurn:00000000 setTurn
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:498    .text.setTurn:00000100 $d
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:514    .text.stop_car:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:519    .text.stop_car:00000000 stop_car
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:645    .text.stop_car:000000ac $d
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:651    .rodata:00000000 $d
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:661    .text.algo_one:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:666    .text.algo_one:00000000 algo_one
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:1047   .text.algo_one:00000290 $d
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:1058   .text.algo_two:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:1063   .text.algo_two:00000000 algo_two
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:1228   .text.algo_two:00000110 $d
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:1240   .text.algo_three:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:1245   .text.algo_three:00000000 algo_three
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:1474   .text.algo_three:00000170 $d
                     .debug_frame:00000010 $d
C:\Users\Jared\AppData\Local\Temp\ccWWzyaR.s:342    .text.findSideInfo:0000017c $t

UNDEFINED SYMBOLS
__aeabi_fadd
__aeabi_fmul
__aeabi_f2iz
TFC_ReadPot
__aeabi_i2d
__aeabi_dadd
__aeabi_idiv
__aeabi_ddiv
memcpy
LineScanImage0
__aeabi_dsub
__aeabi_d2iz
__aeabi_dcmplt
__aeabi_dmul
__aeabi_dcmpgt
__aeabi_d2f
TFC_SetServo
LineScanImageReady
__aeabi_i2f
__aeabi_fdiv
__aeabi_fsub
printf
puts
delay
__aeabi_f2d
__aeabi_ui2f
TFC_Task
TFC_SetMotorPWM
