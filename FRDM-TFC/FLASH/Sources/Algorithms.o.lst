   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Algorithms.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_fadd
  18              		.global	__aeabi_fmul
  19              		.global	__aeabi_f2iz
  20              		.section	.text.determineSensitivity,"ax",%progbits
  21              		.align	2
  22              		.global	determineSensitivity
  23              		.code	16
  24              		.thumb_func
  26              	determineSensitivity:
  27              	.LFB0:
  28              		.file 1 "../Sources/Algorithms.c"
   1:../Sources/Algorithms.c **** /*
   2:../Sources/Algorithms.c ****  * AlgoOne.c
   3:../Sources/Algorithms.c ****  *
   4:../Sources/Algorithms.c ****  *  Created on: Sep 17, 2015
   5:../Sources/Algorithms.c ****  *      Author: Jared
   6:../Sources/Algorithms.c ****  */
   7:../Sources/Algorithms.c **** 
   8:../Sources/Algorithms.c **** #include "derivative.h" /* include peripheral declarations */
   9:../Sources/Algorithms.c **** #include "TFC\TFC.h"
  10:../Sources/Algorithms.c **** #include "Common.h"
  11:../Sources/Algorithms.c **** #include "Math.h"
  12:../Sources/Algorithms.c **** #include "stdlib.h"
  13:../Sources/Algorithms.c **** 
  14:../Sources/Algorithms.c **** #define START_PIXEL 15
  15:../Sources/Algorithms.c **** #define STOP_PIXEL 113
  16:../Sources/Algorithms.c **** #define MID_POINT (((STOP_PIXEL-START_PIXEL)/2)+START_PIXEL)
  17:../Sources/Algorithms.c **** #define LEFT_PIXELS MID_POINT-START_PIXEL
  18:../Sources/Algorithms.c **** #define RIGHT_PIXELS STOP_PIXEL-MID_POINT 
  19:../Sources/Algorithms.c **** #define DIFFDIV 1000
  20:../Sources/Algorithms.c **** #define SENSITIVITY 1000
  21:../Sources/Algorithms.c **** #define STOP_CYCLES 5000
  22:../Sources/Algorithms.c **** #define SPEED .50
  23:../Sources/Algorithms.c **** 
  24:../Sources/Algorithms.c **** 
  25:../Sources/Algorithms.c **** struct sideInfo{
  26:../Sources/Algorithms.c **** 	double Sum;
  27:../Sources/Algorithms.c **** 	int Changes;
  28:../Sources/Algorithms.c **** };
  29:../Sources/Algorithms.c **** 
  30:../Sources/Algorithms.c **** int determineSensitivity(){
  29              		.loc 1 30 0
  30              		.cfi_startproc
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
  31:../Sources/Algorithms.c **** 	return( (int)( SENSITIVITY * ( TFC_ReadPot(0) + 1 ) ) );
  39              		.loc 1 31 0
  40 0004 0020     		mov	r0, #0
  41 0006 FFF7FEFF 		bl	TFC_ReadPot
  42 000a 031C     		add	r3, r0, #0
  43 000c 181C     		add	r0, r3, #0
  44 000e FE21     		mov	r1, #254
  45 0010 8905     		lsl	r1, r1, #22
  46 0012 FFF7FEFF 		bl	__aeabi_fadd
  47 0016 031C     		add	r3, r0, #0
  48 0018 181C     		add	r0, r3, #0
  49 001a 0549     		ldr	r1, .L3
  50 001c FFF7FEFF 		bl	__aeabi_fmul
  51 0020 031C     		add	r3, r0, #0
  52 0022 181C     		add	r0, r3, #0
  53 0024 FFF7FEFF 		bl	__aeabi_f2iz
  54 0028 031C     		mov	r3, r0
  32:../Sources/Algorithms.c **** }
  55              		.loc 1 32 0
  56 002a 181C     		mov	r0, r3
  57 002c BD46     		mov	sp, r7
  58              		@ sp needed for prologue
  59 002e 80BD     		pop	{r7, pc}
  60              	.L4:
  61              		.align	2
  62              	.L3:
  63 0030 00007A44 		.word	1148846080
  64              		.cfi_endproc
  65              	.LFE0:
  67              		.section	.text.determineSpeed,"ax",%progbits
  68              		.align	2
  69              		.global	determineSpeed
  70              		.code	16
  71              		.thumb_func
  73              	determineSpeed:
  74              	.LFB1:
  33:../Sources/Algorithms.c **** 
  34:../Sources/Algorithms.c **** float determineSpeed(){
  75              		.loc 1 34 0
  76              		.cfi_startproc
  77 0000 80B5     		push	{r7, lr}
  78              	.LCFI2:
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 7, -8
  81              		.cfi_offset 14, -4
  82 0002 00AF     		add	r7, sp, #0
  83              	.LCFI3:
  84              		.cfi_def_cfa_register 7
  35:../Sources/Algorithms.c **** 	return( ( SPEED * ( TFC_ReadPot(1) + 1 ) ) );
  85              		.loc 1 35 0
  86 0004 0120     		mov	r0, #1
  87 0006 FFF7FEFF 		bl	TFC_ReadPot
  88 000a 031C     		add	r3, r0, #0
  89 000c 181C     		add	r0, r3, #0
  90 000e FE21     		mov	r1, #254
  91 0010 8905     		lsl	r1, r1, #22
  92 0012 FFF7FEFF 		bl	__aeabi_fadd
  93 0016 031C     		add	r3, r0, #0
  94 0018 181C     		add	r0, r3, #0
  95 001a FC21     		mov	r1, #252
  96 001c 8905     		lsl	r1, r1, #22
  97 001e FFF7FEFF 		bl	__aeabi_fmul
  98 0022 031C     		add	r3, r0, #0
  36:../Sources/Algorithms.c **** }
  99              		.loc 1 36 0
 100 0024 181C     		add	r0, r3, #0
 101 0026 BD46     		mov	sp, r7
 102              		@ sp needed for prologue
 103 0028 80BD     		pop	{r7, pc}
 104              		.cfi_endproc
 105              	.LFE1:
 107              		.global	__aeabi_i2d
 108              		.global	__aeabi_dadd
 109              		.global	__aeabi_idiv
 110              		.global	__aeabi_ddiv
 111 002a C046     		.section	.text.findSideInfo,"ax",%progbits
 112              		.align	2
 113              		.global	findSideInfo
 114              		.code	16
 115              		.thumb_func
 117              	findSideInfo:
 118              	.LFB2:
  37:../Sources/Algorithms.c **** 
  38:../Sources/Algorithms.c **** struct sideInfo findSideInfo( int start, int stop, int threshold ){
 119              		.loc 1 38 0
 120              		.cfi_startproc
 121 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 122              	.LCFI4:
 123              		.cfi_def_cfa_offset 20
 124              		.cfi_offset 4, -20
 125              		.cfi_offset 5, -16
 126              		.cfi_offset 6, -12
 127              		.cfi_offset 7, -8
 128              		.cfi_offset 14, -4
 129 0002 8DB0     		sub	sp, sp, #52
 130              	.LCFI5:
 131              		.cfi_def_cfa_offset 72
 132 0004 00AF     		add	r7, sp, #0
 133              	.LCFI6:
 134              		.cfi_def_cfa_register 7
 135 0006 F860     		str	r0, [r7, #12]
 136 0008 B960     		str	r1, [r7, #8]
 137 000a 7A60     		str	r2, [r7, #4]
 138 000c 3B60     		str	r3, [r7]
  39:../Sources/Algorithms.c **** 	struct sideInfo sideInfo;
  40:../Sources/Algorithms.c **** 	sideInfo.Sum = 0.0;
 139              		.loc 1 40 0
 140 000e 3A1C     		mov	r2, r7
 141 0010 1032     		add	r2, r2, #16
 142 0012 5A4C     		ldr	r4, .L13+4
 143 0014 584B     		ldr	r3, .L13
 144 0016 1360     		str	r3, [r2]
 145 0018 5460     		str	r4, [r2, #4]
  41:../Sources/Algorithms.c **** 	sideInfo.Changes = 0;
 146              		.loc 1 41 0
 147 001a 3B1C     		mov	r3, r7
 148 001c 1033     		add	r3, r3, #16
 149 001e 0022     		mov	r2, #0
 150 0020 9A60     		str	r2, [r3, #8]
  42:../Sources/Algorithms.c **** 	
  43:../Sources/Algorithms.c **** 	int i;
  44:../Sources/Algorithms.c **** 	int avg_1 = 0;
 151              		.loc 1 44 0
 152 0022 0023     		mov	r3, #0
 153 0024 BB62     		str	r3, [r7, #40]
  45:../Sources/Algorithms.c **** 	int avg_2 = 0;
 154              		.loc 1 45 0
 155 0026 0023     		mov	r3, #0
 156 0028 7B62     		str	r3, [r7, #36]
  46:../Sources/Algorithms.c **** 	for(i = start; i <= stop; i++){
 157              		.loc 1 46 0
 158 002a BB68     		ldr	r3, [r7, #8]
 159 002c FB62     		str	r3, [r7, #44]
 160 002e 78E0     		b	.L8
 161              	.L11:
  47:../Sources/Algorithms.c **** 		sideInfo.Sum += LineScanImage0[i];
 162              		.loc 1 47 0
 163 0030 3B1C     		mov	r3, r7
 164 0032 1033     		add	r3, r3, #16
 165 0034 1D68     		ldr	r5, [r3]
 166 0036 5E68     		ldr	r6, [r3, #4]
 167 0038 514B     		ldr	r3, .L13+8
 168 003a 1A68     		ldr	r2, [r3]
 169 003c FB6A     		ldr	r3, [r7, #44]
 170 003e 5B00     		lsl	r3, r3, #1
 171 0040 D318     		add	r3, r2, r3
 172 0042 1B88     		ldrh	r3, [r3]
 173 0044 9BB2     		uxth	r3, r3
 174 0046 181C     		mov	r0, r3
 175 0048 FFF7FEFF 		bl	__aeabi_i2d
 176 004c 031C     		mov	r3, r0
 177 004e 0C1C     		mov	r4, r1
 178 0050 281C     		mov	r0, r5
 179 0052 311C     		mov	r1, r6
 180 0054 1A1C     		mov	r2, r3
 181 0056 231C     		mov	r3, r4
 182 0058 FFF7FEFF 		bl	__aeabi_dadd
 183 005c 031C     		mov	r3, r0
 184 005e 0C1C     		mov	r4, r1
 185 0060 3A1C     		mov	r2, r7
 186 0062 1032     		add	r2, r2, #16
 187 0064 1360     		str	r3, [r2]
 188 0066 5460     		str	r4, [r2, #4]
  48:../Sources/Algorithms.c **** 	    avg_1 = ( LineScanImage0[i - 2] + LineScanImage0[i - 1] + LineScanImage0[i] ) / 3;
 189              		.loc 1 48 0
 190 0068 454B     		ldr	r3, .L13+8
 191 006a 1A68     		ldr	r2, [r3]
 192 006c FB6A     		ldr	r3, [r7, #44]
 193 006e 023B     		sub	r3, r3, #2
 194 0070 5B00     		lsl	r3, r3, #1
 195 0072 D318     		add	r3, r2, r3
 196 0074 1B88     		ldrh	r3, [r3]
 197 0076 9BB2     		uxth	r3, r3
 198 0078 1A1C     		mov	r2, r3
 199 007a 414B     		ldr	r3, .L13+8
 200 007c 1968     		ldr	r1, [r3]
 201 007e FB6A     		ldr	r3, [r7, #44]
 202 0080 013B     		sub	r3, r3, #1
 203 0082 5B00     		lsl	r3, r3, #1
 204 0084 CB18     		add	r3, r1, r3
 205 0086 1B88     		ldrh	r3, [r3]
 206 0088 9BB2     		uxth	r3, r3
 207 008a D218     		add	r2, r2, r3
 208 008c 3C4B     		ldr	r3, .L13+8
 209 008e 1968     		ldr	r1, [r3]
 210 0090 FB6A     		ldr	r3, [r7, #44]
 211 0092 5B00     		lsl	r3, r3, #1
 212 0094 CB18     		add	r3, r1, r3
 213 0096 1B88     		ldrh	r3, [r3]
 214 0098 9BB2     		uxth	r3, r3
 215 009a D318     		add	r3, r2, r3
 216 009c 181C     		mov	r0, r3
 217 009e 0321     		mov	r1, #3
 218 00a0 FFF7FEFF 		bl	__aeabi_idiv
 219 00a4 031C     		mov	r3, r0
 220 00a6 BB62     		str	r3, [r7, #40]
  49:../Sources/Algorithms.c **** 	    avg_2 = ( LineScanImage0[i] + LineScanImage0[i + 1] + LineScanImage0[i + 2] ) / 3;
 221              		.loc 1 49 0
 222 00a8 354B     		ldr	r3, .L13+8
 223 00aa 1A68     		ldr	r2, [r3]
 224 00ac FB6A     		ldr	r3, [r7, #44]
 225 00ae 5B00     		lsl	r3, r3, #1
 226 00b0 D318     		add	r3, r2, r3
 227 00b2 1B88     		ldrh	r3, [r3]
 228 00b4 9BB2     		uxth	r3, r3
 229 00b6 1A1C     		mov	r2, r3
 230 00b8 314B     		ldr	r3, .L13+8
 231 00ba 1968     		ldr	r1, [r3]
 232 00bc FB6A     		ldr	r3, [r7, #44]
 233 00be 0133     		add	r3, r3, #1
 234 00c0 5B00     		lsl	r3, r3, #1
 235 00c2 CB18     		add	r3, r1, r3
 236 00c4 1B88     		ldrh	r3, [r3]
 237 00c6 9BB2     		uxth	r3, r3
 238 00c8 D218     		add	r2, r2, r3
 239 00ca 2D4B     		ldr	r3, .L13+8
 240 00cc 1968     		ldr	r1, [r3]
 241 00ce FB6A     		ldr	r3, [r7, #44]
 242 00d0 0233     		add	r3, r3, #2
 243 00d2 5B00     		lsl	r3, r3, #1
 244 00d4 CB18     		add	r3, r1, r3
 245 00d6 1B88     		ldrh	r3, [r3]
 246 00d8 9BB2     		uxth	r3, r3
 247 00da D318     		add	r3, r2, r3
 248 00dc 181C     		mov	r0, r3
 249 00de 0321     		mov	r1, #3
 250 00e0 FFF7FEFF 		bl	__aeabi_idiv
 251 00e4 031C     		mov	r3, r0
 252 00e6 7B62     		str	r3, [r7, #36]
  50:../Sources/Algorithms.c **** 	    if( avg_2 < ( avg_1 - threshold ) ){
 253              		.loc 1 50 0
 254 00e8 BA6A     		ldr	r2, [r7, #40]
 255 00ea 3B68     		ldr	r3, [r7]
 256 00ec D21A     		sub	r2, r2, r3
 257 00ee 7B6A     		ldr	r3, [r7, #36]
 258 00f0 9A42     		cmp	r2, r3
 259 00f2 06DD     		ble	.L9
  51:../Sources/Algorithms.c **** 	    	sideInfo.Changes++;
 260              		.loc 1 51 0
 261 00f4 3B1C     		mov	r3, r7
 262 00f6 1033     		add	r3, r3, #16
 263 00f8 9B68     		ldr	r3, [r3, #8]
 264 00fa 5A1C     		add	r2, r3, #1
 265 00fc 3B1C     		mov	r3, r7
 266 00fe 1033     		add	r3, r3, #16
 267 0100 9A60     		str	r2, [r3, #8]
 268              	.L9:
  52:../Sources/Algorithms.c **** 	    }
  53:../Sources/Algorithms.c **** 	    if( avg_2 > ( avg_1 + threshold ) ){
 269              		.loc 1 53 0
 270 0102 BA6A     		ldr	r2, [r7, #40]
 271 0104 3B68     		ldr	r3, [r7]
 272 0106 D218     		add	r2, r2, r3
 273 0108 7B6A     		ldr	r3, [r7, #36]
 274 010a 9A42     		cmp	r2, r3
 275 010c 06DA     		bge	.L10
  54:../Sources/Algorithms.c **** 	    	sideInfo.Changes++;
 276              		.loc 1 54 0
 277 010e 3B1C     		mov	r3, r7
 278 0110 1033     		add	r3, r3, #16
 279 0112 9B68     		ldr	r3, [r3, #8]
 280 0114 5A1C     		add	r2, r3, #1
 281 0116 3B1C     		mov	r3, r7
 282 0118 1033     		add	r3, r3, #16
 283 011a 9A60     		str	r2, [r3, #8]
 284              	.L10:
  46:../Sources/Algorithms.c **** 	for(i = start; i <= stop; i++){
 285              		.loc 1 46 0
 286 011c FB6A     		ldr	r3, [r7, #44]
 287 011e 0133     		add	r3, r3, #1
 288 0120 FB62     		str	r3, [r7, #44]
 289              	.L8:
  46:../Sources/Algorithms.c **** 	for(i = start; i <= stop; i++){
 290              		.loc 1 46 0 is_stmt 0
 291 0122 FA6A     		ldr	r2, [r7, #44]
 292 0124 7B68     		ldr	r3, [r7, #4]
 293 0126 9A42     		cmp	r2, r3
 294 0128 00DC     		bgt	.LCB240
 295 012a 81E7     		b	.L11	@long jump
 296              	.LCB240:
  55:../Sources/Algorithms.c **** 	    }
  56:../Sources/Algorithms.c **** 	}
  57:../Sources/Algorithms.c **** 	
  58:../Sources/Algorithms.c **** 	sideInfo.Sum /= (double)i;
 297              		.loc 1 58 0 is_stmt 1
 298 012c 3B1C     		mov	r3, r7
 299 012e 1033     		add	r3, r3, #16
 300 0130 1D68     		ldr	r5, [r3]
 301 0132 5E68     		ldr	r6, [r3, #4]
 302 0134 F86A     		ldr	r0, [r7, #44]
 303 0136 FFF7FEFF 		bl	__aeabi_i2d
 304 013a 031C     		mov	r3, r0
 305 013c 0C1C     		mov	r4, r1
 306 013e 281C     		mov	r0, r5
 307 0140 311C     		mov	r1, r6
 308 0142 1A1C     		mov	r2, r3
 309 0144 231C     		mov	r3, r4
 310 0146 FFF7FEFF 		bl	__aeabi_ddiv
 311 014a 031C     		mov	r3, r0
 312 014c 0C1C     		mov	r4, r1
 313 014e 3A1C     		mov	r2, r7
 314 0150 1032     		add	r2, r2, #16
 315 0152 1360     		str	r3, [r2]
 316 0154 5460     		str	r4, [r2, #4]
  59:../Sources/Algorithms.c **** 	return(sideInfo);
 317              		.loc 1 59 0
 318 0156 FA68     		ldr	r2, [r7, #12]
 319 0158 3B1C     		mov	r3, r7
 320 015a 1033     		add	r3, r3, #16
 321 015c 111C     		mov	r1, r2
 322 015e 1A1C     		mov	r2, r3
 323 0160 1023     		mov	r3, #16
 324 0162 081C     		mov	r0, r1
 325 0164 111C     		mov	r1, r2
 326 0166 1A1C     		mov	r2, r3
 327 0168 FFF7FEFF 		bl	memcpy
  60:../Sources/Algorithms.c **** }
 328              		.loc 1 60 0
 329 016c F868     		ldr	r0, [r7, #12]
 330 016e BD46     		mov	sp, r7
 331 0170 0DB0     		add	sp, sp, #52
 332              		@ sp needed for prologue
 333 0172 F0BD     		pop	{r4, r5, r6, r7, pc}
 334              	.L14:
 335 0174 C046C046 		.align	3
 336              	.L13:
 337 0178 00000000 		.word	0
 338 017c 00000000 		.word	0
 339 0180 00000000 		.word	LineScanImage0
 340              		.cfi_endproc
 341              	.LFE2:
 343              		.global	__aeabi_dsub
 344              		.global	__aeabi_d2iz
 345              		.global	__aeabi_dcmplt
 346              		.global	__aeabi_dmul
 347              		.global	__aeabi_dcmpgt
 348              		.global	__aeabi_d2f
 349 0184 C046C046 		.section	.text.setTurn,"ax",%progbits
 350              		.align	2
 351              		.global	setTurn
 352              		.code	16
 353              		.thumb_func
 355              	setTurn:
 356              	.LFB3:
  61:../Sources/Algorithms.c **** 
  62:../Sources/Algorithms.c **** void setTurn( struct sideInfo left, struct sideInfo right ){
 357              		.loc 1 62 0
 358              		.cfi_startproc
 359 0000 90B5     		push	{r4, r7, lr}
 360              	.LCFI7:
 361              		.cfi_def_cfa_offset 12
 362              		.cfi_offset 4, -12
 363              		.cfi_offset 7, -8
 364              		.cfi_offset 14, -4
 365 0002 89B0     		sub	sp, sp, #36
 366              	.LCFI8:
 367              		.cfi_def_cfa_offset 48
 368 0004 00AF     		add	r7, sp, #0
 369              	.LCFI9:
 370              		.cfi_def_cfa_register 7
 371 0006 3C1C     		mov	r4, r7
 372 0008 2060     		str	r0, [r4]
 373 000a 6160     		str	r1, [r4, #4]
 374 000c A260     		str	r2, [r4, #8]
 375 000e E360     		str	r3, [r4, #12]
  63:../Sources/Algorithms.c **** 	double difference = (double)abs(left.Sum - right.Sum);
 376              		.loc 1 63 0
 377 0010 3B1C     		mov	r3, r7
 378 0012 1968     		ldr	r1, [r3]
 379 0014 5A68     		ldr	r2, [r3, #4]
 380 0016 3B1C     		mov	r3, r7
 381 0018 3033     		add	r3, r3, #48
 382 001a 5C68     		ldr	r4, [r3, #4]
 383 001c 1B68     		ldr	r3, [r3]
 384 001e 081C     		mov	r0, r1
 385 0020 111C     		mov	r1, r2
 386 0022 1A1C     		mov	r2, r3
 387 0024 231C     		mov	r3, r4
 388 0026 FFF7FEFF 		bl	__aeabi_dsub
 389 002a 031C     		mov	r3, r0
 390 002c 0C1C     		mov	r4, r1
 391 002e 181C     		mov	r0, r3
 392 0030 211C     		mov	r1, r4
 393 0032 FFF7FEFF 		bl	__aeabi_d2iz
 394 0036 031C     		mov	r3, r0
 395 0038 DA17     		asr	r2, r3, #31
 396 003a 9B18     		add	r3, r3, r2
 397 003c 5340     		eor	r3, r2
 398 003e 181C     		mov	r0, r3
 399 0040 FFF7FEFF 		bl	__aeabi_i2d
 400 0044 031C     		mov	r3, r0
 401 0046 0C1C     		mov	r4, r1
 402 0048 3B61     		str	r3, [r7, #16]
 403 004a 7C61     		str	r4, [r7, #20]
  64:../Sources/Algorithms.c **** 	difference /= DIFFDIV;
 404              		.loc 1 64 0
 405 004c 3869     		ldr	r0, [r7, #16]
 406 004e 7969     		ldr	r1, [r7, #20]
 407 0050 2C4B     		ldr	r3, .L25+4
 408 0052 2B4A     		ldr	r2, .L25
 409 0054 FFF7FEFF 		bl	__aeabi_ddiv
 410 0058 031C     		mov	r3, r0
 411 005a 0C1C     		mov	r4, r1
 412 005c 3B61     		str	r3, [r7, #16]
 413 005e 7C61     		str	r4, [r7, #20]
  65:../Sources/Algorithms.c **** 	            
  66:../Sources/Algorithms.c **** 	// Default to straight ahead
  67:../Sources/Algorithms.c **** 	double steering_value = 0.0;
 414              		.loc 1 67 0
 415 0060 294B     		ldr	r3, .L25+8
 416 0062 2A4C     		ldr	r4, .L25+12
 417 0064 BB61     		str	r3, [r7, #24]
 418 0066 FC61     		str	r4, [r7, #28]
  68:../Sources/Algorithms.c **** 
  69:../Sources/Algorithms.c **** 	if(left.Sum < right.Sum){
 419              		.loc 1 69 0
 420 0068 3B1C     		mov	r3, r7
 421 006a 1968     		ldr	r1, [r3]
 422 006c 5A68     		ldr	r2, [r3, #4]
 423 006e 3B1C     		mov	r3, r7
 424 0070 3033     		add	r3, r3, #48
 425 0072 5C68     		ldr	r4, [r3, #4]
 426 0074 1B68     		ldr	r3, [r3]
 427 0076 081C     		mov	r0, r1
 428 0078 111C     		mov	r1, r2
 429 007a 1A1C     		mov	r2, r3
 430 007c 231C     		mov	r3, r4
 431 007e FFF7FEFF 		bl	__aeabi_dcmplt
 432 0082 031C     		mov	r3, r0
 433 0084 002B     		cmp	r3, #0
 434 0086 17D0     		beq	.L24
 435              	.L21:
  70:../Sources/Algorithms.c **** 		steering_value = 0.5 * difference;
 436              		.loc 1 70 0
 437 0088 3869     		ldr	r0, [r7, #16]
 438 008a 7969     		ldr	r1, [r7, #20]
 439 008c 204A     		ldr	r2, .L25+16
 440 008e 214B     		ldr	r3, .L25+20
 441 0090 FFF7FEFF 		bl	__aeabi_dmul
 442 0094 031C     		mov	r3, r0
 443 0096 0C1C     		mov	r4, r1
 444 0098 BB61     		str	r3, [r7, #24]
 445 009a FC61     		str	r4, [r7, #28]
  71:../Sources/Algorithms.c **** 	    if(steering_value > .7)steering_value = .7;
 446              		.loc 1 71 0
 447 009c B869     		ldr	r0, [r7, #24]
 448 009e F969     		ldr	r1, [r7, #28]
 449 00a0 1D4A     		ldr	r2, .L25+24
 450 00a2 1E4B     		ldr	r3, .L25+28
 451 00a4 FFF7FEFF 		bl	__aeabi_dcmpgt
 452 00a8 031C     		mov	r3, r0
 453 00aa 002B     		cmp	r3, #0
 454 00ac 1BD0     		beq	.L18
 455              	.L22:
 456              		.loc 1 71 0 is_stmt 0
 457 00ae 1A4B     		ldr	r3, .L25+24
 458 00b0 1A4C     		ldr	r4, .L25+28
 459 00b2 BB61     		str	r3, [r7, #24]
 460 00b4 FC61     		str	r4, [r7, #28]
 461 00b6 16E0     		b	.L18
 462              	.L24:
  72:../Sources/Algorithms.c **** 	} else {
  73:../Sources/Algorithms.c **** 	    steering_value = -0.5 * difference;
 463              		.loc 1 73 0 is_stmt 1
 464 00b8 3869     		ldr	r0, [r7, #16]
 465 00ba 7969     		ldr	r1, [r7, #20]
 466 00bc 184A     		ldr	r2, .L25+32
 467 00be 194B     		ldr	r3, .L25+36
 468 00c0 FFF7FEFF 		bl	__aeabi_dmul
 469 00c4 031C     		mov	r3, r0
 470 00c6 0C1C     		mov	r4, r1
 471 00c8 BB61     		str	r3, [r7, #24]
 472 00ca FC61     		str	r4, [r7, #28]
  74:../Sources/Algorithms.c **** 	    if(steering_value < -.7)steering_value = -.7;
 473              		.loc 1 74 0
 474 00cc B869     		ldr	r0, [r7, #24]
 475 00ce F969     		ldr	r1, [r7, #28]
 476 00d0 154A     		ldr	r2, .L25+40
 477 00d2 164B     		ldr	r3, .L25+44
 478 00d4 FFF7FEFF 		bl	__aeabi_dcmplt
 479 00d8 031C     		mov	r3, r0
 480 00da 002B     		cmp	r3, #0
 481 00dc 03D0     		beq	.L18
 482              	.L23:
 483              		.loc 1 74 0 is_stmt 0
 484 00de 124B     		ldr	r3, .L25+40
 485 00e0 124C     		ldr	r4, .L25+44
 486 00e2 BB61     		str	r3, [r7, #24]
 487 00e4 FC61     		str	r4, [r7, #28]
 488              	.L18:
  75:../Sources/Algorithms.c **** 	}
  76:../Sources/Algorithms.c **** 
  77:../Sources/Algorithms.c **** 	TFC_SetServo(0, steering_value);
 489              		.loc 1 77 0 is_stmt 1
 490 00e6 B869     		ldr	r0, [r7, #24]
 491 00e8 F969     		ldr	r1, [r7, #28]
 492 00ea FFF7FEFF 		bl	__aeabi_d2f
 493 00ee 031C     		add	r3, r0, #0
 494 00f0 0020     		mov	r0, #0
 495 00f2 191C     		add	r1, r3, #0
 496 00f4 FFF7FEFF 		bl	TFC_SetServo
  78:../Sources/Algorithms.c **** }
 497              		.loc 1 78 0
 498 00f8 BD46     		mov	sp, r7
 499 00fa 09B0     		add	sp, sp, #36
 500              		@ sp needed for prologue
 501 00fc 90BD     		pop	{r4, r7, pc}
 502              	.L26:
 503 00fe C046     		.align	3
 504              	.L25:
 505 0100 00000000 		.word	0
 506 0104 00408F40 		.word	1083129856
 507 0108 00000000 		.word	0
 508 010c 00000000 		.word	0
 509 0110 00000000 		.word	0
 510 0114 0000E03F 		.word	1071644672
 511 0118 66666666 		.word	1717986918
 512 011c 6666E63F 		.word	1072064102
 513 0120 00000000 		.word	0
 514 0124 0000E0BF 		.word	-1075838976
 515 0128 66666666 		.word	1717986918
 516 012c 6666E6BF 		.word	-1075419546
 517              		.cfi_endproc
 518              	.LFE3:
 520              		.section	.text.stop_car,"ax",%progbits
 521              		.align	2
 522              		.global	stop_car
 523              		.code	16
 524              		.thumb_func
 526              	stop_car:
 527              	.LFB4:
  79:../Sources/Algorithms.c **** 
  80:../Sources/Algorithms.c **** int stop_car(){
 528              		.loc 1 80 0
 529              		.cfi_startproc
 530 0000 80B5     		push	{r7, lr}
 531              	.LCFI10:
 532              		.cfi_def_cfa_offset 8
 533              		.cfi_offset 7, -8
 534              		.cfi_offset 14, -4
 535 0002 84B0     		sub	sp, sp, #16
 536              	.LCFI11:
 537              		.cfi_def_cfa_offset 24
 538 0004 00AF     		add	r7, sp, #0
 539              	.LCFI12:
 540              		.cfi_def_cfa_register 7
  81:../Sources/Algorithms.c **** 	
  82:../Sources/Algorithms.c **** 	while(!LineScanImageReady);
 541              		.loc 1 82 0
 542 0006 C046     		mov	r8, r8
 543              	.L28:
 544              		.loc 1 82 0 is_stmt 0
 545 0008 284B     		ldr	r3, .L35
 546 000a 1B78     		ldrb	r3, [r3]
 547 000c DBB2     		uxtb	r3, r3
 548 000e 002B     		cmp	r3, #0
 549 0010 FAD0     		beq	.L28
  83:../Sources/Algorithms.c **** 	LineScanImageReady = 0;
 550              		.loc 1 83 0 is_stmt 1
 551 0012 264B     		ldr	r3, .L35
 552 0014 0022     		mov	r2, #0
 553 0016 1A70     		strb	r2, [r3]
  84:../Sources/Algorithms.c **** 	
  85:../Sources/Algorithms.c **** 	int i;
  86:../Sources/Algorithms.c **** 	int width = 0;
 554              		.loc 1 86 0
 555 0018 0023     		mov	r3, #0
 556 001a 3B60     		str	r3, [r7]
  87:../Sources/Algorithms.c **** 	int start = START_PIXEL;
 557              		.loc 1 87 0
 558 001c 0F23     		mov	r3, #15
 559 001e BB60     		str	r3, [r7, #8]
  88:../Sources/Algorithms.c **** 	int stop = 0;
 560              		.loc 1 88 0
 561 0020 0023     		mov	r3, #0
 562 0022 7B60     		str	r3, [r7, #4]
  89:../Sources/Algorithms.c **** 	
  90:../Sources/Algorithms.c **** 	for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 563              		.loc 1 90 0
 564 0024 0F23     		mov	r3, #15
 565 0026 FB60     		str	r3, [r7, #12]
 566 0028 37E0     		b	.L29
 567              	.L34:
  91:../Sources/Algorithms.c **** 		if( LineScanImage0[i] < ( LineScanImage0[i-1] - 500 ) ){ 
 568              		.loc 1 91 0
 569 002a 214B     		ldr	r3, .L35+4
 570 002c 1A68     		ldr	r2, [r3]
 571 002e FB68     		ldr	r3, [r7, #12]
 572 0030 5B00     		lsl	r3, r3, #1
 573 0032 D318     		add	r3, r2, r3
 574 0034 1B88     		ldrh	r3, [r3]
 575 0036 9BB2     		uxth	r3, r3
 576 0038 1A1C     		mov	r2, r3
 577 003a 1D4B     		ldr	r3, .L35+4
 578 003c 1968     		ldr	r1, [r3]
 579 003e FB68     		ldr	r3, [r7, #12]
 580 0040 013B     		sub	r3, r3, #1
 581 0042 5B00     		lsl	r3, r3, #1
 582 0044 CB18     		add	r3, r1, r3
 583 0046 1B88     		ldrh	r3, [r3]
 584 0048 9BB2     		uxth	r3, r3
 585 004a F53B     		sub	r3, r3, #245
 586 004c FF3B     		sub	r3, r3, #255
 587 004e 9A42     		cmp	r2, r3
 588 0050 01DA     		bge	.L30
  92:../Sources/Algorithms.c **** 			start = i;
 589              		.loc 1 92 0
 590 0052 FB68     		ldr	r3, [r7, #12]
 591 0054 BB60     		str	r3, [r7, #8]
 592              	.L30:
  93:../Sources/Algorithms.c **** 		}
  94:../Sources/Algorithms.c **** 		if( LineScanImage0[i] > ( LineScanImage0[i-1] + 500 ) ){
 593              		.loc 1 94 0
 594 0056 164B     		ldr	r3, .L35+4
 595 0058 1A68     		ldr	r2, [r3]
 596 005a FB68     		ldr	r3, [r7, #12]
 597 005c 5B00     		lsl	r3, r3, #1
 598 005e D318     		add	r3, r2, r3
 599 0060 1B88     		ldrh	r3, [r3]
 600 0062 9BB2     		uxth	r3, r3
 601 0064 1A1C     		mov	r2, r3
 602 0066 124B     		ldr	r3, .L35+4
 603 0068 1968     		ldr	r1, [r3]
 604 006a FB68     		ldr	r3, [r7, #12]
 605 006c 013B     		sub	r3, r3, #1
 606 006e 5B00     		lsl	r3, r3, #1
 607 0070 CB18     		add	r3, r1, r3
 608 0072 1B88     		ldrh	r3, [r3]
 609 0074 9BB2     		uxth	r3, r3
 610 0076 F533     		add	r3, r3, #245
 611 0078 FF33     		add	r3, r3, #255
 612 007a 9A42     		cmp	r2, r3
 613 007c 01DD     		ble	.L31
  95:../Sources/Algorithms.c **** 			stop = i;
 614              		.loc 1 95 0
 615 007e FB68     		ldr	r3, [r7, #12]
 616 0080 7B60     		str	r3, [r7, #4]
 617              	.L31:
  96:../Sources/Algorithms.c **** 		}
  97:../Sources/Algorithms.c **** 		width = stop - start;
 618              		.loc 1 97 0
 619 0082 7A68     		ldr	r2, [r7, #4]
 620 0084 BB68     		ldr	r3, [r7, #8]
 621 0086 D31A     		sub	r3, r2, r3
 622 0088 3B60     		str	r3, [r7]
  98:../Sources/Algorithms.c **** 		if( width > 20 ){
 623              		.loc 1 98 0
 624 008a 3B68     		ldr	r3, [r7]
 625 008c 142B     		cmp	r3, #20
 626 008e 01DD     		ble	.L32
  99:../Sources/Algorithms.c **** 			return 1;
 627              		.loc 1 99 0
 628 0090 0123     		mov	r3, #1
 629 0092 06E0     		b	.L33
 630              	.L32:
  90:../Sources/Algorithms.c **** 	for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 631              		.loc 1 90 0
 632 0094 FB68     		ldr	r3, [r7, #12]
 633 0096 0133     		add	r3, r3, #1
 634 0098 FB60     		str	r3, [r7, #12]
 635              	.L29:
  90:../Sources/Algorithms.c **** 	for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 636              		.loc 1 90 0 is_stmt 0
 637 009a FB68     		ldr	r3, [r7, #12]
 638 009c 702B     		cmp	r3, #112
 639 009e C4DD     		ble	.L34
 100:../Sources/Algorithms.c **** 		}
 101:../Sources/Algorithms.c **** 	}
 102:../Sources/Algorithms.c **** 	return 0;
 640              		.loc 1 102 0 is_stmt 1
 641 00a0 0023     		mov	r3, #0
 642              	.L33:
 103:../Sources/Algorithms.c **** }
 643              		.loc 1 103 0
 644 00a2 181C     		mov	r0, r3
 645 00a4 BD46     		mov	sp, r7
 646 00a6 04B0     		add	sp, sp, #16
 647              		@ sp needed for prologue
 648 00a8 80BD     		pop	{r7, pc}
 649              	.L36:
 650 00aa C046     		.align	2
 651              	.L35:
 652 00ac 00000000 		.word	LineScanImageReady
 653 00b0 00000000 		.word	LineScanImage0
 654              		.cfi_endproc
 655              	.LFE4:
 657              		.section	.rodata
 658              		.align	2
 659              	.LC5:
 660 0000 256400   		.ascii	"%d\000"
 661 0003 00       		.align	2
 662              	.LC7:
 663 0004 0D00     		.ascii	"\015\000"
 664              		.global	__aeabi_i2f
 665              		.global	__aeabi_fdiv
 666              		.global	__aeabi_fsub
 667 0006 0000     		.section	.text.algo_one,"ax",%progbits
 668              		.align	2
 669              		.global	algo_one
 670              		.code	16
 671              		.thumb_func
 673              	algo_one:
 674              	.LFB5:
 104:../Sources/Algorithms.c **** 
 105:../Sources/Algorithms.c **** void algo_one(){
 675              		.loc 1 105 0
 676              		.cfi_startproc
 677 0000 90B5     		push	{r4, r7, lr}
 678              	.LCFI13:
 679              		.cfi_def_cfa_offset 12
 680              		.cfi_offset 4, -12
 681              		.cfi_offset 7, -8
 682              		.cfi_offset 14, -4
 683 0002 EDB0     		sub	sp, sp, #436
 684              	.LCFI14:
 685              		.cfi_def_cfa_offset 448
 686 0004 00AF     		add	r7, sp, #0
 687              	.LCFI15:
 688              		.cfi_def_cfa_register 7
 106:../Sources/Algorithms.c ****     int i;
 107:../Sources/Algorithms.c **** 
 108:../Sources/Algorithms.c ****     //Variables for calculating average light levels
 109:../Sources/Algorithms.c ****     long int sum = 0;
 689              		.loc 1 109 0
 690 0006 0023     		mov	r3, #0
 691 0008 D421     		mov	r1, #212
 692 000a 4900     		lsl	r1, r1, #1
 693 000c C919     		add	r1, r1, r7
 694 000e 0B60     		str	r3, [r1]
 110:../Sources/Algorithms.c ****     int avg;
 111:../Sources/Algorithms.c **** 
 112:../Sources/Algorithms.c ****     //Array recording if pixel light level is below average
 113:../Sources/Algorithms.c ****     int belowAvg[ STOP_PIXEL - START_PIXEL + 1 ];
 114:../Sources/Algorithms.c **** 
 115:../Sources/Algorithms.c ****     //Variables for calculating center of the pixels below average and difference from center of al
 116:../Sources/Algorithms.c ****     int sumBelowAvg = 0;
 695              		.loc 1 116 0
 696 0010 0023     		mov	r3, #0
 697 0012 D222     		mov	r2, #210
 698 0014 5200     		lsl	r2, r2, #1
 699 0016 D219     		add	r2, r2, r7
 700 0018 1360     		str	r3, [r2]
 117:../Sources/Algorithms.c ****     int totBelowAvg = 0;
 701              		.loc 1 117 0
 702 001a 0023     		mov	r3, #0
 703 001c D021     		mov	r1, #208
 704 001e 4900     		lsl	r1, r1, #1
 705 0020 C919     		add	r1, r1, r7
 706 0022 0B60     		str	r3, [r1]
 118:../Sources/Algorithms.c ****     int centerBelowAvg;
 119:../Sources/Algorithms.c ****     int center = ( STOP_PIXEL - START_PIXEL + 1) / 2;
 707              		.loc 1 119 0
 708 0024 3123     		mov	r3, #49
 709 0026 CE22     		mov	r2, #206
 710 0028 5200     		lsl	r2, r2, #1
 711 002a D219     		add	r2, r2, r7
 712 002c 1360     		str	r3, [r2]
 120:../Sources/Algorithms.c ****     int diffCenter;
 121:../Sources/Algorithms.c ****     float diff;
 122:../Sources/Algorithms.c **** 
 123:../Sources/Algorithms.c ****     if( LineScanImageReady == 1 ){
 713              		.loc 1 123 0
 714 002e 984B     		ldr	r3, .L50
 715 0030 1B78     		ldrb	r3, [r3]
 716 0032 DBB2     		uxtb	r3, r3
 717 0034 012B     		cmp	r3, #1
 718 0036 00D0     		beq	.LCB588
 719 0038 A5E0     		b	.L38	@long jump
 720              	.LCB588:
 124:../Sources/Algorithms.c ****         LineScanImageReady = 0;
 721              		.loc 1 124 0
 722 003a 954B     		ldr	r3, .L50
 723 003c 0022     		mov	r2, #0
 724 003e 1A70     		strb	r2, [r3]
 125:../Sources/Algorithms.c **** 
 126:../Sources/Algorithms.c ****         //Adds each pixels light value to the total
 127:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 725              		.loc 1 127 0
 726 0040 0F23     		mov	r3, #15
 727 0042 D621     		mov	r1, #214
 728 0044 4900     		lsl	r1, r1, #1
 729 0046 C919     		add	r1, r1, r7
 730 0048 0B60     		str	r3, [r1]
 731 004a 1BE0     		b	.L39
 732              	.L40:
 128:../Sources/Algorithms.c ****             sum += LineScanImage0[i];
 733              		.loc 1 128 0
 734 004c 914B     		ldr	r3, .L50+4
 735 004e 1A68     		ldr	r2, [r3]
 736 0050 D621     		mov	r1, #214
 737 0052 4900     		lsl	r1, r1, #1
 738 0054 C919     		add	r1, r1, r7
 739 0056 0B68     		ldr	r3, [r1]
 740 0058 5B00     		lsl	r3, r3, #1
 741 005a D318     		add	r3, r2, r3
 742 005c 1B88     		ldrh	r3, [r3]
 743 005e 9BB2     		uxth	r3, r3
 744 0060 D421     		mov	r1, #212
 745 0062 4900     		lsl	r1, r1, #1
 746 0064 C919     		add	r1, r1, r7
 747 0066 0A68     		ldr	r2, [r1]
 748 0068 D318     		add	r3, r2, r3
 749 006a D422     		mov	r2, #212
 750 006c 5200     		lsl	r2, r2, #1
 751 006e D219     		add	r2, r2, r7
 752 0070 1360     		str	r3, [r2]
 127:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 753              		.loc 1 127 0
 754 0072 D621     		mov	r1, #214
 755 0074 4900     		lsl	r1, r1, #1
 756 0076 C919     		add	r1, r1, r7
 757 0078 0B68     		ldr	r3, [r1]
 758 007a 0133     		add	r3, r3, #1
 759 007c D622     		mov	r2, #214
 760 007e 5200     		lsl	r2, r2, #1
 761 0080 D219     		add	r2, r2, r7
 762 0082 1360     		str	r3, [r2]
 763              	.L39:
 127:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 764              		.loc 1 127 0 is_stmt 0
 765 0084 D621     		mov	r1, #214
 766 0086 4900     		lsl	r1, r1, #1
 767 0088 C919     		add	r1, r1, r7
 768 008a 0B68     		ldr	r3, [r1]
 769 008c 702B     		cmp	r3, #112
 770 008e DDDD     		ble	.L40
 129:../Sources/Algorithms.c ****         }
 130:../Sources/Algorithms.c **** 
 131:../Sources/Algorithms.c ****         //Calculates average light value
 132:../Sources/Algorithms.c ****         avg = sum / ( STOP_PIXEL - START_PIXEL );
 771              		.loc 1 132 0 is_stmt 1
 772 0090 D422     		mov	r2, #212
 773 0092 5200     		lsl	r2, r2, #1
 774 0094 D219     		add	r2, r2, r7
 775 0096 1368     		ldr	r3, [r2]
 776 0098 181C     		mov	r0, r3
 777 009a 6221     		mov	r1, #98
 778 009c FFF7FEFF 		bl	__aeabi_idiv
 779 00a0 031C     		mov	r3, r0
 780 00a2 CC21     		mov	r1, #204
 781 00a4 4900     		lsl	r1, r1, #1
 782 00a6 C919     		add	r1, r1, r7
 783 00a8 0B60     		str	r3, [r1]
 133:../Sources/Algorithms.c **** 
 134:../Sources/Algorithms.c ****         //Calculates which pixels are below average and fills the array accordingly
 135:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 784              		.loc 1 135 0
 785 00aa 0F23     		mov	r3, #15
 786 00ac D622     		mov	r2, #214
 787 00ae 5200     		lsl	r2, r2, #1
 788 00b0 D219     		add	r2, r2, r7
 789 00b2 1360     		str	r3, [r2]
 790 00b4 36E0     		b	.L41
 791              	.L44:
 136:../Sources/Algorithms.c **** 
 137:../Sources/Algorithms.c ****             //If pixel is below average sets corresponding array element to 1
 138:../Sources/Algorithms.c ****             if( LineScanImage0[i] < avg ){
 792              		.loc 1 138 0
 793 00b6 774B     		ldr	r3, .L50+4
 794 00b8 1A68     		ldr	r2, [r3]
 795 00ba D621     		mov	r1, #214
 796 00bc 4900     		lsl	r1, r1, #1
 797 00be C919     		add	r1, r1, r7
 798 00c0 0B68     		ldr	r3, [r1]
 799 00c2 5B00     		lsl	r3, r3, #1
 800 00c4 D318     		add	r3, r2, r3
 801 00c6 1B88     		ldrh	r3, [r3]
 802 00c8 9BB2     		uxth	r3, r3
 803 00ca 1A1C     		mov	r2, r3
 804 00cc CC21     		mov	r1, #204
 805 00ce 4900     		lsl	r1, r1, #1
 806 00d0 C919     		add	r1, r1, r7
 807 00d2 0B68     		ldr	r3, [r1]
 808 00d4 9A42     		cmp	r2, r3
 809 00d6 0EDA     		bge	.L42
 139:../Sources/Algorithms.c ****                 belowAvg[ i - START_PIXEL ] = 1;
 810              		.loc 1 139 0
 811 00d8 D622     		mov	r2, #214
 812 00da 5200     		lsl	r2, r2, #1
 813 00dc D219     		add	r2, r2, r7
 814 00de 1368     		ldr	r3, [r2]
 815 00e0 1A1C     		mov	r2, r3
 816 00e2 0F3A     		sub	r2, r2, #15
 817 00e4 6C4B     		ldr	r3, .L50+8
 818 00e6 D821     		mov	r1, #216
 819 00e8 4900     		lsl	r1, r1, #1
 820 00ea C919     		add	r1, r1, r7
 821 00ec CB18     		add	r3, r1, r3
 822 00ee 9200     		lsl	r2, r2, #2
 823 00f0 0121     		mov	r1, #1
 824 00f2 D150     		str	r1, [r2, r3]
 825 00f4 0DE0     		b	.L43
 826              	.L42:
 140:../Sources/Algorithms.c ****             }
 141:../Sources/Algorithms.c **** 
 142:../Sources/Algorithms.c ****             //If pixel is above average sets corresponding array element to 0
 143:../Sources/Algorithms.c ****             else {
 144:../Sources/Algorithms.c ****                 belowAvg[ i - START_PIXEL ] = 0;
 827              		.loc 1 144 0
 828 00f6 D622     		mov	r2, #214
 829 00f8 5200     		lsl	r2, r2, #1
 830 00fa D219     		add	r2, r2, r7
 831 00fc 1368     		ldr	r3, [r2]
 832 00fe 1A1C     		mov	r2, r3
 833 0100 0F3A     		sub	r2, r2, #15
 834 0102 654B     		ldr	r3, .L50+8
 835 0104 D821     		mov	r1, #216
 836 0106 4900     		lsl	r1, r1, #1
 837 0108 C919     		add	r1, r1, r7
 838 010a CB18     		add	r3, r1, r3
 839 010c 9200     		lsl	r2, r2, #2
 840 010e 0021     		mov	r1, #0
 841 0110 D150     		str	r1, [r2, r3]
 842              	.L43:
 135:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 843              		.loc 1 135 0
 844 0112 D622     		mov	r2, #214
 845 0114 5200     		lsl	r2, r2, #1
 846 0116 D219     		add	r2, r2, r7
 847 0118 1368     		ldr	r3, [r2]
 848 011a 0133     		add	r3, r3, #1
 849 011c D621     		mov	r1, #214
 850 011e 4900     		lsl	r1, r1, #1
 851 0120 C919     		add	r1, r1, r7
 852 0122 0B60     		str	r3, [r1]
 853              	.L41:
 135:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 854              		.loc 1 135 0 is_stmt 0
 855 0124 D622     		mov	r2, #214
 856 0126 5200     		lsl	r2, r2, #1
 857 0128 D219     		add	r2, r2, r7
 858 012a 1368     		ldr	r3, [r2]
 859 012c 702B     		cmp	r3, #112
 860 012e C2DD     		ble	.L44
 145:../Sources/Algorithms.c ****             }
 146:../Sources/Algorithms.c ****         }
 147:../Sources/Algorithms.c **** 
 148:../Sources/Algorithms.c ****         //Outputs the array over serial
 149:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 861              		.loc 1 149 0 is_stmt 1
 862 0130 0F23     		mov	r3, #15
 863 0132 D621     		mov	r1, #214
 864 0134 4900     		lsl	r1, r1, #1
 865 0136 C919     		add	r1, r1, r7
 866 0138 0B60     		str	r3, [r1]
 867 013a 1AE0     		b	.L45
 868              	.L46:
 150:../Sources/Algorithms.c ****             printf( "%d", belowAvg[ i - START_PIXEL ] );
 869              		.loc 1 150 0
 870 013c D622     		mov	r2, #214
 871 013e 5200     		lsl	r2, r2, #1
 872 0140 D219     		add	r2, r2, r7
 873 0142 1368     		ldr	r3, [r2]
 874 0144 1A1C     		mov	r2, r3
 875 0146 0F3A     		sub	r2, r2, #15
 876 0148 534B     		ldr	r3, .L50+8
 877 014a D821     		mov	r1, #216
 878 014c 4900     		lsl	r1, r1, #1
 879 014e C919     		add	r1, r1, r7
 880 0150 CB18     		add	r3, r1, r3
 881 0152 9200     		lsl	r2, r2, #2
 882 0154 D358     		ldr	r3, [r2, r3]
 883 0156 514A     		ldr	r2, .L50+12
 884 0158 101C     		mov	r0, r2
 885 015a 191C     		mov	r1, r3
 886 015c FFF7FEFF 		bl	printf
 149:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 887              		.loc 1 149 0
 888 0160 D622     		mov	r2, #214
 889 0162 5200     		lsl	r2, r2, #1
 890 0164 D219     		add	r2, r2, r7
 891 0166 1368     		ldr	r3, [r2]
 892 0168 0133     		add	r3, r3, #1
 893 016a D621     		mov	r1, #214
 894 016c 4900     		lsl	r1, r1, #1
 895 016e C919     		add	r1, r1, r7
 896 0170 0B60     		str	r3, [r1]
 897              	.L45:
 149:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 898              		.loc 1 149 0 is_stmt 0
 899 0172 D622     		mov	r2, #214
 900 0174 5200     		lsl	r2, r2, #1
 901 0176 D219     		add	r2, r2, r7
 902 0178 1368     		ldr	r3, [r2]
 903 017a 702B     		cmp	r3, #112
 904 017c DEDD     		ble	.L46
 151:../Sources/Algorithms.c ****         }
 152:../Sources/Algorithms.c ****         printf( "\r\n" );
 905              		.loc 1 152 0 is_stmt 1
 906 017e 484B     		ldr	r3, .L50+16
 907 0180 181C     		mov	r0, r3
 908 0182 FFF7FEFF 		bl	puts
 909              	.L38:
 153:../Sources/Algorithms.c ****     }
 154:../Sources/Algorithms.c **** 
 155:../Sources/Algorithms.c ****     //Adds all the pixels below average
 156:../Sources/Algorithms.c ****     for( i = 0; i < STOP_PIXEL - START_PIXEL + 1; i++){
 910              		.loc 1 156 0
 911 0186 0023     		mov	r3, #0
 912 0188 D621     		mov	r1, #214
 913 018a 4900     		lsl	r1, r1, #1
 914 018c C919     		add	r1, r1, r7
 915 018e 0B60     		str	r3, [r1]
 916 0190 2BE0     		b	.L47
 917              	.L49:
 157:../Sources/Algorithms.c ****         if( belowAvg[i] ){
 918              		.loc 1 157 0
 919 0192 414B     		ldr	r3, .L50+8
 920 0194 D822     		mov	r2, #216
 921 0196 5200     		lsl	r2, r2, #1
 922 0198 D219     		add	r2, r2, r7
 923 019a D318     		add	r3, r2, r3
 924 019c D621     		mov	r1, #214
 925 019e 4900     		lsl	r1, r1, #1
 926 01a0 C919     		add	r1, r1, r7
 927 01a2 0A68     		ldr	r2, [r1]
 928 01a4 9200     		lsl	r2, r2, #2
 929 01a6 D358     		ldr	r3, [r2, r3]
 930 01a8 002B     		cmp	r3, #0
 931 01aa 15D0     		beq	.L48
 158:../Sources/Algorithms.c ****             totBelowAvg++;
 932              		.loc 1 158 0
 933 01ac D022     		mov	r2, #208
 934 01ae 5200     		lsl	r2, r2, #1
 935 01b0 D219     		add	r2, r2, r7
 936 01b2 1368     		ldr	r3, [r2]
 937 01b4 0133     		add	r3, r3, #1
 938 01b6 D021     		mov	r1, #208
 939 01b8 4900     		lsl	r1, r1, #1
 940 01ba C919     		add	r1, r1, r7
 941 01bc 0B60     		str	r3, [r1]
 159:../Sources/Algorithms.c ****             sumBelowAvg += i;
 942              		.loc 1 159 0
 943 01be D223     		mov	r3, #210
 944 01c0 5B00     		lsl	r3, r3, #1
 945 01c2 DB19     		add	r3, r3, r7
 946 01c4 1A68     		ldr	r2, [r3]
 947 01c6 D621     		mov	r1, #214
 948 01c8 4900     		lsl	r1, r1, #1
 949 01ca C919     		add	r1, r1, r7
 950 01cc 0B68     		ldr	r3, [r1]
 951 01ce D318     		add	r3, r2, r3
 952 01d0 D222     		mov	r2, #210
 953 01d2 5200     		lsl	r2, r2, #1
 954 01d4 D219     		add	r2, r2, r7
 955 01d6 1360     		str	r3, [r2]
 956              	.L48:
 156:../Sources/Algorithms.c ****     for( i = 0; i < STOP_PIXEL - START_PIXEL + 1; i++){
 957              		.loc 1 156 0
 958 01d8 D621     		mov	r1, #214
 959 01da 4900     		lsl	r1, r1, #1
 960 01dc C919     		add	r1, r1, r7
 961 01de 0B68     		ldr	r3, [r1]
 962 01e0 0133     		add	r3, r3, #1
 963 01e2 D622     		mov	r2, #214
 964 01e4 5200     		lsl	r2, r2, #1
 965 01e6 D219     		add	r2, r2, r7
 966 01e8 1360     		str	r3, [r2]
 967              	.L47:
 156:../Sources/Algorithms.c ****     for( i = 0; i < STOP_PIXEL - START_PIXEL + 1; i++){
 968              		.loc 1 156 0 is_stmt 0
 969 01ea D621     		mov	r1, #214
 970 01ec 4900     		lsl	r1, r1, #1
 971 01ee C919     		add	r1, r1, r7
 972 01f0 0B68     		ldr	r3, [r1]
 973 01f2 622B     		cmp	r3, #98
 974 01f4 CDDD     		ble	.L49
 160:../Sources/Algorithms.c ****         }
 161:../Sources/Algorithms.c ****     }
 162:../Sources/Algorithms.c **** 
 163:../Sources/Algorithms.c ****     centerBelowAvg = sumBelowAvg / totBelowAvg; //calculates the center of the below average pixels
 975              		.loc 1 163 0 is_stmt 1
 976 01f6 D222     		mov	r2, #210
 977 01f8 5200     		lsl	r2, r2, #1
 978 01fa D219     		add	r2, r2, r7
 979 01fc 1068     		ldr	r0, [r2]
 980 01fe D023     		mov	r3, #208
 981 0200 5B00     		lsl	r3, r3, #1
 982 0202 DB19     		add	r3, r3, r7
 983 0204 1968     		ldr	r1, [r3]
 984 0206 FFF7FEFF 		bl	__aeabi_idiv
 985 020a 031C     		mov	r3, r0
 986 020c CA21     		mov	r1, #202
 987 020e 4900     		lsl	r1, r1, #1
 988 0210 C919     		add	r1, r1, r7
 989 0212 0B60     		str	r3, [r1]
 164:../Sources/Algorithms.c ****     diffCenter = center - centerBelowAvg;  //Clalculates the difference of the center of the below 
 990              		.loc 1 164 0
 991 0214 CE23     		mov	r3, #206
 992 0216 5B00     		lsl	r3, r3, #1
 993 0218 DB19     		add	r3, r3, r7
 994 021a 1A68     		ldr	r2, [r3]
 995 021c CA21     		mov	r1, #202
 996 021e 4900     		lsl	r1, r1, #1
 997 0220 C919     		add	r1, r1, r7
 998 0222 0B68     		ldr	r3, [r1]
 999 0224 D31A     		sub	r3, r2, r3
 1000 0226 C822     		mov	r2, #200
 1001 0228 5200     		lsl	r2, r2, #1
 1002 022a D219     		add	r2, r2, r7
 1003 022c 1360     		str	r3, [r2]
 165:../Sources/Algorithms.c ****     diff = (float)( center - diffCenter ) / (float)center; //Calculates "percent" difference. Range
 1004              		.loc 1 165 0
 1005 022e CE23     		mov	r3, #206
 1006 0230 5B00     		lsl	r3, r3, #1
 1007 0232 DB19     		add	r3, r3, r7
 1008 0234 1A68     		ldr	r2, [r3]
 1009 0236 C821     		mov	r1, #200
 1010 0238 4900     		lsl	r1, r1, #1
 1011 023a C919     		add	r1, r1, r7
 1012 023c 0B68     		ldr	r3, [r1]
 1013 023e D31A     		sub	r3, r2, r3
 1014 0240 181C     		mov	r0, r3
 1015 0242 FFF7FEFF 		bl	__aeabi_i2f
 1016 0246 041C     		add	r4, r0, #0
 1017 0248 CE22     		mov	r2, #206
 1018 024a 5200     		lsl	r2, r2, #1
 1019 024c D219     		add	r2, r2, r7
 1020 024e 1068     		ldr	r0, [r2]
 1021 0250 FFF7FEFF 		bl	__aeabi_i2f
 1022 0254 031C     		add	r3, r0, #0
 1023 0256 201C     		add	r0, r4, #0
 1024 0258 191C     		add	r1, r3, #0
 1025 025a FFF7FEFF 		bl	__aeabi_fdiv
 1026 025e 031C     		add	r3, r0, #0
 1027 0260 C621     		mov	r1, #198
 1028 0262 4900     		lsl	r1, r1, #1
 1029 0264 C919     		add	r1, r1, r7
 1030 0266 0B60     		str	r3, [r1]
 166:../Sources/Algorithms.c ****     TFC_SetServo(0,diff - 1); //Adjusts servo accordingly
 1031              		.loc 1 166 0
 1032 0268 C622     		mov	r2, #198
 1033 026a 5200     		lsl	r2, r2, #1
 1034 026c D219     		add	r2, r2, r7
 1035 026e 1068     		ldr	r0, [r2]
 1036 0270 FE21     		mov	r1, #254
 1037 0272 8905     		lsl	r1, r1, #22
 1038 0274 FFF7FEFF 		bl	__aeabi_fsub
 1039 0278 031C     		add	r3, r0, #0
 1040 027a 0020     		mov	r0, #0
 1041 027c 191C     		add	r1, r3, #0
 1042 027e FFF7FEFF 		bl	TFC_SetServo
 167:../Sources/Algorithms.c ****     delay(2); //Allows servo time to move
 1043              		.loc 1 167 0
 1044 0282 0220     		mov	r0, #2
 1045 0284 FFF7FEFF 		bl	delay
 168:../Sources/Algorithms.c **** }
 1046              		.loc 1 168 0
 1047 0288 BD46     		mov	sp, r7
 1048 028a 6DB0     		add	sp, sp, #436
 1049              		@ sp needed for prologue
 1050 028c 90BD     		pop	{r4, r7, pc}
 1051              	.L51:
 1052 028e C046     		.align	2
 1053              	.L50:
 1054 0290 00000000 		.word	LineScanImageReady
 1055 0294 00000000 		.word	LineScanImage0
 1056 0298 50FEFFFF 		.word	-432
 1057 029c 00000000 		.word	.LC5
 1058 02a0 04000000 		.word	.LC7
 1059              		.cfi_endproc
 1060              	.LFE5:
 1062              		.global	__aeabi_f2d
 1063              		.global	__aeabi_ui2f
 1064              		.section	.text.algo_two,"ax",%progbits
 1065              		.align	2
 1066              		.global	algo_two
 1067              		.code	16
 1068              		.thumb_func
 1070              	algo_two:
 1071              	.LFB6:
 169:../Sources/Algorithms.c **** 
 170:../Sources/Algorithms.c **** void algo_two(){
 1072              		.loc 1 170 0
 1073              		.cfi_startproc
 1074 0000 90B5     		push	{r4, r7, lr}
 1075              	.LCFI16:
 1076              		.cfi_def_cfa_offset 12
 1077              		.cfi_offset 4, -12
 1078              		.cfi_offset 7, -8
 1079              		.cfi_offset 14, -4
 1080 0002 89B0     		sub	sp, sp, #36
 1081              	.LCFI17:
 1082              		.cfi_def_cfa_offset 48
 1083 0004 00AF     		add	r7, sp, #0
 1084              	.LCFI18:
 1085              		.cfi_def_cfa_register 7
 171:../Sources/Algorithms.c ****     float mid_point = ( STOP_PIXEL - START_PIXEL ) / 2 + START_PIXEL;
 1086              		.loc 1 171 0
 1087 0006 8523     		mov	r3, #133
 1088 0008 DB05     		lsl	r3, r3, #23
 1089 000a BB60     		str	r3, [r7, #8]
 172:../Sources/Algorithms.c **** 
 173:../Sources/Algorithms.c ****     if( LineScanImageReady == 1 ){
 1090              		.loc 1 173 0
 1091 000c 424B     		ldr	r3, .L59+8
 1092 000e 1B78     		ldrb	r3, [r3]
 1093 0010 DBB2     		uxtb	r3, r3
 1094 0012 012B     		cmp	r3, #1
 1095 0014 00D0     		beq	.LCB946
 1096 0016 77E0     		b	.L52	@long jump
 1097              	.LCB946:
 1098              	.LBB2:
 174:../Sources/Algorithms.c ****         LineScanImageReady = 0;
 1099              		.loc 1 174 0
 1100 0018 3F4B     		ldr	r3, .L59+8
 1101 001a 0022     		mov	r2, #0
 1102 001c 1A70     		strb	r2, [r3]
 175:../Sources/Algorithms.c ****         
 176:../Sources/Algorithms.c ****         int i;
 177:../Sources/Algorithms.c ****         double sum = 0.0f;
 1103              		.loc 1 177 0
 1104 001e 3D4C     		ldr	r4, .L59+4
 1105 0020 3B4B     		ldr	r3, .L59
 1106 0022 3B61     		str	r3, [r7, #16]
 1107 0024 7C61     		str	r4, [r7, #20]
 178:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 1108              		.loc 1 178 0
 1109 0026 0F23     		mov	r3, #15
 1110 0028 FB61     		str	r3, [r7, #28]
 1111 002a 61E0     		b	.L54
 1112              	.L58:
 1113              	.LBB3:
 179:../Sources/Algorithms.c ****             int offset = mid_point - i;
 1114              		.loc 1 179 0
 1115 002c F869     		ldr	r0, [r7, #28]
 1116 002e FFF7FEFF 		bl	__aeabi_i2f
 1117 0032 031C     		add	r3, r0, #0
 1118 0034 B868     		ldr	r0, [r7, #8]
 1119 0036 191C     		add	r1, r3, #0
 1120 0038 FFF7FEFF 		bl	__aeabi_fsub
 1121 003c 031C     		add	r3, r0, #0
 1122 003e 181C     		add	r0, r3, #0
 1123 0040 FFF7FEFF 		bl	__aeabi_f2iz
 1124 0044 031C     		mov	r3, r0
 1125 0046 FB60     		str	r3, [r7, #12]
 180:../Sources/Algorithms.c **** 
 181:../Sources/Algorithms.c ****             if(offset == 0) offset = 1;
 1126              		.loc 1 181 0
 1127 0048 FB68     		ldr	r3, [r7, #12]
 1128 004a 002B     		cmp	r3, #0
 1129 004c 01D1     		bne	.L55
 1130              		.loc 1 181 0 is_stmt 0
 1131 004e 0123     		mov	r3, #1
 1132 0050 FB60     		str	r3, [r7, #12]
 1133              	.L55:
 182:../Sources/Algorithms.c ****             double scale = mid_point / offset;
 1134              		.loc 1 182 0 is_stmt 1
 1135 0052 F868     		ldr	r0, [r7, #12]
 1136 0054 FFF7FEFF 		bl	__aeabi_i2f
 1137 0058 031C     		add	r3, r0, #0
 1138 005a B868     		ldr	r0, [r7, #8]
 1139 005c 191C     		add	r1, r3, #0
 1140 005e FFF7FEFF 		bl	__aeabi_fdiv
 1141 0062 031C     		add	r3, r0, #0
 1142 0064 181C     		add	r0, r3, #0
 1143 0066 FFF7FEFF 		bl	__aeabi_f2d
 1144 006a 031C     		mov	r3, r0
 1145 006c 0C1C     		mov	r4, r1
 1146 006e 3B60     		str	r3, [r7]
 1147 0070 7C60     		str	r4, [r7, #4]
 183:../Sources/Algorithms.c **** 
 184:../Sources/Algorithms.c ****             if(LineScanImage0[i] == 0) {
 1148              		.loc 1 184 0
 1149 0072 2A4B     		ldr	r3, .L59+12
 1150 0074 1A68     		ldr	r2, [r3]
 1151 0076 FB69     		ldr	r3, [r7, #28]
 1152 0078 5B00     		lsl	r3, r3, #1
 1153 007a D318     		add	r3, r2, r3
 1154 007c 1B88     		ldrh	r3, [r3]
 1155 007e 9BB2     		uxth	r3, r3
 1156 0080 002B     		cmp	r3, #0
 1157 0082 0AD1     		bne	.L56
 185:../Sources/Algorithms.c ****                 sum += scale * 1;
 1158              		.loc 1 185 0
 1159 0084 3869     		ldr	r0, [r7, #16]
 1160 0086 7969     		ldr	r1, [r7, #20]
 1161 0088 3A68     		ldr	r2, [r7]
 1162 008a 7B68     		ldr	r3, [r7, #4]
 1163 008c FFF7FEFF 		bl	__aeabi_dadd
 1164 0090 031C     		mov	r3, r0
 1165 0092 0C1C     		mov	r4, r1
 1166 0094 3B61     		str	r3, [r7, #16]
 1167 0096 7C61     		str	r4, [r7, #20]
 1168 0098 27E0     		b	.L57
 1169              	.L56:
 186:../Sources/Algorithms.c ****             } else {
 187:../Sources/Algorithms.c ****                 sum += scale * ((1.0f / (float)LineScanImage0[i]));
 1170              		.loc 1 187 0
 1171 009a 204B     		ldr	r3, .L59+12
 1172 009c 1A68     		ldr	r2, [r3]
 1173 009e FB69     		ldr	r3, [r7, #28]
 1174 00a0 5B00     		lsl	r3, r3, #1
 1175 00a2 D318     		add	r3, r2, r3
 1176 00a4 1B88     		ldrh	r3, [r3]
 1177 00a6 9BB2     		uxth	r3, r3
 1178 00a8 181C     		mov	r0, r3
 1179 00aa FFF7FEFF 		bl	__aeabi_ui2f
 1180 00ae 031C     		add	r3, r0, #0
 1181 00b0 FE20     		mov	r0, #254
 1182 00b2 8005     		lsl	r0, r0, #22
 1183 00b4 191C     		add	r1, r3, #0
 1184 00b6 FFF7FEFF 		bl	__aeabi_fdiv
 1185 00ba 031C     		add	r3, r0, #0
 1186 00bc 181C     		add	r0, r3, #0
 1187 00be FFF7FEFF 		bl	__aeabi_f2d
 1188 00c2 031C     		mov	r3, r0
 1189 00c4 0C1C     		mov	r4, r1
 1190 00c6 181C     		mov	r0, r3
 1191 00c8 211C     		mov	r1, r4
 1192 00ca 3A68     		ldr	r2, [r7]
 1193 00cc 7B68     		ldr	r3, [r7, #4]
 1194 00ce FFF7FEFF 		bl	__aeabi_dmul
 1195 00d2 031C     		mov	r3, r0
 1196 00d4 0C1C     		mov	r4, r1
 1197 00d6 3869     		ldr	r0, [r7, #16]
 1198 00d8 7969     		ldr	r1, [r7, #20]
 1199 00da 1A1C     		mov	r2, r3
 1200 00dc 231C     		mov	r3, r4
 1201 00de FFF7FEFF 		bl	__aeabi_dadd
 1202 00e2 031C     		mov	r3, r0
 1203 00e4 0C1C     		mov	r4, r1
 1204 00e6 3B61     		str	r3, [r7, #16]
 1205 00e8 7C61     		str	r4, [r7, #20]
 1206              	.L57:
 1207              	.LBE3:
 178:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 1208              		.loc 1 178 0
 1209 00ea FB69     		ldr	r3, [r7, #28]
 1210 00ec 0133     		add	r3, r3, #1
 1211 00ee FB61     		str	r3, [r7, #28]
 1212              	.L54:
 178:../Sources/Algorithms.c ****         for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 1213              		.loc 1 178 0 is_stmt 0
 1214 00f0 FB69     		ldr	r3, [r7, #28]
 1215 00f2 702B     		cmp	r3, #112
 1216 00f4 9ADD     		ble	.L58
 188:../Sources/Algorithms.c ****             }
 189:../Sources/Algorithms.c ****         }
 190:../Sources/Algorithms.c ****     
 191:../Sources/Algorithms.c ****         sum = (double)sum;
 192:../Sources/Algorithms.c ****         TFC_SetServo( 0, sum);
 1217              		.loc 1 192 0 is_stmt 1
 1218 00f6 3869     		ldr	r0, [r7, #16]
 1219 00f8 7969     		ldr	r1, [r7, #20]
 1220 00fa FFF7FEFF 		bl	__aeabi_d2f
 1221 00fe 031C     		add	r3, r0, #0
 1222 0100 0020     		mov	r0, #0
 1223 0102 191C     		add	r1, r3, #0
 1224 0104 FFF7FEFF 		bl	TFC_SetServo
 1225              	.L52:
 1226              	.LBE2:
 193:../Sources/Algorithms.c ****     }
 194:../Sources/Algorithms.c **** }
 1227              		.loc 1 194 0
 1228 0108 BD46     		mov	sp, r7
 1229 010a 09B0     		add	sp, sp, #36
 1230              		@ sp needed for prologue
 1231 010c 90BD     		pop	{r4, r7, pc}
 1232              	.L60:
 1233 010e C046     		.align	3
 1234              	.L59:
 1235 0110 00000000 		.word	0
 1236 0114 00000000 		.word	0
 1237 0118 00000000 		.word	LineScanImageReady
 1238 011c 00000000 		.word	LineScanImage0
 1239              		.cfi_endproc
 1240              	.LFE6:
 1242              		.section	.text.algo_three,"ax",%progbits
 1243              		.align	2
 1244              		.global	algo_three
 1245              		.code	16
 1246              		.thumb_func
 1248              	algo_three:
 1249              	.LFB7:
 195:../Sources/Algorithms.c **** 
 196:../Sources/Algorithms.c **** void algo_three() {
 1250              		.loc 1 196 0
 1251              		.cfi_startproc
 1252 0000 90B5     		push	{r4, r7, lr}
 1253              	.LCFI19:
 1254              		.cfi_def_cfa_offset 12
 1255              		.cfi_offset 4, -12
 1256              		.cfi_offset 7, -8
 1257              		.cfi_offset 14, -4
 1258 0002 93B0     		sub	sp, sp, #76
 1259              	.LCFI20:
 1260              		.cfi_def_cfa_offset 88
 1261 0004 04AF     		add	r7, sp, #16
 1262              	.LCFI21:
 1263              		.cfi_def_cfa 7, 72
 197:../Sources/Algorithms.c **** 	int stop_algo = 0;
 1264              		.loc 1 197 0
 1265 0006 0023     		mov	r3, #0
 1266 0008 7B63     		str	r3, [r7, #52]
 198:../Sources/Algorithms.c **** 	int threshold = 0;
 1267              		.loc 1 198 0
 1268 000a 0023     		mov	r3, #0
 1269 000c 3B63     		str	r3, [r7, #48]
 199:../Sources/Algorithms.c **** 	float speed = 0;
 1270              		.loc 1 199 0
 1271 000e 0023     		mov	r3, #0
 1272 0010 FB62     		str	r3, [r7, #44]
 1273 0012 00E0     		b	.L69
 1274              	.L70:
 200:../Sources/Algorithms.c **** 	
 201:../Sources/Algorithms.c ****     while(1) {
 202:../Sources/Algorithms.c ****     	struct sideInfo right;
 203:../Sources/Algorithms.c ****     	struct sideInfo left;
 204:../Sources/Algorithms.c ****         TFC_Task();
 205:../Sources/Algorithms.c **** 
 206:../Sources/Algorithms.c ****         threshold = determineSensitivity();
 207:../Sources/Algorithms.c ****         speed = determineSpeed();
 208:../Sources/Algorithms.c ****         
 209:../Sources/Algorithms.c ****         if(LineScanImageReady){
 210:../Sources/Algorithms.c ****             LineScanImageReady = 0;
 211:../Sources/Algorithms.c ****             left = findSideInfo( START_PIXEL, MID_POINT, threshold );
 212:../Sources/Algorithms.c ****             right = findSideInfo( (int)MID_POINT, STOP_PIXEL, threshold ); 
 213:../Sources/Algorithms.c ****             
 214:../Sources/Algorithms.c ****             if(!stop_algo)stop_algo = ( right.Changes >= 1 && left.Changes >= 1 );
 215:../Sources/Algorithms.c ****             setTurn(left, right);
 216:../Sources/Algorithms.c ****         }
 217:../Sources/Algorithms.c ****         
 218:../Sources/Algorithms.c ****         if(stop_algo == 0) {
 219:../Sources/Algorithms.c ****         	TFC_SetMotorPWM(speed, speed);
 220:../Sources/Algorithms.c ****         } else {
 221:../Sources/Algorithms.c ****         	double motor = (STOP_CYCLES * speed - stop_algo * speed) / STOP_CYCLES;
 222:../Sources/Algorithms.c ****         	TFC_SetMotorPWM(motor, motor);
 223:../Sources/Algorithms.c ****         	stop_algo++;
 224:../Sources/Algorithms.c ****         }     
 225:../Sources/Algorithms.c ****         
 226:../Sources/Algorithms.c ****         if(TFC_PUSH_BUTTON_1_PRESSED) break;
 227:../Sources/Algorithms.c ****         
 228:../Sources/Algorithms.c ****         if(stop_algo > STOP_CYCLES) break;
 229:../Sources/Algorithms.c ****     }
 1275              		.loc 1 229 0
 1276 0014 C046     		mov	r8, r8
 1277              	.L69:
 1278              	.LBB4:
 204:../Sources/Algorithms.c ****         TFC_Task();
 1279              		.loc 1 204 0
 1280 0016 FFF7FEFF 		bl	TFC_Task
 206:../Sources/Algorithms.c ****         threshold = determineSensitivity();
 1281              		.loc 1 206 0
 1282 001a FFF7FEFF 		bl	determineSensitivity
 1283 001e 031C     		mov	r3, r0
 1284 0020 3B63     		str	r3, [r7, #48]
 207:../Sources/Algorithms.c ****         speed = determineSpeed();
 1285              		.loc 1 207 0
 1286 0022 FFF7FEFF 		bl	determineSpeed
 1287 0026 031C     		add	r3, r0, #0
 1288 0028 FB62     		str	r3, [r7, #44]
 209:../Sources/Algorithms.c ****         if(LineScanImageReady){
 1289              		.loc 1 209 0
 1290 002a 414B     		ldr	r3, .L71
 1291 002c 1B78     		ldrb	r3, [r3]
 1292 002e DBB2     		uxtb	r3, r3
 1293 0030 002B     		cmp	r3, #0
 1294 0032 33D0     		beq	.L62
 210:../Sources/Algorithms.c ****             LineScanImageReady = 0;
 1295              		.loc 1 210 0
 1296 0034 3E4B     		ldr	r3, .L71
 1297 0036 0022     		mov	r2, #0
 1298 0038 1A70     		strb	r2, [r3]
 211:../Sources/Algorithms.c ****             left = findSideInfo( START_PIXEL, MID_POINT, threshold );
 1299              		.loc 1 211 0
 1300 003a 3A1C     		mov	r2, r7
 1301 003c 3B6B     		ldr	r3, [r7, #48]
 1302 003e 101C     		mov	r0, r2
 1303 0040 0F21     		mov	r1, #15
 1304 0042 4022     		mov	r2, #64
 1305 0044 FFF7FEFF 		bl	findSideInfo
 212:../Sources/Algorithms.c ****             right = findSideInfo( (int)MID_POINT, STOP_PIXEL, threshold ); 
 1306              		.loc 1 212 0
 1307 0048 3A1C     		mov	r2, r7
 1308 004a 1032     		add	r2, r2, #16
 1309 004c 3B6B     		ldr	r3, [r7, #48]
 1310 004e 101C     		mov	r0, r2
 1311 0050 4021     		mov	r1, #64
 1312 0052 7122     		mov	r2, #113
 1313 0054 FFF7FEFF 		bl	findSideInfo
 214:../Sources/Algorithms.c ****             if(!stop_algo)stop_algo = ( right.Changes >= 1 && left.Changes >= 1 );
 1314              		.loc 1 214 0
 1315 0058 7B6B     		ldr	r3, [r7, #52]
 1316 005a 002B     		cmp	r3, #0
 1317 005c 0CD1     		bne	.L63
 214:../Sources/Algorithms.c ****             if(!stop_algo)stop_algo = ( right.Changes >= 1 && left.Changes >= 1 );
 1318              		.loc 1 214 0 is_stmt 0
 1319 005e 3B1C     		mov	r3, r7
 1320 0060 1033     		add	r3, r3, #16
 1321 0062 9B68     		ldr	r3, [r3, #8]
 1322 0064 002B     		cmp	r3, #0
 1323 0066 05DD     		ble	.L64
 1324 0068 3B1C     		mov	r3, r7
 1325 006a 9B68     		ldr	r3, [r3, #8]
 1326 006c 002B     		cmp	r3, #0
 1327 006e 01DD     		ble	.L64
 214:../Sources/Algorithms.c ****             if(!stop_algo)stop_algo = ( right.Changes >= 1 && left.Changes >= 1 );
 1328              		.loc 1 214 0
 1329 0070 0123     		mov	r3, #1
 1330 0072 00E0     		b	.L65
 1331              	.L64:
 214:../Sources/Algorithms.c ****             if(!stop_algo)stop_algo = ( right.Changes >= 1 && left.Changes >= 1 );
 1332              		.loc 1 214 0
 1333 0074 0023     		mov	r3, #0
 1334              	.L65:
 214:../Sources/Algorithms.c ****             if(!stop_algo)stop_algo = ( right.Changes >= 1 && left.Changes >= 1 );
 1335              		.loc 1 214 0
 1336 0076 7B63     		str	r3, [r7, #52]
 1337              	.L63:
 215:../Sources/Algorithms.c ****             setTurn(left, right);
 1338              		.loc 1 215 0 is_stmt 1
 1339 0078 3C1C     		mov	r4, r7
 1340 007a 3B1C     		mov	r3, r7
 1341 007c 1033     		add	r3, r3, #16
 1342 007e 6A46     		mov	r2, sp
 1343 0080 111C     		mov	r1, r2
 1344 0082 1A1C     		mov	r2, r3
 1345 0084 1023     		mov	r3, #16
 1346 0086 081C     		mov	r0, r1
 1347 0088 111C     		mov	r1, r2
 1348 008a 1A1C     		mov	r2, r3
 1349 008c FFF7FEFF 		bl	memcpy
 1350 0090 2068     		ldr	r0, [r4]
 1351 0092 6168     		ldr	r1, [r4, #4]
 1352 0094 A268     		ldr	r2, [r4, #8]
 1353 0096 E368     		ldr	r3, [r4, #12]
 1354 0098 FFF7FEFF 		bl	setTurn
 1355              	.L62:
 218:../Sources/Algorithms.c ****         if(stop_algo == 0) {
 1356              		.loc 1 218 0
 1357 009c 7B6B     		ldr	r3, [r7, #52]
 1358 009e 002B     		cmp	r3, #0
 1359 00a0 06D1     		bne	.L66
 219:../Sources/Algorithms.c ****         	TFC_SetMotorPWM(speed, speed);
 1360              		.loc 1 219 0
 1361 00a2 FA6A     		ldr	r2, [r7, #44]
 1362 00a4 FB6A     		ldr	r3, [r7, #44]
 1363 00a6 101C     		add	r0, r2, #0
 1364 00a8 191C     		add	r1, r3, #0
 1365 00aa FFF7FEFF 		bl	TFC_SetMotorPWM
 1366 00ae 30E0     		b	.L67
 1367              	.L66:
 1368              	.LBB5:
 221:../Sources/Algorithms.c ****         	double motor = (STOP_CYCLES * speed - stop_algo * speed) / STOP_CYCLES;
 1369              		.loc 1 221 0
 1370 00b0 F86A     		ldr	r0, [r7, #44]
 1371 00b2 2049     		ldr	r1, .L71+4
 1372 00b4 FFF7FEFF 		bl	__aeabi_fmul
 1373 00b8 031C     		add	r3, r0, #0
 1374 00ba 1C1C     		add	r4, r3, #0
 1375 00bc 786B     		ldr	r0, [r7, #52]
 1376 00be FFF7FEFF 		bl	__aeabi_i2f
 1377 00c2 031C     		add	r3, r0, #0
 1378 00c4 181C     		add	r0, r3, #0
 1379 00c6 F96A     		ldr	r1, [r7, #44]
 1380 00c8 FFF7FEFF 		bl	__aeabi_fmul
 1381 00cc 031C     		add	r3, r0, #0
 1382 00ce 201C     		add	r0, r4, #0
 1383 00d0 191C     		add	r1, r3, #0
 1384 00d2 FFF7FEFF 		bl	__aeabi_fsub
 1385 00d6 031C     		add	r3, r0, #0
 1386 00d8 181C     		add	r0, r3, #0
 1387 00da 1649     		ldr	r1, .L71+4
 1388 00dc FFF7FEFF 		bl	__aeabi_fdiv
 1389 00e0 031C     		add	r3, r0, #0
 1390 00e2 181C     		add	r0, r3, #0
 1391 00e4 FFF7FEFF 		bl	__aeabi_f2d
 1392 00e8 031C     		mov	r3, r0
 1393 00ea 0C1C     		mov	r4, r1
 1394 00ec 3B62     		str	r3, [r7, #32]
 1395 00ee 7C62     		str	r4, [r7, #36]
 222:../Sources/Algorithms.c ****         	TFC_SetMotorPWM(motor, motor);
 1396              		.loc 1 222 0
 1397 00f0 386A     		ldr	r0, [r7, #32]
 1398 00f2 796A     		ldr	r1, [r7, #36]
 1399 00f4 FFF7FEFF 		bl	__aeabi_d2f
 1400 00f8 041C     		add	r4, r0, #0
 1401 00fa 386A     		ldr	r0, [r7, #32]
 1402 00fc 796A     		ldr	r1, [r7, #36]
 1403 00fe FFF7FEFF 		bl	__aeabi_d2f
 1404 0102 031C     		add	r3, r0, #0
 1405 0104 201C     		add	r0, r4, #0
 1406 0106 191C     		add	r1, r3, #0
 1407 0108 FFF7FEFF 		bl	TFC_SetMotorPWM
 223:../Sources/Algorithms.c ****         	stop_algo++;
 1408              		.loc 1 223 0
 1409 010c 7B6B     		ldr	r3, [r7, #52]
 1410 010e 0133     		add	r3, r3, #1
 1411 0110 7B63     		str	r3, [r7, #52]
 1412              	.L67:
 1413              	.LBE5:
 226:../Sources/Algorithms.c ****         if(TFC_PUSH_BUTTON_1_PRESSED) break;
 1414              		.loc 1 226 0
 1415 0112 094B     		ldr	r3, .L71+8
 1416 0114 1A69     		ldr	r2, [r3, #16]
 1417 0116 8023     		mov	r3, #128
 1418 0118 9B02     		lsl	r3, r3, #10
 1419 011a 1340     		and	r3, r2
 1420 011c 04D1     		bne	.L61
 228:../Sources/Algorithms.c ****         if(stop_algo > STOP_CYCLES) break;
 1421              		.loc 1 228 0
 1422 011e 7A6B     		ldr	r2, [r7, #52]
 1423 0120 064B     		ldr	r3, .L71+12
 1424 0122 9A42     		cmp	r2, r3
 1425 0124 00DC     		bgt	.LCB1241
 1426 0126 75E7     		b	.L70	@long jump
 1427              	.LCB1241:
 1428              	.L61:
 1429              	.LBE4:
 230:../Sources/Algorithms.c **** }
 1430              		.loc 1 230 0
 1431 0128 BD46     		mov	sp, r7
 1432 012a 0FB0     		add	sp, sp, #60
 1433              		@ sp needed for prologue
 1434 012c 90BD     		pop	{r4, r7, pc}
 1435              	.L72:
 1436 012e C046     		.align	2
 1437              	.L71:
 1438 0130 00000000 		.word	LineScanImageReady
 1439 0134 00409C45 		.word	1167867904
 1440 0138 80F00F40 		.word	1074786432
 1441 013c 88130000 		.word	5000
 1442              		.cfi_endproc
 1443              	.LFE7:
 1445              		.text
 1446              	.Letext0:
 1447              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 1448              		.file 3 "C:/Users/Jared/Desktop/freescalecup/FRDM-TFC/Project_Headers/MKL25Z4.h"
 1449              		.file 4 "C:/Users/Jared/Desktop/freescalecup/FRDM-TFC/Project_Headers/TFC\\TFC_LineScanCamera.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Algorithms.c
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:21     .text.determineSensitivity:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:26     .text.determineSensitivity:00000000 determineSensitivity
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:63     .text.determineSensitivity:00000030 $d
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:68     .text.determineSpeed:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:73     .text.determineSpeed:00000000 determineSpeed
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:112    .text.findSideInfo:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:117    .text.findSideInfo:00000000 findSideInfo
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:337    .text.findSideInfo:00000178 $d
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:350    .text.setTurn:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:355    .text.setTurn:00000000 setTurn
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:505    .text.setTurn:00000100 $d
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:521    .text.stop_car:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:526    .text.stop_car:00000000 stop_car
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:652    .text.stop_car:000000ac $d
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:658    .rodata:00000000 $d
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:668    .text.algo_one:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:673    .text.algo_one:00000000 algo_one
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:1054   .text.algo_one:00000290 $d
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:1065   .text.algo_two:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:1070   .text.algo_two:00000000 algo_two
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:1235   .text.algo_two:00000110 $d
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:1243   .text.algo_three:00000000 $t
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:1248   .text.algo_three:00000000 algo_three
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:1438   .text.algo_three:00000130 $d
                     .debug_frame:00000010 $d
C:\Users\Jared\AppData\Local\Temp\ccQA1gkN.s:349    .text.findSideInfo:00000184 $t

UNDEFINED SYMBOLS
__aeabi_fadd
__aeabi_fmul
__aeabi_f2iz
TFC_ReadPot
__aeabi_i2d
__aeabi_dadd
__aeabi_idiv
__aeabi_ddiv
memcpy
LineScanImage0
__aeabi_dsub
__aeabi_d2iz
__aeabi_dcmplt
__aeabi_dmul
__aeabi_dcmpgt
__aeabi_d2f
TFC_SetServo
LineScanImageReady
__aeabi_i2f
__aeabi_fdiv
__aeabi_fsub
printf
puts
delay
__aeabi_f2d
__aeabi_ui2f
TFC_Task
TFC_SetMotorPWM
