   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.forwardFull,"ax",%progbits
  18              		.align	2
  19              		.global	forwardFull
  20              		.code	16
  21              		.thumb_func
  23              	forwardFull:
  24              	.LFB0:
  25              		.file 1 "../Sources/main.c"
   1:../Sources/main.c **** #include "derivative.h" /* include peripheral declarations */
   2:../Sources/main.c **** #include "TFC\TFC.h"
   3:../Sources/main.c **** #include "Algorithms.h"
   4:../Sources/main.c **** #include "Common.h"
   5:../Sources/main.c **** 
   6:../Sources/main.c **** #define DEL 50
   7:../Sources/main.c **** #define START_PIXEL 10
   8:../Sources/main.c **** #define STOP_PIXEL 118
   9:../Sources/main.c **** 
  10:../Sources/main.c **** 
  11:../Sources/main.c **** void forwardFull(){
  26              		.loc 1 11 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 00AF     		add	r7, sp, #0
  34              	.LCFI1:
  35              		.cfi_def_cfa_register 7
  12:../Sources/main.c ****    TFC_HBRIDGE_ENABLE;
  36              		.loc 1 12 0
  37 0004 0F4B     		ldr	r3, .L2
  38 0006 8022     		mov	r2, #128
  39 0008 9203     		lsl	r2, r2, #14
  40 000a 5A60     		str	r2, [r3, #4]
  13:../Sources/main.c ****    TFC_SetServo(0,-.15);
  41              		.loc 1 13 0
  42 000c 0E4B     		ldr	r3, .L2+4
  43 000e 0020     		mov	r0, #0
  44 0010 191C     		add	r1, r3, #0
  45 0012 FFF7FEFF 		bl	TFC_SetServo
  14:../Sources/main.c ****    TFC_SetMotorPWM(1,1);
  46              		.loc 1 14 0
  47 0016 FE22     		mov	r2, #254
  48 0018 9205     		lsl	r2, r2, #22
  49 001a FE23     		mov	r3, #254
  50 001c 9B05     		lsl	r3, r3, #22
  51 001e 101C     		add	r0, r2, #0
  52 0020 191C     		add	r1, r3, #0
  53 0022 FFF7FEFF 		bl	TFC_SetMotorPWM
  15:../Sources/main.c ****    delay(30);
  54              		.loc 1 15 0
  55 0026 1E20     		mov	r0, #30
  56 0028 FFF7FEFF 		bl	delay
  16:../Sources/main.c ****    TFC_SetMotorPWM(0,0);
  57              		.loc 1 16 0
  58 002c 0022     		mov	r2, #0
  59 002e 0023     		mov	r3, #0
  60 0030 101C     		add	r0, r2, #0
  61 0032 191C     		add	r1, r3, #0
  62 0034 FFF7FEFF 		bl	TFC_SetMotorPWM
  17:../Sources/main.c ****    TFC_HBRIDGE_DISABLE;
  63              		.loc 1 17 0
  64 0038 024B     		ldr	r3, .L2
  65 003a 8022     		mov	r2, #128
  66 003c 9203     		lsl	r2, r2, #14
  67 003e 9A60     		str	r2, [r3, #8]
  18:../Sources/main.c **** }
  68              		.loc 1 18 0
  69 0040 BD46     		mov	sp, r7
  70              		@ sp needed for prologue
  71 0042 80BD     		pop	{r7, pc}
  72              	.L3:
  73              		.align	2
  74              	.L2:
  75 0044 00F10F40 		.word	1074786560
  76 0048 9A9919BE 		.word	-1105618534
  77              		.cfi_endproc
  78              	.LFE0:
  80              		.section	.rodata
  81              		.align	2
  82              	.LC1:
  83 0000 0D00     		.ascii	"\015\000"
  84 0002 0000     		.align	2
  85              	.LC3:
  86 0004 4C3A00   		.ascii	"L:\000"
  87 0007 00       		.align	2
  88              	.LC6:
  89 0008 255800   		.ascii	"%X\000"
  90              		.section	.text.printCamera,"ax",%progbits
  91              		.align	2
  92              		.global	printCamera
  93              		.code	16
  94              		.thumb_func
  96              	printCamera:
  97              	.LFB1:
  19:../Sources/main.c **** 
  20:../Sources/main.c **** void printCamera() {
  98              		.loc 1 20 0
  99              		.cfi_startproc
 100 0000 80B5     		push	{r7, lr}
 101              	.LCFI2:
 102              		.cfi_def_cfa_offset 8
 103              		.cfi_offset 7, -8
 104              		.cfi_offset 14, -4
 105 0002 82B0     		sub	sp, sp, #8
 106              	.LCFI3:
 107              		.cfi_def_cfa_offset 16
 108 0004 00AF     		add	r7, sp, #0
 109              	.LCFI4:
 110              		.cfi_def_cfa_register 7
  21:../Sources/main.c ****    int t = 0;
 111              		.loc 1 21 0
 112 0006 0023     		mov	r3, #0
 113 0008 7B60     		str	r3, [r7, #4]
 114 000a 00E0     		b	.L12
 115              	.L13:
  22:../Sources/main.c **** 
  23:../Sources/main.c ****    while(1){
  24:../Sources/main.c ****       TFC_Task();
  25:../Sources/main.c ****       if(LineScanImageReady == 1) {
  26:../Sources/main.c ****          LineScanImageReady = 0;
  27:../Sources/main.c ****          printf("\r\n");
  28:../Sources/main.c ****          printf("L:");
  29:../Sources/main.c ****          if(t == 0)
  30:../Sources/main.c ****             t = 3;
  31:../Sources/main.c ****          else
  32:../Sources/main.c ****             t--;
  33:../Sources/main.c **** 
  34:../Sources/main.c ****          TFC_SetBatteryLED_Level(t);
  35:../Sources/main.c **** 
  36:../Sources/main.c ****          int i;
  37:../Sources/main.c ****          for(i = 0; i < 128; i++)
  38:../Sources/main.c ****          {
  39:../Sources/main.c ****             printf("%X", LineScanImage0[i]);
  40:../Sources/main.c ****             if(i == 127)
  41:../Sources/main.c ****                printf("\r\n");
  42:../Sources/main.c ****             else
  43:../Sources/main.c ****                printf(",");
  44:../Sources/main.c ****          }
  45:../Sources/main.c ****       }
  46:../Sources/main.c ****    }
 116              		.loc 1 46 0
 117 000c C046     		mov	r8, r8
 118              	.L12:
  24:../Sources/main.c ****       TFC_Task();
 119              		.loc 1 24 0
 120 000e FFF7FEFF 		bl	TFC_Task
  25:../Sources/main.c ****       if(LineScanImageReady == 1) {
 121              		.loc 1 25 0
 122 0012 1F4B     		ldr	r3, .L14
 123 0014 1B78     		ldrb	r3, [r3]
 124 0016 DBB2     		uxtb	r3, r3
 125 0018 012B     		cmp	r3, #1
 126 001a F7D1     		bne	.L13
 127              	.LBB2:
  26:../Sources/main.c ****          LineScanImageReady = 0;
 128              		.loc 1 26 0
 129 001c 1C4B     		ldr	r3, .L14
 130 001e 0022     		mov	r2, #0
 131 0020 1A70     		strb	r2, [r3]
  27:../Sources/main.c ****          printf("\r\n");
 132              		.loc 1 27 0
 133 0022 1C4B     		ldr	r3, .L14+4
 134 0024 181C     		mov	r0, r3
 135 0026 FFF7FEFF 		bl	puts
  28:../Sources/main.c ****          printf("L:");
 136              		.loc 1 28 0
 137 002a 1B4B     		ldr	r3, .L14+8
 138 002c 181C     		mov	r0, r3
 139 002e FFF7FEFF 		bl	printf
  29:../Sources/main.c ****          if(t == 0)
 140              		.loc 1 29 0
 141 0032 7B68     		ldr	r3, [r7, #4]
 142 0034 002B     		cmp	r3, #0
 143 0036 02D1     		bne	.L6
  30:../Sources/main.c ****             t = 3;
 144              		.loc 1 30 0
 145 0038 0323     		mov	r3, #3
 146 003a 7B60     		str	r3, [r7, #4]
 147 003c 02E0     		b	.L7
 148              	.L6:
  32:../Sources/main.c ****             t--;
 149              		.loc 1 32 0
 150 003e 7B68     		ldr	r3, [r7, #4]
 151 0040 013B     		sub	r3, r3, #1
 152 0042 7B60     		str	r3, [r7, #4]
 153              	.L7:
  34:../Sources/main.c ****          TFC_SetBatteryLED_Level(t);
 154              		.loc 1 34 0
 155 0044 7B68     		ldr	r3, [r7, #4]
 156 0046 DBB2     		uxtb	r3, r3
 157 0048 181C     		mov	r0, r3
 158 004a FFF7FEFF 		bl	TFC_SetBatteryLED_Level
  37:../Sources/main.c ****          for(i = 0; i < 128; i++)
 159              		.loc 1 37 0
 160 004e 0023     		mov	r3, #0
 161 0050 3B60     		str	r3, [r7]
 162 0052 19E0     		b	.L8
 163              	.L11:
  39:../Sources/main.c ****             printf("%X", LineScanImage0[i]);
 164              		.loc 1 39 0
 165 0054 114B     		ldr	r3, .L14+12
 166 0056 1A68     		ldr	r2, [r3]
 167 0058 3B68     		ldr	r3, [r7]
 168 005a 5B00     		lsl	r3, r3, #1
 169 005c D318     		add	r3, r2, r3
 170 005e 1B88     		ldrh	r3, [r3]
 171 0060 9BB2     		uxth	r3, r3
 172 0062 0F4A     		ldr	r2, .L14+16
 173 0064 101C     		mov	r0, r2
 174 0066 191C     		mov	r1, r3
 175 0068 FFF7FEFF 		bl	printf
  40:../Sources/main.c ****             if(i == 127)
 176              		.loc 1 40 0
 177 006c 3B68     		ldr	r3, [r7]
 178 006e 7F2B     		cmp	r3, #127
 179 0070 04D1     		bne	.L9
  41:../Sources/main.c ****                printf("\r\n");
 180              		.loc 1 41 0
 181 0072 084B     		ldr	r3, .L14+4
 182 0074 181C     		mov	r0, r3
 183 0076 FFF7FEFF 		bl	puts
 184 007a 02E0     		b	.L10
 185              	.L9:
  43:../Sources/main.c ****                printf(",");
 186              		.loc 1 43 0
 187 007c 2C20     		mov	r0, #44
 188 007e FFF7FEFF 		bl	putchar
 189              	.L10:
  37:../Sources/main.c ****          for(i = 0; i < 128; i++)
 190              		.loc 1 37 0
 191 0082 3B68     		ldr	r3, [r7]
 192 0084 0133     		add	r3, r3, #1
 193 0086 3B60     		str	r3, [r7]
 194              	.L8:
  37:../Sources/main.c ****          for(i = 0; i < 128; i++)
 195              		.loc 1 37 0 is_stmt 0
 196 0088 3B68     		ldr	r3, [r7]
 197 008a 7F2B     		cmp	r3, #127
 198 008c E2DD     		ble	.L11
 199              	.LBE2:
 200              		.loc 1 46 0 is_stmt 1
 201 008e BDE7     		b	.L13
 202              	.L15:
 203              		.align	2
 204              	.L14:
 205 0090 00000000 		.word	LineScanImageReady
 206 0094 00000000 		.word	.LC1
 207 0098 04000000 		.word	.LC3
 208 009c 00000000 		.word	LineScanImage0
 209 00a0 08000000 		.word	.LC6
 210              		.cfi_endproc
 211              	.LFE1:
 213              		.global	__aeabi_idiv
 214              		.section	.rodata
 215 000b 00       		.align	2
 216              	.LC10:
 217 000c 0A255800 		.ascii	"\012%X\000"
 218              		.section	.text.runToLine,"ax",%progbits
 219              		.align	2
 220              		.global	runToLine
 221              		.code	16
 222              		.thumb_func
 224              	runToLine:
 225              	.LFB2:
  47:../Sources/main.c **** }
  48:../Sources/main.c **** 
  49:../Sources/main.c **** 
  50:../Sources/main.c **** void runToLine(){
 226              		.loc 1 50 0
 227              		.cfi_startproc
 228 0000 80B5     		push	{r7, lr}
 229              	.LCFI5:
 230              		.cfi_def_cfa_offset 8
 231              		.cfi_offset 7, -8
 232              		.cfi_offset 14, -4
 233 0002 84B0     		sub	sp, sp, #16
 234              	.LCFI6:
 235              		.cfi_def_cfa_offset 24
 236 0004 00AF     		add	r7, sp, #0
 237              	.LCFI7:
 238              		.cfi_def_cfa_register 7
  51:../Sources/main.c **** 	
  52:../Sources/main.c **** 	long int sum;
  53:../Sources/main.c **** 	int avg = 0;
 239              		.loc 1 53 0
 240 0006 0023     		mov	r3, #0
 241 0008 BB60     		str	r3, [r7, #8]
 242              	.L21:
  54:../Sources/main.c **** 	int i;
  55:../Sources/main.c **** 	
  56:../Sources/main.c **** 	
  57:../Sources/main.c **** 	
  58:../Sources/main.c **** 	while(1){
  59:../Sources/main.c **** 		TFC_Task();
 243              		.loc 1 59 0
 244 000a FFF7FEFF 		bl	TFC_Task
  60:../Sources/main.c **** 		sum = 0;
 245              		.loc 1 60 0
 246 000e 0023     		mov	r3, #0
 247 0010 FB60     		str	r3, [r7, #12]
  61:../Sources/main.c **** 		TFC_SetServo(0,-.15);
 248              		.loc 1 61 0
 249 0012 214B     		ldr	r3, .L23
 250 0014 0020     		mov	r0, #0
 251 0016 191C     		add	r1, r3, #0
 252 0018 FFF7FEFF 		bl	TFC_SetServo
  62:../Sources/main.c **** 		if( LineScanImageReady == 1 ){
 253              		.loc 1 62 0
 254 001c 1F4B     		ldr	r3, .L23+4
 255 001e 1B78     		ldrb	r3, [r3]
 256 0020 DBB2     		uxtb	r3, r3
 257 0022 012B     		cmp	r3, #1
 258 0024 1CD1     		bne	.L17
  63:../Sources/main.c **** 			  LineScanImageReady = 0;
 259              		.loc 1 63 0
 260 0026 1D4B     		ldr	r3, .L23+4
 261 0028 0022     		mov	r2, #0
 262 002a 1A70     		strb	r2, [r3]
  64:../Sources/main.c **** 			  
  65:../Sources/main.c **** 			  //Adds each pixels light value to the total
  66:../Sources/main.c **** 			  for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 263              		.loc 1 66 0
 264 002c 0A23     		mov	r3, #10
 265 002e 7B60     		str	r3, [r7, #4]
 266 0030 0CE0     		b	.L18
 267              	.L19:
  67:../Sources/main.c **** 				  sum += LineScanImage0[i];
 268              		.loc 1 67 0
 269 0032 1B4B     		ldr	r3, .L23+8
 270 0034 1A68     		ldr	r2, [r3]
 271 0036 7B68     		ldr	r3, [r7, #4]
 272 0038 5B00     		lsl	r3, r3, #1
 273 003a D318     		add	r3, r2, r3
 274 003c 1B88     		ldrh	r3, [r3]
 275 003e 9BB2     		uxth	r3, r3
 276 0040 FA68     		ldr	r2, [r7, #12]
 277 0042 D318     		add	r3, r2, r3
 278 0044 FB60     		str	r3, [r7, #12]
  66:../Sources/main.c **** 			  for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 279              		.loc 1 66 0
 280 0046 7B68     		ldr	r3, [r7, #4]
 281 0048 0133     		add	r3, r3, #1
 282 004a 7B60     		str	r3, [r7, #4]
 283              	.L18:
  66:../Sources/main.c **** 			  for( i = START_PIXEL; i < STOP_PIXEL; i++ ){
 284              		.loc 1 66 0 is_stmt 0
 285 004c 7B68     		ldr	r3, [r7, #4]
 286 004e 752B     		cmp	r3, #117
 287 0050 EFDD     		ble	.L19
  68:../Sources/main.c **** 			  }
  69:../Sources/main.c **** 	
  70:../Sources/main.c **** 			  //Calculates average light value
  71:../Sources/main.c **** 			  avg = sum / ( STOP_PIXEL - START_PIXEL );
 288              		.loc 1 71 0 is_stmt 1
 289 0052 FB68     		ldr	r3, [r7, #12]
 290 0054 181C     		mov	r0, r3
 291 0056 6C21     		mov	r1, #108
 292 0058 FFF7FEFF 		bl	__aeabi_idiv
 293 005c 031C     		mov	r3, r0
 294 005e BB60     		str	r3, [r7, #8]
 295              	.L17:
  72:../Sources/main.c **** 		}
  73:../Sources/main.c **** 		printf("\n%X", avg);
 296              		.loc 1 73 0
 297 0060 104A     		ldr	r2, .L23+12
 298 0062 BB68     		ldr	r3, [r7, #8]
 299 0064 101C     		mov	r0, r2
 300 0066 191C     		mov	r1, r3
 301 0068 FFF7FEFF 		bl	printf
  74:../Sources/main.c **** 		if(avg>>11&&0x01){
 302              		.loc 1 74 0
 303 006c BB68     		ldr	r3, [r7, #8]
 304 006e DB12     		asr	r3, r3, #11
 305 0070 06D0     		beq	.L20
  75:../Sources/main.c **** 			TFC_SetMotorPWM(.3, .3);
 306              		.loc 1 75 0
 307 0072 0D4A     		ldr	r2, .L23+16
 308 0074 0C4B     		ldr	r3, .L23+16
 309 0076 101C     		add	r0, r2, #0
 310 0078 191C     		add	r1, r3, #0
 311 007a FFF7FEFF 		bl	TFC_SetMotorPWM
  76:../Sources/main.c **** 		}
  77:../Sources/main.c **** 		else{
  78:../Sources/main.c **** 			TFC_SetMotorPWM(0, 0);
  79:../Sources/main.c **** 			TFC_HBRIDGE_DISABLE;
  80:../Sources/main.c **** 			while(1);
  81:../Sources/main.c **** 		}
  82:../Sources/main.c **** 	}
 312              		.loc 1 82 0
 313 007e C4E7     		b	.L21
 314              	.L20:
  78:../Sources/main.c **** 			TFC_SetMotorPWM(0, 0);
 315              		.loc 1 78 0
 316 0080 0022     		mov	r2, #0
 317 0082 0023     		mov	r3, #0
 318 0084 101C     		add	r0, r2, #0
 319 0086 191C     		add	r1, r3, #0
 320 0088 FFF7FEFF 		bl	TFC_SetMotorPWM
  79:../Sources/main.c **** 			TFC_HBRIDGE_DISABLE;
 321              		.loc 1 79 0
 322 008c 074B     		ldr	r3, .L23+20
 323 008e 8022     		mov	r2, #128
 324 0090 9203     		lsl	r2, r2, #14
 325 0092 9A60     		str	r2, [r3, #8]
 326              	.L22:
  80:../Sources/main.c **** 			while(1);
 327              		.loc 1 80 0
 328 0094 FEE7     		b	.L22
 329              	.L24:
 330 0096 C046     		.align	2
 331              	.L23:
 332 0098 9A9919BE 		.word	-1105618534
 333 009c 00000000 		.word	LineScanImageReady
 334 00a0 00000000 		.word	LineScanImage0
 335 00a4 0C000000 		.word	.LC10
 336 00a8 9A99993E 		.word	1050253722
 337 00ac 00F10F40 		.word	1074786560
 338              		.cfi_endproc
 339              	.LFE2:
 341              		.section	.text.main,"ax",%progbits
 342              		.align	2
 343              		.global	main
 344              		.code	16
 345              		.thumb_func
 347              	main:
 348              	.LFB3:
  83:../Sources/main.c **** }
  84:../Sources/main.c **** 
  85:../Sources/main.c **** int main(void){
 349              		.loc 1 85 0
 350              		.cfi_startproc
 351 0000 80B5     		push	{r7, lr}
 352              	.LCFI8:
 353              		.cfi_def_cfa_offset 8
 354              		.cfi_offset 7, -8
 355              		.cfi_offset 14, -4
 356 0002 00AF     		add	r7, sp, #0
 357              	.LCFI9:
 358              		.cfi_def_cfa_register 7
  86:../Sources/main.c ****    TFC_Init();
 359              		.loc 1 86 0
 360 0004 FFF7FEFF 		bl	TFC_Init
  87:../Sources/main.c ****    TFC_SetMotorPWM(0, 0);
 361              		.loc 1 87 0
 362 0008 0022     		mov	r2, #0
 363 000a 0023     		mov	r3, #0
 364 000c 101C     		add	r0, r2, #0
 365 000e 191C     		add	r1, r3, #0
 366 0010 FFF7FEFF 		bl	TFC_SetMotorPWM
  88:../Sources/main.c ****    TFC_HBRIDGE_DISABLE;
 367              		.loc 1 88 0
 368 0014 444B     		ldr	r3, .L40
 369 0016 8022     		mov	r2, #128
 370 0018 9203     		lsl	r2, r2, #14
 371 001a 9A60     		str	r2, [r3, #8]
  89:../Sources/main.c **** 
  90:../Sources/main.c ****    /* After power on, Wait for a button press before doing anything.
  91:../Sources/main.c ****     * This gives us time to set the DIP switches and etc */
  92:../Sources/main.c ****    TFC_BAT_LED0_ON; // This light will indicate that we're waiting
 372              		.loc 1 92 0
 373 001c 434B     		ldr	r3, .L40+4
 374 001e 8022     		mov	r2, #128
 375 0020 5200     		lsl	r2, r2, #1
 376 0022 5A60     		str	r2, [r3, #4]
  93:../Sources/main.c ****    while(!TFC_PUSH_BUTTON_0_PRESSED);
 377              		.loc 1 93 0
 378 0024 C046     		mov	r8, r8
 379              	.L26:
 380              		.loc 1 93 0 is_stmt 0
 381 0026 424B     		ldr	r3, .L40+8
 382 0028 1A69     		ldr	r2, [r3, #16]
 383 002a 8023     		mov	r3, #128
 384 002c 9B01     		lsl	r3, r3, #6
 385 002e 1340     		and	r3, r2
 386 0030 F9D0     		beq	.L26
  94:../Sources/main.c **** 
  95:../Sources/main.c ****    /* Then set the operating mode based on the DIP switch */
  96:../Sources/main.c ****    switch(TFC_GetDIP_Switch()&0x07) {
 387              		.loc 1 96 0 is_stmt 1
 388 0032 FFF7FEFF 		bl	TFC_GetDIP_Switch
 389 0036 031C     		mov	r3, r0
 390 0038 1A1C     		mov	r2, r3
 391 003a 0723     		mov	r3, #7
 392 003c 1340     		and	r3, r2
 393 003e 022B     		cmp	r3, #2
 394 0040 1BD0     		beq	.L29
 395 0042 02DC     		bgt	.L32
 396 0044 012B     		cmp	r3, #1
 397 0046 0BD0     		beq	.L28
 398 0048 03E0     		b	.L27
 399              	.L32:
 400 004a 032B     		cmp	r3, #3
 401 004c 21D0     		beq	.L30
 402 004e 042B     		cmp	r3, #4
 403 0050 2ED0     		beq	.L31
 404              	.L27:
  97:../Sources/main.c ****       default:
  98:../Sources/main.c ****       case 0:
  99:../Sources/main.c ****     	 TFC_BAT_LED1_ON;
 405              		.loc 1 99 0
 406 0052 364B     		ldr	r3, .L40+4
 407 0054 8022     		mov	r2, #128
 408 0056 9200     		lsl	r2, r2, #2
 409 0058 5A60     		str	r2, [r3, #4]
 100:../Sources/main.c ****          // In the default mode, simply read out the camera forever
 101:../Sources/main.c ****          printCamera();
 410              		.loc 1 101 0
 411 005a FFF7FEFF 		bl	printCamera
 102:../Sources/main.c ****          break;
 412              		.loc 1 102 0
 413 005e 4FE0     		b	.L33
 414              	.L28:
 103:../Sources/main.c ****       case 1:
 104:../Sources/main.c ****     	 TFC_BAT_LED2_ON;
 415              		.loc 1 104 0
 416 0060 324B     		ldr	r3, .L40+4
 417 0062 8022     		mov	r2, #128
 418 0064 D200     		lsl	r2, r2, #3
 419 0066 5A60     		str	r2, [r3, #4]
 105:../Sources/main.c ****          TFC_HBRIDGE_ENABLE;
 420              		.loc 1 105 0
 421 0068 2F4B     		ldr	r3, .L40
 422 006a 8022     		mov	r2, #128
 423 006c 9203     		lsl	r2, r2, #14
 424 006e 5A60     		str	r2, [r3, #4]
 425              	.L34:
 106:../Sources/main.c ****          // In this mode, we will actually run the analysis and drive.
 107:../Sources/main.c ****          while(1) {
 108:../Sources/main.c ****             TFC_Task();
 426              		.loc 1 108 0
 427 0070 FFF7FEFF 		bl	TFC_Task
 109:../Sources/main.c ****             algo_one();
 428              		.loc 1 109 0
 429 0074 FFF7FEFF 		bl	algo_one
 110:../Sources/main.c ****          }
 430              		.loc 1 110 0
 431 0078 FAE7     		b	.L34
 432              	.L29:
 111:../Sources/main.c ****          break;
 112:../Sources/main.c ****       case 2:
 113:../Sources/main.c ****     	 // In this mode, we drive forward a little bit.
 114:../Sources/main.c ****     	 TFC_BAT_LED3_ON;	
 433              		.loc 1 114 0
 434 007a 2C4B     		ldr	r3, .L40+4
 435 007c 8022     		mov	r2, #128
 436 007e 1201     		lsl	r2, r2, #4
 437 0080 5A60     		str	r2, [r3, #4]
 115:../Sources/main.c ****     	 delay(300);
 438              		.loc 1 115 0
 439 0082 9623     		mov	r3, #150
 440 0084 5B00     		lsl	r3, r3, #1
 441 0086 181C     		mov	r0, r3
 442 0088 FFF7FEFF 		bl	delay
 116:../Sources/main.c ****     	 forwardFull();
 443              		.loc 1 116 0
 444 008c FFF7FEFF 		bl	forwardFull
 117:../Sources/main.c ****     	 break;
 445              		.loc 1 117 0
 446 0090 36E0     		b	.L33
 447              	.L30:
 118:../Sources/main.c ****       case 3:
 119:../Sources/main.c ****     	 // In this mode, we drive forward until the input is below a threshold
 120:../Sources/main.c ****     	 TFC_BAT_LED3_ON;
 448              		.loc 1 120 0
 449 0092 264B     		ldr	r3, .L40+4
 450 0094 8022     		mov	r2, #128
 451 0096 1201     		lsl	r2, r2, #4
 452 0098 5A60     		str	r2, [r3, #4]
 121:../Sources/main.c ****     	 TFC_BAT_LED2_ON;
 453              		.loc 1 121 0
 454 009a 244B     		ldr	r3, .L40+4
 455 009c 8022     		mov	r2, #128
 456 009e D200     		lsl	r2, r2, #3
 457 00a0 5A60     		str	r2, [r3, #4]
 122:../Sources/main.c ****          TFC_HBRIDGE_ENABLE;
 458              		.loc 1 122 0
 459 00a2 214B     		ldr	r3, .L40
 460 00a4 8022     		mov	r2, #128
 461 00a6 9203     		lsl	r2, r2, #14
 462 00a8 5A60     		str	r2, [r3, #4]
 123:../Sources/main.c ****     	 runToLine();
 463              		.loc 1 123 0
 464 00aa FFF7FEFF 		bl	runToLine
 124:../Sources/main.c ****     	 break;
 465              		.loc 1 124 0
 466 00ae 27E0     		b	.L33
 467              	.L31:
 125:../Sources/main.c ****       case 4:
 126:../Sources/main.c ****     	  TFC_BAT_LED0_ON;
 468              		.loc 1 126 0
 469 00b0 1E4B     		ldr	r3, .L40+4
 470 00b2 8022     		mov	r2, #128
 471 00b4 5200     		lsl	r2, r2, #1
 472 00b6 5A60     		str	r2, [r3, #4]
 127:../Sources/main.c ****     	  TFC_BAT_LED1_ON;
 473              		.loc 1 127 0
 474 00b8 1C4B     		ldr	r3, .L40+4
 475 00ba 8022     		mov	r2, #128
 476 00bc 9200     		lsl	r2, r2, #2
 477 00be 5A60     		str	r2, [r3, #4]
 128:../Sources/main.c ****     	  TFC_BAT_LED2_ON;
 478              		.loc 1 128 0
 479 00c0 1A4B     		ldr	r3, .L40+4
 480 00c2 8022     		mov	r2, #128
 481 00c4 D200     		lsl	r2, r2, #3
 482 00c6 5A60     		str	r2, [r3, #4]
 129:../Sources/main.c ****     	  TFC_BAT_LED3_ON;
 483              		.loc 1 129 0
 484 00c8 184B     		ldr	r3, .L40+4
 485 00ca 8022     		mov	r2, #128
 486 00cc 1201     		lsl	r2, r2, #4
 487 00ce 5A60     		str	r2, [r3, #4]
 130:../Sources/main.c ****     	  TFC_HBRIDGE_ENABLE;
 488              		.loc 1 130 0
 489 00d0 154B     		ldr	r3, .L40
 490 00d2 8022     		mov	r2, #128
 491 00d4 9203     		lsl	r2, r2, #14
 492 00d6 5A60     		str	r2, [r3, #4]
 493 00d8 00E0     		b	.L37
 494              	.L39:
 131:../Sources/main.c ****     	  while(1) {
 132:../Sources/main.c ****     		  TFC_Task();
 133:../Sources/main.c ****     		  //algo_one();
 134:../Sources/main.c ****     	      algo_two();
 135:../Sources/main.c ****     	      TFC_SetMotorPWM(.3, .3);
 136:../Sources/main.c ****     	      if(TFC_PUSH_BUTTON_1_PRESSED)break;
 137:../Sources/main.c ****     	  }
 495              		.loc 1 137 0
 496 00da C046     		mov	r8, r8
 497              	.L37:
 132:../Sources/main.c ****     		  TFC_Task();
 498              		.loc 1 132 0
 499 00dc FFF7FEFF 		bl	TFC_Task
 134:../Sources/main.c ****     	      algo_two();
 500              		.loc 1 134 0
 501 00e0 FFF7FEFF 		bl	algo_two
 135:../Sources/main.c ****     	      TFC_SetMotorPWM(.3, .3);
 502              		.loc 1 135 0
 503 00e4 134A     		ldr	r2, .L40+12
 504 00e6 134B     		ldr	r3, .L40+12
 505 00e8 101C     		add	r0, r2, #0
 506 00ea 191C     		add	r1, r3, #0
 507 00ec FFF7FEFF 		bl	TFC_SetMotorPWM
 136:../Sources/main.c ****     	      if(TFC_PUSH_BUTTON_1_PRESSED)break;
 508              		.loc 1 136 0
 509 00f0 0F4B     		ldr	r3, .L40+8
 510 00f2 1A69     		ldr	r2, [r3, #16]
 511 00f4 8023     		mov	r3, #128
 512 00f6 9B02     		lsl	r3, r3, #10
 513 00f8 1340     		and	r3, r2
 514 00fa EED0     		beq	.L39
 515 00fc C046     		mov	r8, r8
 138:../Sources/main.c ****     	  
 139:../Sources/main.c ****     	  break;
 516              		.loc 1 139 0
 517 00fe C046     		mov	r8, r8
 518              	.L33:
 140:../Sources/main.c ****     	  
 141:../Sources/main.c ****    }
 142:../Sources/main.c **** 
 143:../Sources/main.c ****    TFC_SetServo(0,0);
 519              		.loc 1 143 0
 520 0100 0023     		mov	r3, #0
 521 0102 0020     		mov	r0, #0
 522 0104 191C     		add	r1, r3, #0
 523 0106 FFF7FEFF 		bl	TFC_SetServo
 144:../Sources/main.c ****    TFC_SetMotorPWM(0, 0);
 524              		.loc 1 144 0
 525 010a 0022     		mov	r2, #0
 526 010c 0023     		mov	r3, #0
 527 010e 101C     		add	r0, r2, #0
 528 0110 191C     		add	r1, r3, #0
 529 0112 FFF7FEFF 		bl	TFC_SetMotorPWM
 145:../Sources/main.c ****    TFC_HBRIDGE_DISABLE;
 530              		.loc 1 145 0
 531 0116 044B     		ldr	r3, .L40
 532 0118 8022     		mov	r2, #128
 533 011a 9203     		lsl	r2, r2, #14
 534 011c 9A60     		str	r2, [r3, #8]
 146:../Sources/main.c ****    return 0;
 535              		.loc 1 146 0
 536 011e 0023     		mov	r3, #0
 147:../Sources/main.c **** }
 537              		.loc 1 147 0
 538 0120 181C     		mov	r0, r3
 539 0122 BD46     		mov	sp, r7
 540              		@ sp needed for prologue
 541 0124 80BD     		pop	{r7, pc}
 542              	.L41:
 543 0126 C046     		.align	2
 544              	.L40:
 545 0128 00F10F40 		.word	1074786560
 546 012c 40F00F40 		.word	1074786368
 547 0130 80F00F40 		.word	1074786432
 548 0134 9A99993E 		.word	1050253722
 549              		.cfi_endproc
 550              	.LFE3:
 552              		.text
 553              	.Letext0:
 554              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 555              		.file 3 "C:/Users/Jared/Desktop/freescalecup/FRDM-TFC/Project_Headers/MKL25Z4.h"
 556              		.file 4 "C:/Users/Jared/Desktop/freescalecup/FRDM-TFC/Project_Headers/TFC\\TFC_LineScanCamera.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Jared\AppData\Local\Temp\cchltWcD.s:18     .text.forwardFull:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cchltWcD.s:23     .text.forwardFull:00000000 forwardFull
C:\Users\Jared\AppData\Local\Temp\cchltWcD.s:75     .text.forwardFull:00000044 $d
C:\Users\Jared\AppData\Local\Temp\cchltWcD.s:81     .rodata:00000000 $d
C:\Users\Jared\AppData\Local\Temp\cchltWcD.s:91     .text.printCamera:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cchltWcD.s:96     .text.printCamera:00000000 printCamera
C:\Users\Jared\AppData\Local\Temp\cchltWcD.s:205    .text.printCamera:00000090 $d
C:\Users\Jared\AppData\Local\Temp\cchltWcD.s:219    .text.runToLine:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cchltWcD.s:224    .text.runToLine:00000000 runToLine
C:\Users\Jared\AppData\Local\Temp\cchltWcD.s:332    .text.runToLine:00000098 $d
C:\Users\Jared\AppData\Local\Temp\cchltWcD.s:342    .text.main:00000000 $t
C:\Users\Jared\AppData\Local\Temp\cchltWcD.s:347    .text.main:00000000 main
C:\Users\Jared\AppData\Local\Temp\cchltWcD.s:545    .text.main:00000128 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
TFC_SetServo
TFC_SetMotorPWM
delay
TFC_Task
puts
printf
TFC_SetBatteryLED_Level
putchar
LineScanImageReady
LineScanImage0
__aeabi_idiv
TFC_Init
TFC_GetDIP_Switch
algo_one
algo_two
